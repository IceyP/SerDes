////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_21d479b4f0f8b36a.v
// /___/   /\     Timestamp: Mon Oct 17 14:15:32 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_21d479b4f0f8b36a.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_21d479b4f0f8b36a.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_21d479b4f0f8b36a.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_21d479b4f0f8b36a.v
// # of Modules	: 1
// Design Name	: addsb_11_0_21d479b4f0f8b36a
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_21d479b4f0f8b36a (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [22 : 0] a;
  input [22 : 0] b;
  output [22 : 0] s;
  
  // synthesis translate_off
  
  wire N0;
  wire [23 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [22 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [22 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [21 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N0),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N0),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_23630b5019bde586.v
// /___/   /\     Timestamp: Mon Oct 17 14:16:10 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_23630b5019bde586.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_23630b5019bde586.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_23630b5019bde586.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_23630b5019bde586.v
// # of Modules	: 1
// Design Name	: addsb_11_0_23630b5019bde586
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_23630b5019bde586 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [16 : 0] a;
  input [16 : 0] b;
  output [16 : 0] s;
  
  // synthesis translate_off
  
  wire N0;
  wire [17 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [15 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N0),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N0),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_2435c8258456a785.v
// /___/   /\     Timestamp: Mon Oct 17 14:16:44 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_2435c8258456a785.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_2435c8258456a785.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_2435c8258456a785.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_2435c8258456a785.v
// # of Modules	: 1
// Design Name	: addsb_11_0_2435c8258456a785
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_2435c8258456a785 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [24 : 0] a;
  input [24 : 0] b;
  output [24 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [25 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [24 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [24 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [23 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[24] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25],
    s[23] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24],
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .DI(a[23]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .DI(a[22]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_25  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_24  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_23_xo<0>1  (
    .I0(a[23]),
    .I1(b[23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_24_xo<0>1  (
    .I0(a[24]),
    .I1(b[24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_4450b28271eb3e37.v
// /___/   /\     Timestamp: Mon Oct 17 14:17:18 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_4450b28271eb3e37.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_4450b28271eb3e37.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_4450b28271eb3e37.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_4450b28271eb3e37.v
// # of Modules	: 1
// Design Name	: addsb_11_0_4450b28271eb3e37
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_4450b28271eb3e37 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [16 : 0] a;
  input [16 : 0] b;
  output [16 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [17 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [15 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_5cceab115d1c98ee.v
// /___/   /\     Timestamp: Mon Oct 17 14:17:52 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5cceab115d1c98ee.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5cceab115d1c98ee.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5cceab115d1c98ee.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5cceab115d1c98ee.v
// # of Modules	: 1
// Design Name	: addsb_11_0_5cceab115d1c98ee
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_5cceab115d1c98ee (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [28 : 0] a;
  input [28 : 0] b;
  output [28 : 0] s;
  
  // synthesis translate_off
  
  wire N0;
  wire [29 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [28 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [28 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [27 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[28] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [29],
    s[27] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [28],
    s[26] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27],
    s[25] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26],
    s[24] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25],
    s[23] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24],
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N0),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [28])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[27].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [27])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[26].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[27].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26]),
    .DI(a[27]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[26].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .DI(a[26]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .DI(a[25]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .DI(a[24]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .DI(a[23]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .DI(a[22]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N0),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_29  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [28]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [29])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_28  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [27]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [28])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_27  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_26  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_25  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_24  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_23_xo<0>1  (
    .I0(a[23]),
    .I1(b[23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_24_xo<0>1  (
    .I0(a[24]),
    .I1(b[24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_25_xo<0>1  (
    .I0(a[25]),
    .I1(b[25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_26_xo<0>1  (
    .I0(a[26]),
    .I1(b[26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_27_xo<0>1  (
    .I0(a[27]),
    .I1(b[27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_28_xo<0>1  (
    .I0(a[28]),
    .I1(b[28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_5d46a0b9957ad856.v
// /___/   /\     Timestamp: Mon Oct 17 14:18:26 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5d46a0b9957ad856.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5d46a0b9957ad856.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5d46a0b9957ad856.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_5d46a0b9957ad856.v
// # of Modules	: 1
// Design Name	: addsb_11_0_5d46a0b9957ad856
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_5d46a0b9957ad856 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [17 : 0] a;
  input [17 : 0] b;
  output [17 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [18 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [17 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [17 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_64bb7cb6774745cb.v
// /___/   /\     Timestamp: Mon Oct 17 14:19:01 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_64bb7cb6774745cb.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_64bb7cb6774745cb.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_64bb7cb6774745cb.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_64bb7cb6774745cb.v
// # of Modules	: 1
// Design Name	: addsb_11_0_64bb7cb6774745cb
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_64bb7cb6774745cb (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [10 : 0] a;
  input [10 : 0] b;
  output [10 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [11 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [10 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [10 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [9 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_725cd2adfb370cbc.v
// /___/   /\     Timestamp: Mon Oct 17 14:19:36 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_725cd2adfb370cbc.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_725cd2adfb370cbc.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_725cd2adfb370cbc.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_725cd2adfb370cbc.v
// # of Modules	: 1
// Design Name	: addsb_11_0_725cd2adfb370cbc
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_725cd2adfb370cbc (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [30 : 0] a;
  input [30 : 0] b;
  output [30 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [31 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [30 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [30 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [29 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[30] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [31],
    s[29] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [30],
    s[28] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [29],
    s[27] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [28],
    s[26] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27],
    s[25] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26],
    s[24] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25],
    s[23] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24],
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [29]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [30]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [30])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[29].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [28]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [29]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [29])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[28].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [28])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[27].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [27])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[26].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[29].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [28]),
    .DI(a[29]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [29]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [29])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[28].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27]),
    .DI(a[28]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [28])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[27].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26]),
    .DI(a[27]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[26].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .DI(a[26]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .DI(a[25]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .DI(a[24]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .DI(a[23]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .DI(a[22]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_31  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [30]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [31])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_30  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [29]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [30])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_29  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [28]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [29])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_28  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [27]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [28])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_27  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_26  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_25  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_24  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_23_xo<0>1  (
    .I0(a[23]),
    .I1(b[23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_24_xo<0>1  (
    .I0(a[24]),
    .I1(b[24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_25_xo<0>1  (
    .I0(a[25]),
    .I1(b[25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_26_xo<0>1  (
    .I0(a[26]),
    .I1(b[26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_27_xo<0>1  (
    .I0(a[27]),
    .I1(b[27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_28_xo<0>1  (
    .I0(a[28]),
    .I1(b[28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_29_xo<0>1  (
    .I0(a[29]),
    .I1(b[29]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [29])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_30_xo<0>1  (
    .I0(a[30]),
    .I1(b[30]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [30])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_75cae8bed5545ee9.v
// /___/   /\     Timestamp: Mon Oct 17 14:20:10 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_75cae8bed5545ee9.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_75cae8bed5545ee9.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_75cae8bed5545ee9.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_75cae8bed5545ee9.v
// # of Modules	: 1
// Design Name	: addsb_11_0_75cae8bed5545ee9
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_75cae8bed5545ee9 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [12 : 0] a;
  input [12 : 0] b;
  output [12 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [13 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [12 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [12 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [11 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_7c7b2b2855006e6e.v
// /___/   /\     Timestamp: Mon Oct 17 14:20:44 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7c7b2b2855006e6e.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7c7b2b2855006e6e.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7c7b2b2855006e6e.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7c7b2b2855006e6e.v
// # of Modules	: 1
// Design Name	: addsb_11_0_7c7b2b2855006e6e
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_7c7b2b2855006e6e (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [13 : 0] a;
  input [13 : 0] b;
  output [13 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [14 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [13 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [13 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [12 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_7f55411a8f505b42.v
// /___/   /\     Timestamp: Mon Oct 17 14:21:18 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7f55411a8f505b42.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7f55411a8f505b42.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7f55411a8f505b42.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_7f55411a8f505b42.v
// # of Modules	: 1
// Design Name	: addsb_11_0_7f55411a8f505b42
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_7f55411a8f505b42 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [10 : 0] a;
  input [10 : 0] b;
  output [10 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [11 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [10 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [10 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [9 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_8825bda37560e614.v
// /___/   /\     Timestamp: Mon Oct 17 14:21:51 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8825bda37560e614.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8825bda37560e614.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8825bda37560e614.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8825bda37560e614.v
// # of Modules	: 1
// Design Name	: addsb_11_0_8825bda37560e614
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_8825bda37560e614 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [21 : 0] a;
  input [21 : 0] b;
  output [21 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [22 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [21 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [21 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [20 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_8b3d9400293568fa.v
// /___/   /\     Timestamp: Mon Oct 17 14:22:25 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8b3d9400293568fa.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8b3d9400293568fa.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8b3d9400293568fa.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_8b3d9400293568fa.v
// # of Modules	: 1
// Design Name	: addsb_11_0_8b3d9400293568fa
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_8b3d9400293568fa (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [19 : 0] a;
  input [19 : 0] b;
  output [19 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [20 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [19 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [19 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [18 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_a2c1ef62805d079c.v
// /___/   /\     Timestamp: Mon Oct 17 14:22:59 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_a2c1ef62805d079c.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_a2c1ef62805d079c.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_a2c1ef62805d079c.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_a2c1ef62805d079c.v
// # of Modules	: 1
// Design Name	: addsb_11_0_a2c1ef62805d079c
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_a2c1ef62805d079c (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [21 : 0] a;
  input [21 : 0] b;
  output [21 : 0] s;
  
  // synthesis translate_off
  
  wire N0;
  wire [22 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [21 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [21 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [20 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N0),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N0),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_b66a0112ed103095.v
// /___/   /\     Timestamp: Mon Oct 17 14:23:34 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_b66a0112ed103095.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_b66a0112ed103095.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_b66a0112ed103095.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_b66a0112ed103095.v
// # of Modules	: 1
// Design Name	: addsb_11_0_b66a0112ed103095
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_b66a0112ed103095 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [26 : 0] a;
  input [26 : 0] b;
  output [26 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [27 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [26 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [26 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [25 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[26] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27],
    s[25] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26],
    s[24] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25],
    s[23] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24],
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .DI(a[25]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .DI(a[24]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .DI(a[23]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .DI(a[22]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_27  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_26  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_25  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_24  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_23_xo<0>1  (
    .I0(a[23]),
    .I1(b[23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_24_xo<0>1  (
    .I0(a[24]),
    .I1(b[24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_25_xo<0>1  (
    .I0(a[25]),
    .I1(b[25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_26_xo<0>1  (
    .I0(a[26]),
    .I1(b[26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_bc1be80aeb880952.v
// /___/   /\     Timestamp: Mon Oct 17 14:24:08 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_bc1be80aeb880952.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_bc1be80aeb880952.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_bc1be80aeb880952.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_bc1be80aeb880952.v
// # of Modules	: 1
// Design Name	: addsb_11_0_bc1be80aeb880952
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_bc1be80aeb880952 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [32 : 0] a;
  input [32 : 0] b;
  output [32 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [33 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [32 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [32 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [31 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[32] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [33],
    s[31] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [32],
    s[30] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [31],
    s[29] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [30],
    s[28] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [29],
    s[27] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [28],
    s[26] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27],
    s[25] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26],
    s[24] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25],
    s[23] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24],
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [31]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [32]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [32])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[31].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [30]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [31]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [31])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[30].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [29]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [30]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [30])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[29].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [28]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [29]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [29])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[28].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [28])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[27].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [27])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[26].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[31].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [30]),
    .DI(a[31]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [31]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [31])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[30].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [29]),
    .DI(a[30]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [30]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [30])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[29].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [28]),
    .DI(a[29]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [29]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [29])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[28].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27]),
    .DI(a[28]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [28])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[27].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26]),
    .DI(a[27]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [27])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[26].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25]),
    .DI(a[26]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [26])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[25].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .DI(a[25]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [25])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .DI(a[24]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .DI(a[23]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .DI(a[22]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_33  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [32]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [33])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_32  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [31]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [32])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_31  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [30]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [31])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_30  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [29]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [30])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_29  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [28]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [29])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_28  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [27]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [28])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_27  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [26]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [27])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_26  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_25  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_24  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_23_xo<0>1  (
    .I0(a[23]),
    .I1(b[23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_24_xo<0>1  (
    .I0(a[24]),
    .I1(b[24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_25_xo<0>1  (
    .I0(a[25]),
    .I1(b[25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_26_xo<0>1  (
    .I0(a[26]),
    .I1(b[26]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [26])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_27_xo<0>1  (
    .I0(a[27]),
    .I1(b[27]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [27])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_28_xo<0>1  (
    .I0(a[28]),
    .I1(b[28]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [28])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_29_xo<0>1  (
    .I0(a[29]),
    .I1(b[29]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [29])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_30_xo<0>1  (
    .I0(a[30]),
    .I1(b[30]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [30])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_31_xo<0>1  (
    .I0(a[31]),
    .I1(b[31]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [31])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_32_xo<0>1  (
    .I0(a[32]),
    .I1(b[32]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [32])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_e214da8cd737bc9c.v
// /___/   /\     Timestamp: Mon Oct 17 14:24:42 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e214da8cd737bc9c.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e214da8cd737bc9c.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e214da8cd737bc9c.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e214da8cd737bc9c.v
// # of Modules	: 1
// Design Name	: addsb_11_0_e214da8cd737bc9c
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_e214da8cd737bc9c (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [18 : 0] a;
  input [18 : 0] b;
  output [18 : 0] s;
  
  // synthesis translate_off
  
  wire N0;
  wire [19 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [18 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [18 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [17 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N0),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N0),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_e342234b3f808cc6.v
// /___/   /\     Timestamp: Mon Oct 17 14:25:15 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e342234b3f808cc6.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e342234b3f808cc6.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e342234b3f808cc6.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e342234b3f808cc6.v
// # of Modules	: 1
// Design Name	: addsb_11_0_e342234b3f808cc6
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_e342234b3f808cc6 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [20 : 0] a;
  input [20 : 0] b;
  output [20 : 0] s;
  
  // synthesis translate_off
  
  wire N0;
  wire [21 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [20 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [20 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [19 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N0),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N0),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h9 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_e9a94c669f456a3b.v
// /___/   /\     Timestamp: Mon Oct 17 14:25:49 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e9a94c669f456a3b.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e9a94c669f456a3b.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e9a94c669f456a3b.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_e9a94c669f456a3b.v
// # of Modules	: 1
// Design Name	: addsb_11_0_e9a94c669f456a3b
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_e9a94c669f456a3b (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [20 : 0] a;
  input [20 : 0] b;
  output [20 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [21 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [20 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [20 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [19 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_ee39a18b297c3780.v
// /___/   /\     Timestamp: Mon Oct 17 14:26:23 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ee39a18b297c3780.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ee39a18b297c3780.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ee39a18b297c3780.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ee39a18b297c3780.v
// # of Modules	: 1
// Design Name	: addsb_11_0_ee39a18b297c3780
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_ee39a18b297c3780 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [25 : 0] a;
  input [25 : 0] b;
  output [25 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [26 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [25 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [25 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [24 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[25] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26],
    s[24] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25],
    s[23] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24],
    s[22] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23],
    s[21] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22],
    s[20] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21],
    s[19] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20],
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[24].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23]),
    .DI(a[24]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [24])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[23].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22]),
    .DI(a[23]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [23])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[22].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21]),
    .DI(a[22]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [22])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[21].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20]),
    .DI(a[21]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [21])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[20].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19]),
    .DI(a[20]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [20])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[19].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18]),
    .DI(a[19]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [19])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[18].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .DI(a[18]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [18])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_26  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [25]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [26])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_25  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [24]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [25])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_24  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [23]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [24])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_23  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [22]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [23])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_22  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [21]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [22])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_21  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [20]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [21])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_20  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [19]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [20])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_19_xo<0>1  (
    .I0(a[19]),
    .I1(b[19]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [19])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_20_xo<0>1  (
    .I0(a[20]),
    .I1(b[20]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [20])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_21_xo<0>1  (
    .I0(a[21]),
    .I1(b[21]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [21])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_22_xo<0>1  (
    .I0(a[22]),
    .I1(b[22]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [22])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_23_xo<0>1  (
    .I0(a[23]),
    .I1(b[23]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [23])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_24_xo<0>1  (
    .I0(a[24]),
    .I1(b[24]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [24])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_25_xo<0>1  (
    .I0(a[25]),
    .I1(b[25]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [25])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_f9ccbdc7584d43c6.v
// /___/   /\     Timestamp: Mon Oct 17 14:26:57 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_f9ccbdc7584d43c6.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_f9ccbdc7584d43c6.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_f9ccbdc7584d43c6.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_f9ccbdc7584d43c6.v
// # of Modules	: 1
// Design Name	: addsb_11_0_f9ccbdc7584d43c6
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_f9ccbdc7584d43c6 (
  clk, add, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input add;
  input ce;
  input [16 : 0] a;
  input [16 : 0] b;
  output [16 : 0] s;
  
  // synthesis translate_off
  
  wire \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/c_in_i ;
  wire [17 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [16 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [15 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/c_in_i ),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/c_in_i ),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(0)1  (
    .I0(a[0]),
    .I1(b[0]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(1)1  (
    .I0(a[1]),
    .I1(b[1]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(10)1  (
    .I0(a[10]),
    .I1(b[10]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(11)1  (
    .I0(a[11]),
    .I1(b[11]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(12)1  (
    .I0(a[12]),
    .I1(b[12]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(13)1  (
    .I0(a[13]),
    .I1(b[13]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(14)1  (
    .I0(a[14]),
    .I1(b[14]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(15)1  (
    .I0(a[15]),
    .I1(b[15]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(16)1  (
    .I0(a[16]),
    .I1(b[16]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(2)1  (
    .I0(a[2]),
    .I1(b[2]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(3)1  (
    .I0(a[3]),
    .I1(b[3]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(4)1  (
    .I0(a[4]),
    .I1(b[4]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(5)1  (
    .I0(a[5]),
    .I1(b[5]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(6)1  (
    .I0(a[6]),
    .I1(b[6]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(7)1  (
    .I0(a[7]),
    .I1(b[7]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(8)1  (
    .I0(a[8]),
    .I1(b[8]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT3 #(
    .INIT ( 8'h69 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum(9)1  (
    .I0(a[9]),
    .I1(b[9]),
    .I2(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  INV   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/c_in_i1_INV_0  (
    .I(add),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/c_in_i )
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_fa4e7b8a00f98f0c.v
// /___/   /\     Timestamp: Mon Oct 17 14:27:31 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_fa4e7b8a00f98f0c.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_fa4e7b8a00f98f0c.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_fa4e7b8a00f98f0c.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_fa4e7b8a00f98f0c.v
// # of Modules	: 1
// Design Name	: addsb_11_0_fa4e7b8a00f98f0c
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_fa4e7b8a00f98f0c (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [15 : 0] a;
  input [15 : 0] b;
  output [15 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [16 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [15 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [15 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [14 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: addsb_11_0_ffdcda883ad34064.v
// /___/   /\     Timestamp: Mon Oct 17 14:28:05 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ffdcda883ad34064.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ffdcda883ad34064.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ffdcda883ad34064.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/addsb_11_0_ffdcda883ad34064.v
// # of Modules	: 1
// Design Name	: addsb_11_0_ffdcda883ad34064
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module addsb_11_0_ffdcda883ad34064 (
  clk, ce, a, b, s
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input [18 : 0] a;
  input [18 : 0] b;
  output [18 : 0] s;
  
  // synthesis translate_off
  
  wire N1;
  wire [19 : 1] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [18 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [18 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  wire [17 : 0] \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  assign
    s[18] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19],
    s[17] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18],
    s[16] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17],
    s[15] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16],
    s[14] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15],
    s[13] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14],
    s[12] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13],
    s[11] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12],
    s[10] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11],
    s[9] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10],
    s[8] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9],
    s[7] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8],
    s[6] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7],
    s[5] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6],
    s[4] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5],
    s[3] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    s[2] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    s[1] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    s[0] = \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  GND   XST_GND (
    .G(N1)
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11])
  );
  XORCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  XORCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[17].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16]),
    .DI(a[17]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [17])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[16].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15]),
    .DI(a[16]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [16])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[15].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14]),
    .DI(a[15]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [15])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[14].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13]),
    .DI(a[14]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [14])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[13].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12]),
    .DI(a[13]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [13])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[12].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11]),
    .DI(a[12]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [12])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[11].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10]),
    .DI(a[11]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [11])
  );
  MUXCY 
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[10].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9]),
    .DI(a[10]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [10])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[9].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8]),
    .DI(a[9]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [9])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[8].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7]),
    .DI(a[8]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [8])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[7].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6]),
    .DI(a[7]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [7])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[6].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5]),
    .DI(a[6]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [6])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[5].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4]),
    .DI(a[5]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [5])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[4].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3]),
    .DI(a[4]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [4])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[3].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .DI(a[3]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [3])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(a[2]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(a[1]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  MUXCY   \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(a[0]),
    .S(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_19  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [18]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [19])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_18  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [17]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [18])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_17  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [16]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [17])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_16  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [15]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [16])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_15  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [14]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [15])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_14  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [13]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [14])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_13  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [12]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [13])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_12  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [11]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [12])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_11  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [10]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [11])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_10  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [9]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [10])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_9  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [8]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [9])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_8  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [7]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [8])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_7  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [6]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [7])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_6  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [5]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [6])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_5  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [4]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [5])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDE #(
    .INIT ( 1'b0 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .Q(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1  (
    .I0(a[0]),
    .I1(b[0]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_1_xo<0>1  (
    .I0(a[1]),
    .I1(b[1]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [1])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_2_xo<0>1  (
    .I0(a[2]),
    .I1(b[2]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [2])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_3_xo<0>1  (
    .I0(a[3]),
    .I1(b[3]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [3])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_4_xo<0>1  (
    .I0(a[4]),
    .I1(b[4]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [4])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_5_xo<0>1  (
    .I0(a[5]),
    .I1(b[5]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [5])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_6_xo<0>1  (
    .I0(a[6]),
    .I1(b[6]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [6])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_7_xo<0>1  (
    .I0(a[7]),
    .I1(b[7]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [7])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_8_xo<0>1  (
    .I0(a[8]),
    .I1(b[8]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [8])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_9_xo<0>1  (
    .I0(a[9]),
    .I1(b[9]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [9])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_10_xo<0>1  (
    .I0(a[10]),
    .I1(b[10]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [10])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_11_xo<0>1  (
    .I0(a[11]),
    .I1(b[11]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [11])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_12_xo<0>1  (
    .I0(a[12]),
    .I1(b[12]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [12])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_13_xo<0>1  (
    .I0(a[13]),
    .I1(b[13]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [13])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_14_xo<0>1  (
    .I0(a[14]),
    .I1(b[14]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [14])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_15_xo<0>1  (
    .I0(a[15]),
    .I1(b[15]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [15])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_16_xo<0>1  (
    .I0(a[16]),
    .I1(b[16]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [16])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_17_xo<0>1  (
    .I0(a[17]),
    .I1(b[17]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [17])
  );
  LUT2 #(
    .INIT ( 4'h6 ))
  \U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_18_xo<0>1  (
    .I0(a[18]),
    .I1(b[18]),
    .O(\U0/xst_addsub/i_baseblox.i_baseblox_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [18])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_317c2c92f6abd64e.v when simulating
// the core, bmg_62_317c2c92f6abd64e. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_317c2c92f6abd64e(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [9 : 0] addra;
output [17 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(10),
    .C_ADDRB_WIDTH(10),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_317c2c92f6abd64e.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(1024),
    .C_READ_DEPTH_B(1024),
    .C_READ_WIDTH_A(18),
    .C_READ_WIDTH_B(18),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(1024),
    .C_WRITE_DEPTH_B(1024),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(18),
    .C_WRITE_WIDTH_B(18),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_7e8eaec1029d9f73.v when simulating
// the core, bmg_62_7e8eaec1029d9f73. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_7e8eaec1029d9f73(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [9 : 0] addra;
output [17 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(10),
    .C_ADDRB_WIDTH(10),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_7e8eaec1029d9f73.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(1024),
    .C_READ_DEPTH_B(1024),
    .C_READ_WIDTH_A(18),
    .C_READ_WIDTH_B(18),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(1024),
    .C_WRITE_DEPTH_B(1024),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(18),
    .C_WRITE_WIDTH_B(18),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_b6c0b5dfd1d89cee.v when simulating
// the core, bmg_62_b6c0b5dfd1d89cee. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_b6c0b5dfd1d89cee(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [8 : 0] addra;
output [49 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(9),
    .C_ADDRB_WIDTH(9),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_b6c0b5dfd1d89cee.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(512),
    .C_READ_DEPTH_B(512),
    .C_READ_WIDTH_A(50),
    .C_READ_WIDTH_B(50),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(512),
    .C_WRITE_DEPTH_B(512),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(50),
    .C_WRITE_WIDTH_B(50),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_bcd177a5609f0846.v when simulating
// the core, bmg_62_bcd177a5609f0846. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_bcd177a5609f0846(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [9 : 0] addra;
output [26 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(10),
    .C_ADDRB_WIDTH(10),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_bcd177a5609f0846.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(1024),
    .C_READ_DEPTH_B(1024),
    .C_READ_WIDTH_A(27),
    .C_READ_WIDTH_B(27),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(1024),
    .C_WRITE_DEPTH_B(1024),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(27),
    .C_WRITE_WIDTH_B(27),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_d343f1ce4db1823a.v when simulating
// the core, bmg_62_d343f1ce4db1823a. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_d343f1ce4db1823a(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [8 : 0] addra;
output [38 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(9),
    .C_ADDRB_WIDTH(9),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_d343f1ce4db1823a.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(512),
    .C_READ_DEPTH_B(512),
    .C_READ_WIDTH_A(39),
    .C_READ_WIDTH_B(39),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(512),
    .C_WRITE_DEPTH_B(512),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(39),
    .C_WRITE_WIDTH_B(39),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_d6e6f44a8de25b69.v when simulating
// the core, bmg_62_d6e6f44a8de25b69. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_d6e6f44a8de25b69(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [8 : 0] addra;
output [51 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(9),
    .C_ADDRB_WIDTH(9),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_d6e6f44a8de25b69.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(512),
    .C_READ_DEPTH_B(512),
    .C_READ_WIDTH_A(52),
    .C_READ_WIDTH_B(52),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(512),
    .C_WRITE_DEPTH_B(512),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(52),
    .C_WRITE_WIDTH_B(52),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_d909ce02585bca26.v when simulating
// the core, bmg_62_d909ce02585bca26. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_d909ce02585bca26(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [8 : 0] addra;
output [55 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(9),
    .C_ADDRB_WIDTH(9),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_d909ce02585bca26.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(512),
    .C_READ_DEPTH_B(512),
    .C_READ_WIDTH_A(56),
    .C_READ_WIDTH_B(56),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(512),
    .C_WRITE_DEPTH_B(512),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(56),
    .C_WRITE_WIDTH_B(56),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_f5dda5f8f757e285.v when simulating
// the core, bmg_62_f5dda5f8f757e285. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_f5dda5f8f757e285(
  clka,
  ena,
  wea,
  addra,
  dina,
  douta,
  clkb,
  enb,
  web,
  addrb,
  dinb,
  doutb
);

input clka;
input ena;
input [0 : 0] wea;
input [9 : 0] addra;
input [17 : 0] dina;
output [17 : 0] douta;
input clkb;
input enb;
input [0 : 0] web;
input [9 : 0] addrb;
input [17 : 0] dinb;
output [17 : 0] doutb;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(10),
    .C_ADDRB_WIDTH(10),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(1),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(1),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(1),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_f5dda5f8f757e285.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(2),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(1024),
    .C_READ_DEPTH_B(1024),
    .C_READ_WIDTH_A(18),
    .C_READ_WIDTH_B(18),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(1024),
    .C_WRITE_DEPTH_B(1024),
    .C_WRITE_MODE_A("NO_CHANGE"),
    .C_WRITE_MODE_B("NO_CHANGE"),
    .C_WRITE_WIDTH_A(18),
    .C_WRITE_WIDTH_B(18),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .WEA(wea),
    .ADDRA(addra),
    .DINA(dina),
    .DOUTA(douta),
    .CLKB(clkb),
    .ENB(enb),
    .WEB(web),
    .ADDRB(addrb),
    .DINB(dinb),
    .DOUTB(doutb),
    .RSTA(),
    .REGCEA(),
    .RSTB(),
    .REGCEB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file bmg_62_fa58db69dab254f0.v when simulating
// the core, bmg_62_fa58db69dab254f0. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module bmg_62_fa58db69dab254f0(
  clka,
  ena,
  addra,
  douta
);

input clka;
input ena;
input [8 : 0] addra;
output [43 : 0] douta;

// synthesis translate_off

  BLK_MEM_GEN_V6_2 #(
    .C_ADDRA_WIDTH(9),
    .C_ADDRB_WIDTH(9),
    .C_ALGORITHM(1),
    .C_AXI_ID_WIDTH(4),
    .C_AXI_SLAVE_TYPE(0),
    .C_AXI_TYPE(1),
    .C_BYTE_SIZE(9),
    .C_COMMON_CLK(0),
    .C_DEFAULT_DATA("0"),
    .C_DISABLE_WARN_BHV_COLL(0),
    .C_DISABLE_WARN_BHV_RANGE(0),
    .C_FAMILY("virtex6"),
    .C_HAS_AXI_ID(0),
    .C_HAS_ENA(1),
    .C_HAS_ENB(0),
    .C_HAS_INJECTERR(0),
    .C_HAS_MEM_OUTPUT_REGS_A(1),
    .C_HAS_MEM_OUTPUT_REGS_B(0),
    .C_HAS_MUX_OUTPUT_REGS_A(0),
    .C_HAS_MUX_OUTPUT_REGS_B(0),
    .C_HAS_REGCEA(0),
    .C_HAS_REGCEB(0),
    .C_HAS_RSTA(0),
    .C_HAS_RSTB(0),
    .C_HAS_SOFTECC_INPUT_REGS_A(0),
    .C_HAS_SOFTECC_OUTPUT_REGS_B(0),
    .C_INIT_FILE_NAME("bmg_62_fa58db69dab254f0.mif"),
    .C_INITA_VAL("0"),
    .C_INITB_VAL("0"),
    .C_INTERFACE_TYPE(0),
    .C_LOAD_INIT_FILE(1),
    .C_MEM_TYPE(3),
    .C_MUX_PIPELINE_STAGES(0),
    .C_PRIM_TYPE(1),
    .C_READ_DEPTH_A(512),
    .C_READ_DEPTH_B(512),
    .C_READ_WIDTH_A(44),
    .C_READ_WIDTH_B(44),
    .C_RST_PRIORITY_A("CE"),
    .C_RST_PRIORITY_B("CE"),
    .C_RST_TYPE("SYNC"),
    .C_RSTRAM_A(0),
    .C_RSTRAM_B(0),
    .C_SIM_COLLISION_CHECK("ALL"),
    .C_USE_BYTE_WEA(0),
    .C_USE_BYTE_WEB(0),
    .C_USE_DEFAULT_DATA(0),
    .C_USE_ECC(0),
    .C_USE_SOFTECC(0),
    .C_WEA_WIDTH(1),
    .C_WEB_WIDTH(1),
    .C_WRITE_DEPTH_A(512),
    .C_WRITE_DEPTH_B(512),
    .C_WRITE_MODE_A("WRITE_FIRST"),
    .C_WRITE_MODE_B("WRITE_FIRST"),
    .C_WRITE_WIDTH_A(44),
    .C_WRITE_WIDTH_B(44),
    .C_XDEVICEFAMILY("virtex6")
  )
  inst (
    .CLKA(clka),
    .ENA(ena),
    .ADDRA(addra),
    .DOUTA(douta),
    .RSTA(),
    .REGCEA(),
    .WEA(),
    .DINA(),
    .CLKB(),
    .RSTB(),
    .ENB(),
    .REGCEB(),
    .WEB(),
    .ADDRB(),
    .DINB(),
    .DOUTB(),
    .INJECTSBITERR(),
    .INJECTDBITERR(),
    .SBITERR(),
    .DBITERR(),
    .RDADDRECC(),
    .S_ACLK(),
    .S_ARESETN(),
    .S_AXI_AWID(),
    .S_AXI_AWADDR(),
    .S_AXI_AWLEN(),
    .S_AXI_AWSIZE(),
    .S_AXI_AWBURST(),
    .S_AXI_AWVALID(),
    .S_AXI_AWREADY(),
    .S_AXI_WDATA(),
    .S_AXI_WSTRB(),
    .S_AXI_WLAST(),
    .S_AXI_WVALID(),
    .S_AXI_WREADY(),
    .S_AXI_BID(),
    .S_AXI_BRESP(),
    .S_AXI_BVALID(),
    .S_AXI_BREADY(),
    .S_AXI_ARID(),
    .S_AXI_ARADDR(),
    .S_AXI_ARLEN(),
    .S_AXI_ARSIZE(),
    .S_AXI_ARBURST(),
    .S_AXI_ARVALID(),
    .S_AXI_ARREADY(),
    .S_AXI_RID(),
    .S_AXI_RDATA(),
    .S_AXI_RRESP(),
    .S_AXI_RLAST(),
    .S_AXI_RVALID(),
    .S_AXI_RREADY(),
    .S_AXI_INJECTSBITERR(),
    .S_AXI_INJECTDBITERR(),
    .S_AXI_SBITERR(),
    .S_AXI_DBITERR(),
    .S_AXI_RDADDRECC()
  );

// synthesis translate_on

endmodule
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: cntr_11_0_096c03c2da659b51.v
// /___/   /\     Timestamp: Mon Oct 17 14:38:10 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_096c03c2da659b51.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_096c03c2da659b51.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_096c03c2da659b51.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_096c03c2da659b51.v
// # of Modules	: 1
// Design Name	: cntr_11_0_096c03c2da659b51
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module cntr_11_0_096c03c2da659b51 (
  clk, ce, sinit, q
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input sinit;
  output [1 : 0] q;
  
  // synthesis translate_off
  
  wire N0;
  wire N1;
  wire [2 : 1] \NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [1 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s ;
  wire [0 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  wire [0 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  assign
    q[1] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    q[0] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  GND   XST_GND (
    .G(N1)
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [1]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [0]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  XORCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [1])
  );
  XORCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [0])
  );
  MUXCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(N0),
    .S(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  INV 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1_INV_0  (
    .I
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: cntr_11_0_2801b0cdb1a0a2a6.v
// /___/   /\     Timestamp: Mon Oct 17 14:38:50 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_2801b0cdb1a0a2a6.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_2801b0cdb1a0a2a6.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_2801b0cdb1a0a2a6.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_2801b0cdb1a0a2a6.v
// # of Modules	: 1
// Design Name	: cntr_11_0_2801b0cdb1a0a2a6
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module cntr_11_0_2801b0cdb1a0a2a6 (
  clk, ce, sinit, q
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input sinit;
  output [3 : 0] q;
  
  // synthesis translate_off
  
  wire N0;
  wire N1;
  wire \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux_rt_17 ;
  wire \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_18 ;
  wire [4 : 1] \NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [3 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple ;
  wire [2 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  wire [0 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  assign
    q[3] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4],
    q[2] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    q[1] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    q[0] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  GND   XST_GND (
    .G(N1)
  );
  XORCY 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carryxor  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux_rt_17 )
,
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2])
  );
  MUXCY 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .DI(N1),
    .S
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux_rt_17 )
,
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2])
  );
  XORCY 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_18 )
,
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1])
  );
  MUXCY 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(N1),
    .S
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_18 )
,
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  XORCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [2]),
    .LI
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3])
  );
  XORCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0])
  );
  MUXCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(N0),
    .S(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [0]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [1]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [2]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_4  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/sum_simple [3]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [4])
  );
  LUT1 #(
    .INIT ( 2'h2 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux_rt  (
    .I0
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3]),
    .O
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[2].carrymux_rt_17 )

  );
  LUT1 #(
    .INIT ( 2'h2 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt  (
    .I0
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2]),
    .O
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_18 )

  );
  INV 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1_INV_0  (
    .I
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version: O.61xd
//  \   \         Application: netgen
//  /   /         Filename: cntr_11_0_63de6612768d060a.v
// /___/   /\     Timestamp: Mon Oct 17 14:39:31 2011
// \   \  /  \ 
//  \___\/\___\
//             
// Command	: -w -sim -ofmt verilog C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_63de6612768d060a.ngc C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_63de6612768d060a.v 
// Device	: 6vcx75tff484-2
// Input file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_63de6612768d060a.ngc
// Output file	: C:/Users/LaurenGao/AppData/Local/Temp/sysgentmp-LaurenGao/cg_wk/c44d03e58cc8e31e7/tmp/_cg/cntr_11_0_63de6612768d060a.v
// # of Modules	: 1
// Design Name	: cntr_11_0_63de6612768d060a
// Xilinx        : g:\xilinx\13.2\ise_ds\ise\
//             
// Purpose:    
//     This verilog netlist is a verification model and uses simulation 
//     primitives which may not represent the true implementation of the 
//     device, however the netlist is functionally correct and should not 
//     be modified. This file cannot be synthesized and should only be used 
//     with supported simulation tools.
//             
// Reference:  
//     Command Line Tools User Guide, Chapter 23 and Synthesis and Simulation Design Guide, Chapter 6
//             
////////////////////////////////////////////////////////////////////////////////

`timescale 1 ns/1 ps

module cntr_11_0_63de6612768d060a (
  clk, ce, sinit, q
)/* synthesis syn_black_box syn_noprune=1 */;
  input clk;
  input ce;
  input sinit;
  output [2 : 0] q;
  
  // synthesis translate_off
  
  wire N0;
  wire N1;
  wire \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_14 ;
  wire [3 : 1] \NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output ;
  wire [2 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s ;
  wire [1 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple ;
  wire [0 : 0] \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum ;
  assign
    q[2] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3],
    q[1] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2],
    q[0] = 
\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1];
  VCC   XST_VCC (
    .P(N0)
  );
  GND   XST_GND (
    .G(N1)
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_3  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [2]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_2  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [1]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2])
  );
  FDRE #(
    .INIT ( 1'b0 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output_1  (
    .C(clk),
    .CE(ce),
    .D(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [0]),
    .R(sinit),
    .Q
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1])
  );
  XORCY 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carryxor  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .LI
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_14 )
,
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [1])
  );
  MUXCY 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0]),
    .DI(N1),
    .S
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_14 )
,
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1])
  );
  XORCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carryxortop  (
    .CI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [1]),
    .LI
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [3]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [2])
  );
  XORCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carryxor0  (
    .CI(N1),
    .LI(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/s [0])
  );
  MUXCY   \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.carrymux0  (
    .CI(N1),
    .DI(N0),
    .S(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/carry_simple [0])
  );
  LUT1 #(
    .INIT ( 2'h2 ))
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt  (
    .I0
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [2]),
    .O
(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.i_gt_1.carrychaingen[1].carrymux_rt_14 )

  );
  INV 
  \U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/Mxor_i_simple_model.halfsum_0_xo<0>1_INV_0  (
    .I
(\NlwRenamedSig_OI_U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_q.i_simple.qreg/fd/output [1]),
    .O(\U0/i_synth/i_baseblox.i_baseblox_counter/the_addsub/no_pipelining.the_addsub/i_lut6.i_lut6_addsub/i_simple_model.halfsum [0])
  );

// synthesis translate_on

endmodule

// synthesis translate_off

`ifndef GLBL
`define GLBL

`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;

    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule

`endif

// synthesis translate_on
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_2378f8cddaf130ec.v when simulating
// the core, dmg_62_2378f8cddaf130ec. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_2378f8cddaf130ec(
  a,
  clk,
  qspo_ce,
  qspo
);

input [6 : 0] a;
input clk;
input qspo_ce;
output [11 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(7),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(128),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_2378f8cddaf130ec.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(12)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_80d2b3237a1e3d03.v when simulating
// the core, dmg_62_80d2b3237a1e3d03. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_80d2b3237a1e3d03(
  a,
  clk,
  qspo_ce,
  qspo
);

input [6 : 0] a;
input clk;
input qspo_ce;
output [28 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(7),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(128),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_80d2b3237a1e3d03.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(29)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_8c0172ee1e6fc864.v when simulating
// the core, dmg_62_8c0172ee1e6fc864. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_8c0172ee1e6fc864(
  a,
  clk,
  qspo_ce,
  qspo
);

input [3 : 0] a;
input clk;
input qspo_ce;
output [2 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(4),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(16),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_8c0172ee1e6fc864.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(3)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_c1f17fd5734c4bf2.v when simulating
// the core, dmg_62_c1f17fd5734c4bf2. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_c1f17fd5734c4bf2(
  a,
  clk,
  qspo_ce,
  qspo
);

input [5 : 0] a;
input clk;
input qspo_ce;
output [11 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(6),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(64),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_c1f17fd5734c4bf2.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(12)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_c25ab22a2e12a0dd.v when simulating
// the core, dmg_62_c25ab22a2e12a0dd. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_c25ab22a2e12a0dd(
  a,
  clk,
  qspo_ce,
  qspo
);

input [3 : 0] a;
input clk;
input qspo_ce;
output [3 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(4),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(16),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_c25ab22a2e12a0dd.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(4)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_d87244d006cee310.v when simulating
// the core, dmg_62_d87244d006cee310. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_d87244d006cee310(
  a,
  clk,
  qspo_ce,
  qspo
);

input [6 : 0] a;
input clk;
input qspo_ce;
output [24 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(7),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(128),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_d87244d006cee310.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(25)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_dd72e39ad62faa37.v when simulating
// the core, dmg_62_dd72e39ad62faa37. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_dd72e39ad62faa37(
  a,
  clk,
  qspo_ce,
  qspo
);

input [6 : 0] a;
input clk;
input qspo_ce;
output [16 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(7),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(128),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_dd72e39ad62faa37.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(17)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_e299ff50184bf038.v when simulating
// the core, dmg_62_e299ff50184bf038. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_e299ff50184bf038(
  a,
  d,
  dpra,
  clk,
  we,
  spo,
  dpo
);

input [3 : 0] a;
input [31 : 0] d;
input [3 : 0] dpra;
input clk;
input we;
output [31 : 0] spo;
output [31 : 0] dpo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(4),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(16),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(1),
    .C_HAS_DPO(1),
    .C_HAS_DPRA(1),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(0),
    .C_HAS_QSPO_CE(0),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(1),
    .C_HAS_SPRA(0),
    .C_HAS_WE(1),
    .C_MEM_INIT_FILE("dmg_62_e299ff50184bf038.mif"),
    .C_MEM_TYPE(2),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(32)
  )
  inst (
    .A(a),
    .D(d),
    .DPRA(dpra),
    .CLK(clk),
    .WE(we),
    .SPO(spo),
    .DPO(dpo),
    .SPRA(),
    .I_CE(),
    .QSPO_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .QSPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_ee59d5b88a2a13fb.v when simulating
// the core, dmg_62_ee59d5b88a2a13fb. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_ee59d5b88a2a13fb(
  a,
  clk,
  qspo_ce,
  qspo
);

input [6 : 0] a;
input clk;
input qspo_ce;
output [22 : 0] qspo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(7),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(128),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(0),
    .C_HAS_DPO(0),
    .C_HAS_DPRA(0),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(1),
    .C_HAS_QSPO_CE(1),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(0),
    .C_HAS_SPRA(0),
    .C_HAS_WE(0),
    .C_MEM_INIT_FILE("dmg_62_ee59d5b88a2a13fb.mif"),
    .C_MEM_TYPE(0),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(23)
  )
  inst (
    .A(a),
    .CLK(clk),
    .QSPO_CE(qspo_ce),
    .QSPO(qspo),
    .D(),
    .DPRA(),
    .SPRA(),
    .WE(),
    .I_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .SPO(),
    .DPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule
/*******************************************************************************
*     This file is owned and controlled by Xilinx and must be used solely      *
*     for design, simulation, implementation and creation of design files      *
*     limited to Xilinx devices or technologies. Use with non-Xilinx           *
*     devices or technologies is expressly prohibited and immediately          *
*     terminates your license.                                                 *
*                                                                              *
*     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY     *
*     FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY     *
*     PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE              *
*     IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS       *
*     MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY       *
*     CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY        *
*     RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY        *
*     DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE    *
*     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR           *
*     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF          *
*     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    *
*     PARTICULAR PURPOSE.                                                      *
*                                                                              *
*     Xilinx products are not intended for use in life support appliances,     *
*     devices, or systems.  Use in such applications are expressly             *
*     prohibited.                                                              *
*                                                                              *
*     (c) Copyright 1995-2011 Xilinx, Inc.                                     *
*     All rights reserved.                                                     *
*******************************************************************************/
// You must compile the wrapper file dmg_62_f0318986ab2917a2.v when simulating
// the core, dmg_62_f0318986ab2917a2. When compiling the wrapper file, be sure to
// reference the XilinxCoreLib Verilog simulation library. For detailed
// instructions, please refer to the "CORE Generator Help".

// The synthesis directives "translate_off/translate_on" specified below are
// supported by Xilinx, Mentor Graphics and Synplicity synthesis
// tools. Ensure they are correct for your synthesis tool(s).

`timescale 1ns/1ps

module dmg_62_f0318986ab2917a2(
  a,
  d,
  dpra,
  clk,
  we,
  spo,
  dpo
);

input [3 : 0] a;
input [31 : 0] d;
input [3 : 0] dpra;
input clk;
input we;
output [31 : 0] spo;
output [31 : 0] dpo;

// synthesis translate_off

  DIST_MEM_GEN_V6_2 #(
    .C_ADDR_WIDTH(4),
    .C_DEFAULT_DATA("0"),
    .C_DEPTH(16),
    .C_FAMILY("virtex6"),
    .C_HAS_CLK(1),
    .C_HAS_D(1),
    .C_HAS_DPO(1),
    .C_HAS_DPRA(1),
    .C_HAS_I_CE(0),
    .C_HAS_QDPO(0),
    .C_HAS_QDPO_CE(0),
    .C_HAS_QDPO_CLK(0),
    .C_HAS_QDPO_RST(0),
    .C_HAS_QDPO_SRST(0),
    .C_HAS_QSPO(0),
    .C_HAS_QSPO_CE(0),
    .C_HAS_QSPO_RST(0),
    .C_HAS_QSPO_SRST(0),
    .C_HAS_SPO(1),
    .C_HAS_SPRA(0),
    .C_HAS_WE(1),
    .C_MEM_INIT_FILE("dmg_62_f0318986ab2917a2.mif"),
    .C_MEM_TYPE(2),
    .C_PARSER_TYPE(1),
    .C_PIPELINE_STAGES(0),
    .C_QCE_JOINED(0),
    .C_QUALIFY_WE(0),
    .C_READ_MIF(1),
    .C_REG_A_D_INPUTS(0),
    .C_REG_DPRA_INPUT(0),
    .C_SYNC_ENABLE(1),
    .C_WIDTH(32)
  )
  inst (
    .A(a),
    .D(d),
    .DPRA(dpra),
    .CLK(clk),
    .WE(we),
    .SPO(spo),
    .DPO(dpo),
    .SPRA(),
    .I_CE(),
    .QSPO_CE(),
    .QDPO_CE(),
    .QDPO_CLK(),
    .QSPO_RST(),
    .QDPO_RST(),
    .QSPO_SRST(),
    .QDPO_SRST(),
    .QSPO(),
    .QDPO()
  );

// synthesis translate_on

endmodule

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
// synopsys translate_off
`ifndef simulating
  `define simulating 1
`endif
// synopsys translate_on
`ifndef simulating
  `define simulating 0
`endif
`ifndef xlUnsigned
 `define xlUnsigned 1
`endif
`ifndef xlSigned
 `define xlSigned 2
`endif
`ifndef xlWrap
 `define xlWrap 1
`endif
`ifndef xlSaturate
 `define xlSaturate 2
`endif
`ifndef xlTruncate
 `define xlTruncate 1
`endif
`ifndef xlRound
 `define xlRound 2
`endif
`ifndef xlRoundBanker
 `define xlRoundBanker 3
`endif
`ifndef xlAddMode
 `define xlAddMode 1
`endif
`ifndef xlSubMode
 `define xlSubMode 2
`endif

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
`timescale 1 ns / 10 ps
module srl17e (clk, ce, d, q);
    parameter width = 16;
    parameter latency = 8;
    input clk, ce;
    input [width-1:0] d;
    output [width-1:0] q;
    parameter signed [5:0] a = latency - 2;
    wire[width - 1:0] #0.2 d_delayed;
    wire[width - 1:0] srl16_out;
    genvar i;
    assign d_delayed = d ;
    generate
      for(i=0; i<width; i=i+1)
      begin:reg_array
            if (latency > 1)
                begin: has_2_latency
                 SRL16E u1 (.CLK(clk), .D(d_delayed[i]), .Q(srl16_out[i]), .CE(ce), .A0(a[0]), .A1(a[1]), .A2(a[2]), .A3(a[3]));
                end
            if (latency <= 1)
                begin: has_1_latency
                 assign srl16_out[i] = d_delayed[i];
                end
            if (latency != 0)
                begin: has_latency
                 FDE u2 (.C(clk), .D(srl16_out[i]), .Q(q[i]), .CE(ce));
                end
            if (latency == 0)
                begin:has_0_latency
                 assign q[i] = srl16_out[i];
                end
        end
    endgenerate
endmodule
module synth_reg (i, ce, clr, clk, o);
   parameter width  = 8;
   parameter latency  = 1;
   input[width - 1:0] i;
   input ce,clr,clk;
   output[width - 1:0] o;
   parameter complete_num_srl17es = latency/17;
   parameter remaining_latency = latency%17;
   parameter temp_num_srl17es = (latency/17) + ((latency%17)?1:0);
   parameter num_srl17es = temp_num_srl17es ? temp_num_srl17es : 1;
   wire [width - 1:0] z [0:num_srl17es-1];
   genvar t;
    generate
      if (latency <= 17)
          begin:has_only_1
              srl17e #(width, latency) srl17e_array0(.clk(clk), .ce(ce), .d(i), .q(o));
          end
     endgenerate
    generate
     if (latency > 17)
        begin:has_1
             assign o = z[num_srl17es-1];
             srl17e #(width, 17) srl17e_array0(.clk(clk), .ce(ce), .d(i), .q(z[0]));
        end
   endgenerate
   generate
      if (latency > 17)
          begin:more_than_1
              for (t=1; t < complete_num_srl17es; t=t+1)
                begin:left_complete_ones
                   srl17e #(width, 17) srl17e_array(.clk(clk), .ce(ce), .d(z[t-1]), .q(z[t]));
                end
          end
   endgenerate
   generate
     if ((remaining_latency > 0) && (latency>17))
          begin:remaining_ones
             srl17e #(width, (latency%17)) last_srl17e (.clk(clk), .ce(ce), .d(z[num_srl17es-2]), .q(z[num_srl17es-1]));
          end
   endgenerate
endmodule
module synth_reg_reg (i, ce, clr, clk, o);
   parameter width  = 8;
   parameter latency  = 1;
   input[width - 1:0] i;
   input ce, clr, clk;
   output[width - 1:0] o;
   wire[width - 1:0] o;
   genvar idx;
   reg[width - 1:0] reg_bank [latency:0];
   integer j;
   initial
     begin
        for (j=0; j < latency+1; j=j+1)
          begin
             reg_bank[j] = {width{1'b0}};
          end
     end

   generate
     if (latency == 0)
        begin:has_0_latency
         assign o = i;
       end
   endgenerate

   always @(i)
        begin
             reg_bank[0] = i;
         end
   generate
     if (latency > 0)
        begin:more_than_1
            assign o = reg_bank[latency];
         for (idx=0; idx < latency; idx=idx+1) begin:sync_loop
            always @(posedge clk)
                  begin
                  if (ce)
                    begin
                        reg_bank[idx+1] <= reg_bank[idx] ;
                    end
               end
        end
      end
   endgenerate
endmodule

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
`timescale 1 ns / 10 ps
module synth_reg_w_init (i, ce, clr, clk, o);
   parameter width  = 8;
   parameter init_index  = 0;
   parameter [width-1 : 0] init_value  = 'b0000;
   parameter latency  = 1;

   input[width - 1:0] i;
   input ce, clr, clk;
   output[width - 1:0] o;
   wire[(latency + 1) * width - 1:0] dly_i;
   wire #0.2 dly_clr;
   genvar index;

   generate
     if (latency == 0)
        begin:has_0_latency
         assign o = i;
        end
     else
        begin:has_latency
         assign dly_i[(latency + 1) * width - 1:latency * width] = i ;
         assign dly_clr = clr ;
         for (index=1; index<=latency; index=index+1)
           begin:fd_array
// synopsys translate_off
             defparam reg_comp_1.width = width;
             defparam reg_comp_1.init_index = init_index;
             defparam reg_comp_1.init_value = init_value;
// synopsys translate_on
             single_reg_w_init #(width, init_index, init_value)
               reg_comp_1(.clk(clk),
                          .i(dly_i[(index + 1)*width-1:index*width]),
                          .o(dly_i[index * width - 1:(index - 1) * width]),
                          .ce(ce),
                          .clr(dly_clr));
             end
        assign o = dly_i[width-1:0];
       end
   endgenerate
endmodule
module single_reg_w_init (i, ce, clr, clk, o);
   parameter width  = 8;
   parameter init_index  = 0;
   parameter [width-1 : 0] init_value  = 8'b00000000;
   input[width - 1:0] i;
   input ce;
   input clr;
   input clk;
   output[width - 1:0] o;
   parameter [0:0] init_index_val = (init_index ==  1) ? 1'b1 : 1'b0;
   parameter [width-1:0] result = (width > 1) ? { {(width-1){1'b0}}, init_index_val } : init_index_val;
   parameter [width-1:0] init_const = (init_index > 1) ? init_value : result;
   wire[width - 1:0] o;
   genvar index;

   generate
     for (index=0;index < width; index=index+1) begin:fd_prim_array
          if (init_const[index] == 0)
            begin:rst_comp
              FDRE fdre_comp(.C(clk),
                             .D(i[index]),
                             .Q(o[index]),
                             .CE(ce),
                             .R(clr));
            end
          else
            begin:set_comp
             FDSE fdse_comp(.C(clk),
                            .D(i[index]),
                            .Q(o[index]),
                            .CE(ce),
                            .S(clr));
            end
    end
   endgenerate
endmodule

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
`ifndef xlConvertType
 `define xlConvertType
 `timescale 1 ns / 10 ps
module cast (inp, res);
    parameter signed [31:0] old_width = 4;
    parameter signed [31:0] old_bin_pt = 1;
    parameter signed [31:0] new_width = 4;
    parameter signed [31:0] new_bin_pt = 1;
    parameter signed [31:0] new_arith = `xlSigned;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;

   parameter signed [31:0] right_of_dp = new_bin_pt - old_bin_pt;
    wire [new_width-1:0] result;
   genvar i;
   assign res = result;
   generate
      for (i = 0; i<new_width;  i = i+1)
        begin:cast_loop
           if ((i-right_of_dp) > old_width - 1)
             begin:u0
                if (new_arith == `xlUnsigned)
                  begin:u1
                     assign result[i] = 1'b0;
                  end
                if (new_arith == `xlSigned)
                  begin:u2
                     assign result[i] = inp[old_width-1];
                  end
             end
           else if ((i-right_of_dp) >= 0)
             begin:u3
                assign result[i] = inp[i-right_of_dp];
             end
           else
             begin:u4
                assign result[i] = 1'b0;
             end
        end
      endgenerate

endmodule
module pad_lsb (inp, res);
   parameter signed [31:0] orig_width = 4;
   parameter signed [31:0] new_width = 2;
   input [orig_width - 1 : 0] inp;
   output [new_width - 1 : 0] res;
   parameter signed [31:0] pad_pos = new_width - orig_width -1;
   wire [new_width-1:0] result;
   genvar i;
   assign  res = result;
   generate
      if (new_width >= orig_width)
        begin:u0
           assign result[new_width-1:new_width-orig_width] = inp[orig_width-1:0];
        end
   endgenerate

   generate
      if (pad_pos >= 0)
        begin:u1
           assign result[pad_pos:0] = {pad_pos{1'b0}};
        end
   endgenerate
endmodule
module zero_ext (inp, res);
   parameter signed [31:0]  old_width = 4;
   parameter signed [31:0]  new_width = 2;
   input [old_width - 1 : 0] inp;
   output [new_width - 1 : 0] res;
   wire [new_width-1:0] result;
   genvar i;
   assign res = result;
   generate
     if (new_width >= old_width)
       begin:u0
          assign result = { {(new_width-old_width){1'b0}}, inp};
       end
     else
       begin:u1
          assign result[new_width-1:0] = inp[new_width-1:0];
       end
    endgenerate
endmodule
module sign_ext (inp, res);
   parameter signed [31:0]  old_width = 4;
   parameter signed [31:0]  new_width = 2;
   input [old_width - 1 : 0] inp;
   output [new_width - 1 : 0] res;
   wire [new_width-1:0] result;
   assign res = result;
   generate
     if (new_width >= old_width)
       begin:u0
          assign result = { {(new_width-old_width){inp[old_width-1]}}, inp};
       end
     else
       begin:u1
          assign result[new_width-1:0] = inp[new_width-1:0];
       end
   endgenerate

endmodule
module extend_msb (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_arith = `xlSigned;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;
    wire [new_width-1:0] result;
   assign res = result;
   generate
      if (new_arith ==`xlUnsigned)
        begin:u0
           zero_ext # (old_width, new_width)
             em_zero_ext (.inp(inp), .res(result));
        end
      else
        begin:u1
           sign_ext # (old_width, new_width)
             em_sign_ext (.inp(inp), .res(result));
        end
    endgenerate
endmodule
module align_input (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  delta = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;
    parameter signed [31:0]  abs_delta = (delta >= 0) ? (delta) : (-delta);
    wire [new_width-1:0] result;
    wire [(old_width+abs_delta)-1:0] padded_inp;
   assign res = result;
   generate
      if (delta > 0)
        begin:u0
           pad_lsb # (old_width, old_width+delta)
             ai_pad_lsb (.inp(inp), .res(padded_inp));
           extend_msb # (old_width+delta, new_width, new_arith)
             ai_extend_msb (.inp(padded_inp), .res(result));
        end
      else
        begin:u1
           extend_msb # (old_width, new_width, new_arith)
             ai_extend_msb (.inp(inp), .res(result));
        end
   endgenerate
endmodule
module round_towards_inf (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  old_bin_pt = 2;
    parameter signed [31:0]  old_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_bin_pt = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;

   parameter signed [31:0]  right_of_dp = old_bin_pt - new_bin_pt;
   parameter signed [31:0]  abs_right_of_dp = (new_bin_pt > old_bin_pt) ? (new_bin_pt-old_bin_pt) : (old_bin_pt - new_bin_pt);
   parameter signed [31:0]  right_of_dp_2 = (right_of_dp >=2) ? right_of_dp-2 : 0;
   parameter signed [31:0]  right_of_dp_1 = (right_of_dp >=1) ? right_of_dp-1 : 0;
   reg [new_width-1:0] one_or_zero;
   wire [new_width-1:0] truncated_val;
   wire signed [new_width-1:0] result_signed;
   wire [abs_right_of_dp+old_width-1 : 0] padded_val;
   initial
     begin
        one_or_zero = {new_width{1'b0}};
     end
   generate
      if (right_of_dp >= 0)
        begin:u0
           if (new_arith ==`xlUnsigned)
             begin:u1
                zero_ext # (old_width-right_of_dp, new_width)
                  rti_zero_ext (.inp(inp[old_width-1:right_of_dp]), .res(truncated_val));
             end
           else
             begin:u2
                sign_ext # (old_width-right_of_dp, new_width)
                  rti_sign_ext (.inp(inp[old_width-1:right_of_dp]), .res(truncated_val));
             end
        end
      else
        begin:u3
           pad_lsb # (old_width, abs_right_of_dp+old_width)
             rti_pad_lsb (.inp(inp), .res(padded_val));
           if (new_arith ==`xlUnsigned)
             begin:u4
                zero_ext # (abs_right_of_dp+old_width, new_width)
                  rti_zero_ext1 (.inp(padded_val), .res(truncated_val));
             end
           else
             begin:u5
                sign_ext # (abs_right_of_dp+old_width, new_width)
                  rti_sign_ext1 (.inp(padded_val), .res(truncated_val));
             end
        end
   endgenerate
   generate
      if (new_arith == `xlSigned)
        begin:u6
           always @(inp)
             begin
                one_or_zero = {new_width{1'b0}};
               if (inp[old_width-1] == 1'b0)
                 begin
                    one_or_zero[0] = 1'b1;
                 end
               if ((right_of_dp >=2) && (right_of_dp <= old_width))
                 begin
                    if(|inp[right_of_dp_2:0] == 1'b1)
                       begin
                          one_or_zero[0] = 1'b1;
                       end
                 end
               if ((right_of_dp >=1) && (right_of_dp <= old_width))
                 begin
                    if(inp[right_of_dp_1] == 1'b0)
                      begin
                         one_or_zero[0] = 1'b0;
                      end
                 end
               else
                 begin
                    one_or_zero[0] = 1'b0;
                 end
             end
             assign result_signed = truncated_val + one_or_zero;
             assign res = result_signed;
        end

      else
        begin:u7
           always @(inp)
             begin
                one_or_zero = {new_width{1'b0}};
               if ((right_of_dp >=1) && (right_of_dp <= old_width))
                 begin
                    one_or_zero[0] = inp[right_of_dp_1];
                 end
             end
             assign res = truncated_val + one_or_zero;
        end
   endgenerate

endmodule
module round_towards_even (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  old_bin_pt = 2;
    parameter signed [31:0]  old_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_bin_pt = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;
   parameter signed [31:0]  right_of_dp = old_bin_pt - new_bin_pt;
   parameter signed [31:0]  abs_right_of_dp = (new_bin_pt > old_bin_pt) ? (new_bin_pt-old_bin_pt) : (old_bin_pt - new_bin_pt);
   parameter signed [31:0]  expected_new_width = old_width - right_of_dp + 1;
   reg [new_width-1:0] one_or_zero;
   wire signed [new_width-1:0] result_signed;
   wire [new_width-1:0] truncated_val;
   wire [abs_right_of_dp+old_width-1 : 0] padded_val;
   initial
     begin
      one_or_zero = { new_width{1'b0}};
     end

   generate
      if (right_of_dp >= 0)
        begin:u0
           if (new_arith == `xlUnsigned)
             begin:u1
                zero_ext # (old_width-right_of_dp, new_width)
                            rte_zero_ext (.inp(inp[old_width-1:right_of_dp]), .res(truncated_val));
             end
           else
             begin:u2
                sign_ext # (old_width-right_of_dp, new_width)
                            rte_sign_ext (.inp(inp[old_width-1:right_of_dp]), .res(truncated_val));
             end
        end

      else
        begin:u3
           pad_lsb # (old_width, abs_right_of_dp+old_width)
                            rte_pad_lsb (.inp(inp), .res(padded_val));
           if (new_arith == `xlUnsigned)
             begin:u4
                zero_ext # (abs_right_of_dp+old_width, new_width)
                            rte_zero_ext1 (.inp(padded_val), .res(truncated_val));
             end
           else
             begin:u5
                sign_ext # (abs_right_of_dp+old_width, new_width)
                            rte_sign_ext1 (.inp(padded_val), .res(truncated_val));
             end
        end
   endgenerate

   generate
      if ((right_of_dp ==1) && (right_of_dp <= old_width))
        begin:u6a
           always @(inp)
             begin
                one_or_zero = { new_width{1'b0}};
                if(inp[right_of_dp-1] == 1'b1)
                  begin
                     one_or_zero[0] = inp[right_of_dp];
                  end
                else
                  begin
                     one_or_zero[0] = inp[right_of_dp-1];
                  end
             end
       end
      else if ((right_of_dp >=2) && (right_of_dp <= old_width))
        begin:u6b
           always @(inp)
             begin
                one_or_zero = { new_width{1'b0}};
                if( (inp[right_of_dp-1] == 'b1) && !(|inp[right_of_dp-2:0]) )
                  begin
                     one_or_zero[0] = inp[right_of_dp];
                  end
                else
                  begin
                     one_or_zero[0] = inp[right_of_dp-1];
                  end
             end
       end
      else
        begin:u7
            always @(inp)
             begin
                one_or_zero = { new_width{1'b0}};
             end
        end
   endgenerate

   generate
      if (new_arith == `xlSigned)
        begin:u8
           assign result_signed = truncated_val + one_or_zero;
           assign res = result_signed;
        end
      else
        begin:u9
           assign res = truncated_val + one_or_zero;
        end
   endgenerate

endmodule
module trunc (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  old_bin_pt = 2;
    parameter signed [31:0]  old_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_bin_pt = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;

   parameter signed [31:0]  right_of_dp = old_bin_pt - new_bin_pt;
   parameter signed [31:0]  abs_right_of_dp = (new_bin_pt > old_bin_pt) ? (new_bin_pt-old_bin_pt) : (old_bin_pt - new_bin_pt);
   wire [new_width-1:0] result;
   wire [abs_right_of_dp+old_width-1 : 0] padded_val;
   assign res = result;
   generate
      if (new_bin_pt > old_bin_pt)
        begin:tr_u2
           pad_lsb # (old_width, abs_right_of_dp+old_width)
             tr_pad_lsb (.inp(inp), .res(padded_val));
           extend_msb # (old_width+abs_right_of_dp, new_width, new_arith)
             tr_extend_msb (.inp(padded_val), .res(result));
        end
      else
        begin:tr_u1
           extend_msb # (old_width-right_of_dp, new_width, new_arith)
             tr_extend_msb (.inp(inp[old_width-1:right_of_dp]), .res(result));
        end
   endgenerate

endmodule
module saturation_arith (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  old_bin_pt = 2;
    parameter signed [31:0]  old_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_bin_pt = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;
   parameter signed [31:0]  abs_right_of_dp = (new_bin_pt > old_bin_pt) ? (new_bin_pt-old_bin_pt) : (old_bin_pt - new_bin_pt);
   parameter signed [31:0]  abs_width = (new_width > old_width) ? (new_width-old_width) : 1;
   parameter signed [31:0]  abs_new_width = (old_width > new_width) ? new_width : 1;
   reg overflow;
   reg [old_width-1:0] vec;
   reg [new_width-1:0] result;
   assign res = result;
   generate
      if (old_width > new_width)
        begin:sa_u0
           always @ (inp)
             begin
                vec = inp;
                overflow = 1;
                if ( (old_arith == `xlSigned) && (new_arith == `xlSigned) )
                  begin
                    if (~|inp[old_width-1:abs_new_width-1] || &inp[old_width-1:abs_new_width-1])
                     begin
                       overflow = 0;
                     end
                 end

                if ( (old_arith == `xlSigned) && (new_arith == `xlUnsigned))
                   begin
                    if (~|inp[old_width-1 : abs_new_width])
                    begin
                       overflow = 0;
                    end
                end

                if ((old_arith == `xlUnsigned) &&  (new_arith == `xlUnsigned))
                  begin
                    if (~|inp[old_width-1 : abs_new_width])
                     begin
                       overflow = 0;
                     end
                  end

               if ( (old_arith == `xlUnsigned) && (new_arith == `xlSigned))
                 begin
                  if (~|inp[old_width-1:abs_new_width-1] || &inp[old_width-1:abs_new_width-1])
                    begin
                      overflow = 0;
                    end
                 end
               if (overflow == 1)
                 begin
                   if (new_arith == `xlSigned)
                     begin
                       if (inp[old_width-1] == 'b0)
                         begin
                           result = (new_width ==1) ? 1'b0 : {1'b0, {(new_width-1){1'b1}} };
                         end
                      else
                        begin
                          result = (new_width ==1) ? 1'b1 : {1'b1, {(new_width-1){1'b0}} };
                       end
                     end
                   else
                     begin
                       if ((old_arith == `xlSigned) && (inp[old_width-1] == 'b1))
                         begin
                           result = {new_width{1'b0}};
                         end
                       else
                         begin
                           result = {new_width{1'b1}};
                         end
                     end
                 end
               else
                 begin
                    if ( (old_arith == `xlSigned) && (new_arith == `xlUnsigned) && (inp[old_width-1] == 'b1) )
                    begin
                      vec = {old_width{1'b0}};
                    end
                    result = vec[new_width-1:0];
                 end
             end
        end
   endgenerate
   generate
      if (new_width > old_width)
        begin:sa_u1
         always @ (inp)
           begin
            vec = inp;
            if ( (old_arith == `xlSigned) && (new_arith == `xlUnsigned) && (inp[old_width-1] == 1'b1) )
              begin
                vec = {old_width{1'b0}};
              end
              if (new_arith == `xlUnsigned)
                begin
                  result = { {abs_width{1'b0}}, vec};
                end
              else
                begin
                  result = { {abs_width{inp[old_width-1]}}, vec};
                end
           end
       end
   endgenerate

   generate
      if (new_width == old_width)
        begin:sa_u2
         always @ (inp)
           begin
             if ( (old_arith == `xlSigned) && (new_arith == `xlUnsigned) && (inp[old_width-1] == 'b1) )
               begin
                 result = {old_width{1'b0}};
               end
             else
               begin
                 result = inp;
               end
           end
        end
   endgenerate

endmodule
module wrap_arith (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  old_bin_pt = 2;
    parameter signed [31:0]  old_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_bin_pt = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    parameter signed [31:0]  result_arith = ((old_arith==`xlSigned)&&(new_arith==`xlUnsigned))? `xlSigned : new_arith;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;
   wire [new_width-1:0] result;
   cast # (old_width, old_bin_pt, new_width, new_bin_pt, result_arith)
     wrap_cast (.inp(inp), .res(result));
   assign res = result;

endmodule
module convert_type (inp, res);
    parameter signed [31:0]  old_width = 4;
    parameter signed [31:0]  old_bin_pt = 2;
    parameter signed [31:0]  old_arith = `xlSigned;
    parameter signed [31:0]  new_width = 4;
    parameter signed [31:0]  new_bin_pt = 1;
    parameter signed [31:0]  new_arith = `xlSigned;
    parameter signed [31:0]  quantization = `xlTruncate;
    parameter signed [31:0]  overflow = `xlWrap;
    input [old_width - 1 : 0] inp;
    output [new_width - 1 : 0] res;

   parameter signed [31:0]  fp_width = old_width + 2;
   parameter signed [31:0]  fp_bin_pt = old_bin_pt;
   parameter signed [31:0]  fp_arith = old_arith;
   parameter signed [31:0]  q_width = fp_width + new_bin_pt - old_bin_pt;
   parameter signed [31:0]  q_bin_pt = new_bin_pt;
   parameter signed [31:0]  q_arith = old_arith;
   wire [fp_width-1:0] full_precision_result;
   wire [new_width-1:0] result;
   wire [q_width-1:0] quantized_result;
   assign res = result;
   cast # (old_width, old_bin_pt, fp_width, fp_bin_pt, fp_arith)
     fp_cast (.inp(inp), .res(full_precision_result));
   generate
      if (quantization == `xlRound)
        begin:ct_u0
           round_towards_inf # (fp_width, fp_bin_pt, fp_arith, q_width, q_bin_pt, q_arith)
             quant_rtf (.inp(full_precision_result), .res(quantized_result));
        end
   endgenerate

   generate
      if (quantization == `xlRoundBanker)
        begin:ct_u1
           round_towards_even # (fp_width, fp_bin_pt, fp_arith, q_width, q_bin_pt, q_arith)
             quant_rte (.inp(full_precision_result), .res(quantized_result));
        end
   endgenerate

   generate
      if (quantization == `xlTruncate)
        begin:ct_u2
           trunc # (fp_width, fp_bin_pt, fp_arith, q_width, q_bin_pt, q_arith)
             quant_tr (.inp(full_precision_result), .res(quantized_result));
        end
   endgenerate

   generate
      if (overflow == `xlSaturate)
        begin:ct_u3
           saturation_arith # (q_width, q_bin_pt, q_arith, new_width, new_bin_pt, new_arith)
            ovflo_sat (.inp(quantized_result), .res(result));
        end
   endgenerate

   generate
      if ((overflow == `xlWrap) || (overflow == 3))
        begin:ct_u4
           wrap_arith # (q_width, q_bin_pt, q_arith, new_width, new_bin_pt, new_arith)
             ovflo_wrap (.inp(quantized_result), .res(result));
        end
   endgenerate

endmodule
`endif

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xladdsub (a, b, c_in, ce, clr, clk, rst, en, c_out, s);
parameter core_name0= "";
parameter a_width= 16;
parameter signed a_bin_pt= 4;
parameter a_arith= `xlUnsigned;
parameter c_in_width= 16;
parameter c_in_bin_pt= 4;
parameter c_in_arith= `xlUnsigned;
parameter c_out_width= 16;
parameter c_out_bin_pt= 4;
parameter c_out_arith= `xlUnsigned;
parameter b_width= 8;
parameter signed b_bin_pt= 2;
parameter b_arith= `xlUnsigned;
parameter s_width= 17;
parameter s_bin_pt= 4;
parameter s_arith= `xlUnsigned;
parameter rst_width= 1;
parameter rst_bin_pt= 0;
parameter rst_arith= `xlUnsigned;
parameter en_width= 1;
parameter en_bin_pt= 0;
parameter en_arith= `xlUnsigned;
parameter full_s_width= 17;
parameter full_s_arith= `xlUnsigned;
parameter mode= `xlAddMode;
parameter extra_registers= 0;
parameter latency= 0;
parameter quantization= `xlTruncate;
parameter overflow= `xlWrap;
parameter c_a_width= 16;
parameter c_b_width= 8;
parameter c_a_type= 1;
parameter c_b_type= 1;
parameter c_has_sclr= 0;
parameter c_has_ce= 0;
parameter c_latency= 0;
parameter c_output_width= 17;
parameter c_enable_rlocs= 1;
parameter c_has_c_in= 0;
parameter c_has_c_out= 0;
input [a_width-1:0] a;
input [b_width-1:0] b;
input c_in, ce, clr, clk, rst, en;
output c_out;
output [s_width-1:0] s;
parameter full_a_width = full_s_width;
parameter full_b_width = full_s_width;
parameter full_s_bin_pt = (a_bin_pt > b_bin_pt) ? a_bin_pt : b_bin_pt;
wire [full_a_width-1:0] full_a;
wire [full_b_width-1:0] full_b;
wire [full_s_width-1:0] full_s;
wire [full_s_width-1:0] core_s;
wire [s_width-1:0] conv_s;
wire  temp_cout;
wire  real_a,real_b,real_s;
wire  internal_clr;
wire  internal_ce;
wire  extra_reg_ce;
wire  override;
wire  logic1;
wire  temp_cin;
assign internal_clr = (clr | rst) & ce;
assign internal_ce = ce & en;
assign logic1 = 1'b1;
assign temp_cin = (c_has_c_in) ? c_in : 1'b0;
align_input # (a_width, b_bin_pt - a_bin_pt, a_arith, full_a_width)
align_inp_a(.inp(a),.res(full_a));
align_input # (b_width, a_bin_pt - b_bin_pt, b_arith, full_b_width)
align_inp_b(.inp(b),.res(full_b));
convert_type # (full_s_width, full_s_bin_pt, full_s_arith, s_width,
                s_bin_pt, s_arith, quantization, overflow)
conv_typ_s(.inp(core_s),.res(conv_s));
generate
  if (core_name0 == "addsb_11_0_8b3d9400293568fa")
    begin:comp0
    addsb_11_0_8b3d9400293568fa core_instance0 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_b66a0112ed103095")
    begin:comp1
    addsb_11_0_b66a0112ed103095 core_instance1 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_21d479b4f0f8b36a")
    begin:comp2
    addsb_11_0_21d479b4f0f8b36a core_instance2 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_725cd2adfb370cbc")
    begin:comp3
    addsb_11_0_725cd2adfb370cbc core_instance3 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_e342234b3f808cc6")
    begin:comp4
    addsb_11_0_e342234b3f808cc6 core_instance4 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_e9a94c669f456a3b")
    begin:comp5
    addsb_11_0_e9a94c669f456a3b core_instance5 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_5cceab115d1c98ee")
    begin:comp6
    addsb_11_0_5cceab115d1c98ee core_instance6 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_a2c1ef62805d079c")
    begin:comp7
    addsb_11_0_a2c1ef62805d079c core_instance7 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_8825bda37560e614")
    begin:comp8
    addsb_11_0_8825bda37560e614 core_instance8 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_2435c8258456a785")
    begin:comp9
    addsb_11_0_2435c8258456a785 core_instance9 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_ee39a18b297c3780")
    begin:comp10
    addsb_11_0_ee39a18b297c3780 core_instance10 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_bc1be80aeb880952")
    begin:comp12
    addsb_11_0_bc1be80aeb880952 core_instance12 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_4450b28271eb3e37")
    begin:comp13
    addsb_11_0_4450b28271eb3e37 core_instance13 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_23630b5019bde586")
    begin:comp14
    addsb_11_0_23630b5019bde586 core_instance14 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_64bb7cb6774745cb")
    begin:comp17
    addsb_11_0_64bb7cb6774745cb core_instance17 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_5d46a0b9957ad856")
    begin:comp20
    addsb_11_0_5d46a0b9957ad856 core_instance20 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_ffdcda883ad34064")
    begin:comp21
    addsb_11_0_ffdcda883ad34064 core_instance21 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_7f55411a8f505b42")
    begin:comp24
    addsb_11_0_7f55411a8f505b42 core_instance24 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_75cae8bed5545ee9")
    begin:comp25
    addsb_11_0_75cae8bed5545ee9 core_instance25 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_7c7b2b2855006e6e")
    begin:comp26
    addsb_11_0_7c7b2b2855006e6e core_instance26 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_fa4e7b8a00f98f0c")
    begin:comp27
    addsb_11_0_fa4e7b8a00f98f0c core_instance27 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

  if (core_name0 == "addsb_11_0_e214da8cd737bc9c")
    begin:comp29
    addsb_11_0_e214da8cd737bc9c core_instance29 (
         .a(full_a),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

endgenerate
generate
  if (extra_registers > 0)
  begin:latency_test

    if (c_latency > 1)
    begin:override_test
      synth_reg # (1, c_latency)
        override_pipe (
          .i(logic1),
          .ce(internal_ce),
          .clr(internal_clr),
          .clk(clk),
          .o(override));
      assign extra_reg_ce = ce & en & override;
    end
    if ((c_latency == 0) || (c_latency == 1))
    begin:no_override
      assign extra_reg_ce = ce & en;
    end
    synth_reg # (s_width, extra_registers)
      extra_reg (
        .i(conv_s),
        .ce(extra_reg_ce),
        .clr(internal_clr),
        .clk(clk),
        .o(s));
    if (c_has_c_out == 1)
    begin:cout_test
      synth_reg # (1, extra_registers)
        c_out_extra_reg (
          .i(temp_cout),
          .ce(extra_reg_ce),
          .clr(internal_clr),
          .clk(clk),
          .o(c_out));
    end

  end
endgenerate
generate
  if ((latency == 0) || (extra_registers == 0))
  begin:latency_s
    assign s = conv_s;
  end
endgenerate
generate
  if (((latency == 0) || (extra_registers == 0)) &&
      (c_has_c_out == 1))
  begin:latency0
    assign c_out = temp_cout;
  end
endgenerate
generate
  if (c_has_c_out == 0)
  begin:tie_dangling_cout
    assign c_out = 0;
  end
endgenerate
endmodule

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xlconvert(din, clk, ce, clr, en, dout);
   parameter din_width= 16;
   parameter din_bin_pt= 4;
   parameter din_arith= `xlUnsigned;
   parameter dout_width= 8;
   parameter dout_bin_pt= 2;
   parameter dout_arith= `xlUnsigned;
   parameter en_width = 1;
   parameter en_bin_pt = 0;
   parameter en_arith = `xlUnsigned;
   parameter bool_conversion = 0;
   parameter latency = 0;
   parameter quantization= `xlTruncate;
   parameter overflow= `xlWrap;
   input [din_width-1:0] din;
   input clk, ce, clr;
   input [en_width-1:0] en;
   output [dout_width-1:0] dout;
   wire [dout_width-1:0]   result;
   wire internal_ce;
   assign internal_ce = ce & en[0];

generate
 if (bool_conversion == 1)
    begin:bool_converion_generate
       assign result = din;
    end
 else
    begin:std_conversion
       convert_type #(din_width,
                      din_bin_pt,
                      din_arith,
                              dout_width,
                      dout_bin_pt,
                      dout_arith,
                      quantization,
                      overflow)
        conv_udp (.inp(din), .res(result));
    end
endgenerate
generate
if (latency > 0)
     begin:latency_test
        synth_reg # (dout_width, latency)
          reg1 (
               .i(result),
               .ce(internal_ce),
               .clr(clr),
               .clk(clk),
               .o(dout));
     end
else
     begin:latency0
        assign dout = result;
     end
endgenerate
endmodule

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xldelay #(parameter width = -1, latency = -1, reg_retiming = 0)
  (input [width-1:0] d,
   input ce, clk, en,
   output [width-1:0] q);
generate
  if ((latency == 0) || (reg_retiming == 0))
  begin:srl_delay
    synth_reg # (width, latency)
      reg1 (
        .i(d),
        .ce(ce & en),
        .clr(1'b0),
        .clk(clk),
        .o(q));
  end

  if ((latency>=1) && (reg_retiming))
  begin:reg_delay
    synth_reg_reg # (width, latency)
      reg2 (
        .i(d),
        .ce(ce & en),
        .clr(1'b0),
        .clk(clk),
        .o(q));
  end
endgenerate
endmodule


module shift_3fa2663220 (
  input [(19 - 1):0] ip,
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] ip_1_23;
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000000;
  reg signed [(19 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 19'b0000000000000000000;
    end
  wire signed [(19 - 1):0] op_mem_46_20_front_din;
  wire signed [(19 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(19 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{2{ip_1_23[18]}}, ip_1_23[18:2]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_d13a4b790a (
  input [(32 - 1):0] ip,
  output [(32 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(32 - 1):0] ip_1_23;
  localparam signed [(32 - 1):0] const_value = 32'sb00000000000000000000000000000000;
  reg signed [(32 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 32'b00000000000000000000000000000000;
    end
  wire signed [(32 - 1):0] op_mem_46_20_front_din;
  wire signed [(32 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(32 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{2{ip_1_23[31]}}, ip_1_23[31:2]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_091db5281e (
  input [(19 - 1):0] ip,
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] ip_1_23;
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000000;
  reg signed [(19 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 19'b0000000000000000000;
    end
  wire signed [(19 - 1):0] op_mem_46_20_front_din;
  wire signed [(19 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(19 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{1{ip_1_23[18]}}, ip_1_23[18:1]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_6a42af8a02 (
  input [(22 - 1):0] ip,
  output [(22 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(22 - 1):0] ip_1_23;
  localparam signed [(22 - 1):0] const_value = 22'sb0000000000000000000000;
  reg signed [(22 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 22'b0000000000000000000000;
    end
  wire signed [(22 - 1):0] op_mem_46_20_front_din;
  wire signed [(22 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(25 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(22 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{3{ip_1_23[21]}}, ip_1_23[21:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[24]}}, cast_internal_ip_27_3_rsh[24:5]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_860703fe20 (
  input [(26 - 1):0] ip,
  output [(26 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(26 - 1):0] ip_1_23;
  localparam signed [(26 - 1):0] const_value = 26'sb00000000000000000000000000;
  reg signed [(26 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 26'b00000000000000000000000000;
    end
  wire signed [(26 - 1):0] op_mem_46_20_front_din;
  wire signed [(26 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(28 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(26 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[25]}}, ip_1_23[25:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[27]}}, cast_internal_ip_27_3_rsh[27:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_773079a115 (
  input [(22 - 1):0] ip,
  output [(22 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(22 - 1):0] ip_1_23;
  localparam signed [(22 - 1):0] const_value = 22'sb0000000000000000000000;
  reg signed [(22 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 22'b0000000000000000000000;
    end
  wire signed [(22 - 1):0] op_mem_46_20_front_din;
  wire signed [(22 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(22 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{1{ip_1_23[21]}}, ip_1_23[21:1]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_2b728df15b (
  input [(30 - 1):0] ip,
  output [(30 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(30 - 1):0] ip_1_23;
  localparam signed [(30 - 1):0] const_value = 30'sb000000000000000000000000000000;
  reg signed [(30 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 30'b000000000000000000000000000000;
    end
  wire signed [(30 - 1):0] op_mem_46_20_front_din;
  wire signed [(30 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(32 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(30 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[29]}}, ip_1_23[29:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[31]}}, cast_internal_ip_27_3_rsh[31:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module mux_1f6c522247 (
  input [(1 - 1):0] sel,
  input [(16 - 1):0] d0,
  input [(16 - 1):0] d1,
  output [(16 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire [(1 - 1):0] sel_1_20;
  wire [(16 - 1):0] d0_1_24;
  wire [(16 - 1):0] d1_1_27;
  localparam [(16 - 1):0] const_value = 16'b0000000000000000;
  reg [(16 - 1):0] pipe_16_22[0:(1 - 1)];
  initial
    begin
      pipe_16_22[0] = 16'b0000000000000000;
    end
  wire [(16 - 1):0] pipe_16_22_front_din;
  wire [(16 - 1):0] pipe_16_22_back;
  wire pipe_16_22_push_front_pop_back_en;
  reg [(16 - 1):0] unregy_join_6_1;
  assign sel_1_20 = sel;
  assign d0_1_24 = d0;
  assign d1_1_27 = d1;
  assign pipe_16_22_back = pipe_16_22[0];
  always @(posedge clk)
    begin:proc_pipe_16_22
      integer i;
      if (((ce == 1'b1) && (pipe_16_22_push_front_pop_back_en == 1'b1)))
        begin
          pipe_16_22[0] <= pipe_16_22_front_din;
        end
    end
  always @(d0_1_24 or d1_1_27 or sel_1_20)
    begin:proc_switch_6_1
      case (sel_1_20)
        1'b0 :
          begin
            unregy_join_6_1 = d0_1_24;
          end
        default:
          begin
            unregy_join_6_1 = d1_1_27;
          end
      endcase
    end
  assign pipe_16_22_front_din = unregy_join_6_1;
  assign pipe_16_22_push_front_pop_back_en = 1'b1;
  assign y = pipe_16_22_back;
endmodule
 



module constant_cfe3e81a1c (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111111110101000001;
  assign op = 18'b111111110101000001;
endmodule
 



module constant_57097453ee (
  output [(48 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(48 - 1):0] const_value = 48'sb000000000000000000000000000000000000111111111111;
  assign op = 48'b000000000000000000000000000000000000111111111111;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module  xldsp48e1  (acout, bcout, carrycascout, carryout, multsignout, overflow, underflow, patterndetect, patternbdetect, p, pcout, a, acin, alumode, b, bcin, c, carrycascin, carryin, carryinsel, cea1, cea2, cead, cealumode, ceb1, ceb2, cec, cecarryin, cectrl, ced, ceinmode, cem, cemultcarryin, cep, multsignin, op, opmode, pcin, rsta, rstcarryin, rstalumode, rstb, rstc, rstctrl, rstd, rstinmode, rstm, rstp, clk, d, inmode, en, rst, ce);
parameter integer areg= 1;
parameter a_input = "DIRECT";
parameter legacy_mode = "NONE";
parameter integer carryout_width = 4;
parameter integer breg = 1;
parameter integer acascreg = 1;
parameter integer adreg = 1;
parameter integer bcascreg = 1;
parameter integer carryinreg = 1;
parameter integer carryinselreg = 1;
parameter integer creg = 1;
parameter integer dreg = 1;
parameter integer inmodereg = 1;
parameter integer mreg = 1;
parameter integer opmodereg= 1;
parameter integer preg = 1;
parameter use_op = 0;
parameter use_c_port = 1;
parameter c_use_cea1 = 0;
parameter c_use_cea2 = 0;
parameter c_use_cead = 0;
parameter c_use_ced  = 0;
parameter c_use_ceinmode = 0;
parameter c_use_rstd = 0;
parameter c_use_rstinmode = 0;
parameter c_use_ceb1 = 0;
parameter c_use_ceb2 = 0;
parameter c_use_cemultcarryin = 0;
parameter c_use_cem = 0;
parameter c_use_cep = 0;
parameter c_use_cec = 0;
parameter c_use_cecarryin = 0;
parameter c_use_cectrl = 0;
parameter c_use_bcin = 0;
parameter c_use_a = 1;
parameter c_use_acin = 0;
parameter c_use_en = 0;
parameter c_use_rst = 0;
parameter c_use_rsta = 0;
parameter c_use_rstb = 0;
parameter c_use_rstp = 0;
parameter c_use_rstc = 0;
parameter c_use_rstcarryin = 0;
parameter c_use_rstalumode = 0;
parameter c_use_rstctrl = 0;
parameter c_use_rstm = 0;
parameter c_use_pcin = 0;
parameter c_use_b = 0;
parameter c_use_c = 0;
parameter c_use_cealumode = 0;
parameter alumodereg = 1;
parameter autoreset_pattern_detect = "NO_RESET";
parameter b_input = "DIRECT";
parameter mask = 48'h3FFFFFFFFFFF;
parameter pattern = 48'h000000000000;
parameter sel_mask = "MASK";
parameter sel_pattern = "PATTERN";
parameter use_dport = "FALSE";
parameter use_mult = "MULTIPLY";
parameter use_pattern_detect = "NO_PATDET";
parameter use_simd = "ONE48";
output [29:0] acout;
output [17:0] bcout;
output carrycascout;
output [3:0]carryout;
output multsignout;
output [47:0] p;
output patternbdetect;
output patterndetect;
output [47:0] pcout;
output underflow;
output overflow;
input [29:0] a;
input [29:0] acin;
input [3:0] alumode;
input [17:0] b;
input [17:0] bcin;
input [47:0] c;
input carrycascin;
input carryin;
input [2:0] carryinsel;
input cea1;
input cea2;
input cead;
input ceb1;
input ceb2;
input cealumode;
input cec;
input cecarryin;
input cectrl;
input ced;
input ceinmode;
input cem;
input cemultcarryin;
input cep;
input multsignin;
input [19:0] op;
input [6:0] opmode;
input [47:0] pcin;
input rsta;
input rstcarryin;
input rstalumode;
input rstb;
input rstc;
input rstctrl;
input rstd;
input rstinmode;
input rstm;
input rstp;
input clk;
input [24:0] d;
input [4:0] inmode;
input en;
input rst;
input ce;
wire internal_cea1;
wire internal_cea2;
wire internal_cead;
wire internal_ceb1;
wire internal_ceb2;
wire internal_cec;
wire internal_cep;
wire internal_cem;
wire internal_cemultcarryin;
wire internal_cecarryin;
wire internal_cectrl;
wire internal_ced;
wire internal_ceinmode;
wire internal_cealumode;
wire internal_en;
wire internal_rst;
wire internal_rsta;
wire internal_rstb;
wire internal_rstc;
wire internal_rstd;
wire internal_rstinmode;
wire internal_rstalumode;
wire internal_rstcarryin;
wire internal_rstctrl;
wire internal_rstm;
wire [47:0] internal_pcin;
wire internal_rstp;
wire [6:0] internal_opmode;
wire internal_sub;
wire internal_carryin;
wire [2:0] internal_carryin_sel;
wire [3:0] internal_alumode;
wire [29:0] internal_a;
wire [29:0] internal_acin;
wire [17:0] internal_b;
wire [17:0] internal_bcin;
wire [47:0] internal_c;
wire [3:0] internal_carryout;
wire [24:0] internal_d;
wire [4:0]  internal_inmode;
  assign internal_en = (c_use_en ? en : 1'b1);
  assign internal_cem = (ce & internal_en) & (c_use_cem ? cem : 1'b1);
  assign internal_cemultcarryin = (ce & internal_en) & (c_use_cemultcarryin ? cemultcarryin : 1'b1);
  assign internal_cep = (ce & internal_en) & (c_use_cep ? cep : 1'b1);
  assign internal_cecarryin = (ce & internal_en) & (c_use_cecarryin ? cecarryin : 1'b1);
  assign internal_cectrl = (ce & internal_en) & (c_use_cectrl ? cectrl : 1'b1);
  assign internal_ced = (ce & internal_en) & (dreg ? ced : 1'b1);
  assign internal_ceinmode = (ce & internal_en) & (c_use_ceinmode ? ceinmode :  1'b1);
  assign internal_cealumode = (ce & internal_en) & (c_use_cealumode ? cealumode : 1'b1);
  assign internal_rst = (c_use_rst ? rst : 1'b0);
  assign internal_rsta = (c_use_rsta ? rsta : 1'b0) | internal_rst;
  assign internal_rstb = (c_use_rstb ? rstb : 1'b0) | internal_rst;
  assign internal_rstcarryin = (c_use_rstcarryin ? rstcarryin : 1'b0) | internal_rst;
  assign internal_rstctrl = (c_use_rstctrl ? rstctrl : 1'b0) | internal_rst;
  assign internal_rstd = (use_dport ? rstd : 1'b0) | internal_rst;
  assign internal_rstinmode = (use_dport ? rstinmode : 1'b0) | internal_rst;
  assign internal_rstm = (c_use_rstm ? rstm : 1'b0) | internal_rst;
  assign internal_rstp = (c_use_rstp ? rstp : 1'b0) | internal_rst;
  assign internal_rstalumode = (c_use_rstalumode ? rstalumode : 1'b0) | internal_rst;
  assign internal_acin = (c_use_acin ? acin : 30'b00000000000000000000000000000);
  assign internal_bcin = (c_use_bcin ? bcin : 18'b000000000000000000);
  assign internal_a = (c_use_a ? a : 30'd0);
  assign internal_b = (c_use_b ? b : 18'd0);
  assign internal_c = (c_use_c ? c : 48'd0);
  assign internal_pcin = (c_use_pcin ? pcin : 48'd0);
  assign internal_d = (use_dport ? d : 24'd0);

generate
  if(areg == 0)
  begin: cea_0
        assign internal_cea1 = 1'b1;
        assign internal_cea2 = 1'b1;
  end
  if(areg == 1)
  begin: cea_1
        assign internal_cea1 = 1'b1;
        assign internal_cea2 = (ce & internal_en) & (c_use_cea1 ? cea1 : 1'b1);
  end

  if(areg == 2)
  begin: cea_2
       assign internal_cea1 = (ce & internal_en) & (c_use_cea1 ? cea1 : 1'b1);
       assign internal_cea2 = (ce & internal_en) & (c_use_cea2 ? cea2 : 1'b1);
  end
  if(adreg == 1)
  begin: cead_1
        assign internal_cead = (ce & internal_en) & cead;
  end
  if(adreg == 0)
  begin: cead_0
        assign internal_cead = 0;
  end
  if(breg == 0)
  begin: ceb_0
        assign internal_ceb1 = 1'b1;
        assign internal_ceb2 = 1'b1;
  end
  if(breg == 1)
  begin: ceb_1
        assign internal_ceb1 = 1'b1;
        assign internal_ceb2 = (ce & internal_en) & (c_use_ceb1 ? ceb1 : 1'b1);
  end

  if(breg == 2)
  begin: ceb_2
       assign internal_ceb1 = (ce & internal_en) & (c_use_ceb1 ? ceb1 : 1'b1);
       assign internal_ceb2 = (ce & internal_en) & (c_use_ceb2 ? ceb2 : 1'b1);
  end

  if (use_op == 0)
  begin:opmode_0
          assign internal_opmode = opmode;
          assign internal_alumode = alumode;
          assign internal_carryin = carryin;
          assign internal_carryin_sel = carryinsel;
          if(use_dport == "FALSE")
          begin:dport_0
                assign internal_inmode = 0;
          end
          if(use_dport == "TRUE")
          begin:dport_1
                assign internal_inmode = inmode;
          end
  end

  if(use_op == 1)
  begin:opmode_1
        assign internal_opmode = op [6:0];
        assign internal_alumode = op[10:7];
        assign internal_carryin = op[11];
        assign internal_carryin_sel = op[14:12];
        assign internal_inmode = op[19:15];
  end
  if (use_c_port == 1)
  begin:using_cport
    assign internal_cec = (ce & internal_en) & (c_use_cec ? cec : 1'b1);
    assign internal_rstc = (c_use_rstc ? rstc : 1'b0) | internal_rst;
  end

  if (use_c_port == 0)
  begin:not_using_cport
     assign internal_cec = 1'b1;
     assign internal_rstc = 1'b1;
  end
  if (carryout_width == 1)
  begin: carryoutwidth1
     assign carryout = internal_carryout[3];
  end
  if (carryout_width == 2)
  begin: carryoutwidth2
     assign carryout[1] = internal_carryout[3];
     assign carryout[0] = internal_carryout[1];
  end
  if (carryout_width == 4)
  begin: carryoutwidth4
     assign carryout = internal_carryout;
  end
endgenerate
   DSP48E1 dsp48_inst(.ACOUT(acout),
                    .BCOUT(bcout),
                    .CARRYCASCOUT(carrycascout),
                    .CARRYOUT(internal_carryout),
                    .MULTSIGNOUT(multsignout),
                    .OVERFLOW(overflow),
                    .P(p),
                    .PATTERNBDETECT(patternbdetect),
                    .PATTERNDETECT(patterndetect),
                    .PCOUT(pcout),
                    .UNDERFLOW(underflow),
                    .A(internal_a),
                    .ACIN(internal_acin),
                    .ALUMODE(internal_alumode),
                    .B(internal_b),
                    .BCIN(internal_bcin),
                    .C(internal_c),
                    .CARRYCASCIN(carrycascin),
                    .CARRYIN(internal_carryin),
                    .CARRYINSEL(internal_carryin_sel),
                    .CEA1(internal_cea1),
                    .CEA2(internal_cea2),
                        .CEAD(internal_cead),
                    .CEALUMODE(internal_cealumode),
                    .CEB1(internal_ceb1),
                    .CEB2(internal_ceb2),
                    .CEC(internal_cec),
                    .CECARRYIN(internal_cecarryin),
                    .CECTRL(internal_cectrl),
                        .CED(internal_ced),
                        .CEINMODE(internal_ceinmode),
                    .CEM(internal_cem),
                    .CEP(internal_cep),
                    .CLK(clk),
                        .D(internal_d),
                        .INMODE(internal_inmode),
                    .MULTSIGNIN(internal_multsignin),
                    .OPMODE(internal_opmode),
                    .PCIN(internal_pcin),
                    .RSTA(internal_rsta),
                    .RSTALLCARRYIN(internal_rstcarryin),
                    .RSTALUMODE(internal_rstalumode),
                    .RSTB(internal_rstb),
                    .RSTC(internal_rstc),
                    .RSTCTRL(internal_rstctrl),
                        .RSTD(internal_rstd),
                        .RSTINMODE(internal_rstinmode),
                    .RSTM(internal_rstm),
                    .RSTP(internal_rstp)
                        );
defparam
dsp48_inst.ACASCREG = acascreg,
dsp48_inst.ALUMODEREG = alumodereg,
dsp48_inst.AREG = areg,
dsp48_inst.ADREG = adreg,
dsp48_inst.AUTORESET_PATDET = autoreset_pattern_detect,
dsp48_inst.B_INPUT = b_input,
dsp48_inst.BREG = breg,
dsp48_inst.CARRYINREG = carryinreg,
dsp48_inst.CARRYINSELREG = carryinselreg,
dsp48_inst.CREG = creg,
dsp48_inst.DREG = dreg,
dsp48_inst.INMODEREG = inmodereg,
dsp48_inst.MREG = mreg,
dsp48_inst.OPMODEREG = opmodereg,
dsp48_inst.PREG = preg,
dsp48_inst.A_INPUT = a_input,
dsp48_inst.BCASCREG = bcascreg,
dsp48_inst.B_INPUT = b_input,
dsp48_inst.MASK = mask,
dsp48_inst.PATTERN = pattern,
dsp48_inst.SEL_MASK = sel_mask,
dsp48_inst.SEL_PATTERN = sel_pattern,
dsp48_inst.USE_DPORT = use_dport,
dsp48_inst.USE_MULT= use_mult,
dsp48_inst.USE_PATTERN_DETECT = use_pattern_detect,
dsp48_inst.USE_SIMD = use_simd;
endmodule


module opmode_6481474c6d (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b00101000000000110101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b00101;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000110101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b00101000000000110101;
  assign op = 20'b00101000000000110101;
endmodule
 



module reinterpret_81b71e1f8b (
  input [(16 - 1):0] input_port,
  output [(16 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] input_port_1_40;
  assign input_port_1_40 = input_port;
  assign output_port = input_port_1_40;
endmodule
 



module reinterpret_0e0c011a4e (
  input [(18 - 1):0] input_port,
  output [(18 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] input_port_1_40;
  assign input_port_1_40 = input_port;
  assign output_port = input_port_1_40;
endmodule
 



module reinterpret_5668f8e576 (
  input [(48 - 1):0] input_port,
  output [(48 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(48 - 1):0] input_port_1_40;
  assign input_port_1_40 = input_port;
  assign output_port = input_port_1_40;
endmodule
 



module constant_8b9eab6fc5 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000001001000001111;
  assign op = 18'b000001001000001111;
endmodule
 



module constant_e1a6144063 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb010011011011100111;
  assign op = 18'b010011011011100111;
endmodule
 



module concat_7e18b92ffa (
  input [(16 - 1):0] in0,
  input [(16 - 1):0] in1,
  output [(32 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire [(16 - 1):0] in0_1_23;
  wire [(16 - 1):0] in1_1_27;
  wire [(32 - 1):0] y_2_1_concat;
  assign in0_1_23 = in0;
  assign in1_1_27 = in1;
  assign y_2_1_concat = {in0_1_23, in1_1_27};
  assign y = y_2_1_concat;
endmodule
 



module constant_5e90e4a8ec (
  output [(1 - 1):0] op,
  input clk,
  input ce,
  input clr);
  assign op = 1'b1;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xldpram_dist (dina, addra, wea, ena, a_ce, a_clk, douta, addrb, enb, b_ce, b_clk, doutb);
parameter core_name0= "";
parameter addr_width = 12;
parameter c_width= 12;
parameter c_address_width= 4;
parameter latency= 1;
input [c_width-1:0] dina;
input [addr_width-1:0] addra;
input wea, ena, a_ce, a_clk;
output [c_width-1:0] douta;
input [addr_width-1:0] addrb;
input enb, b_ce, b_clk;
output [c_width-1:0] doutb;
wire [c_address_width-1:0] core_addra,core_addrb;
wire [c_width-1:0] core_douta,core_doutb;
wire [c_width-1:0] reg_douta,reg_doutb;
wire core_we, core_cea, core_ceb;

   assign core_addra = addra;
   assign core_addrb = addrb;
   assign douta = reg_douta;
   assign doutb = reg_doutb;
   assign core_cea = a_ce & ena;
   assign core_ceb = b_ce & enb;
   assign core_we = wea & core_cea;

generate
  if (core_name0 == "dmg_62_e299ff50184bf038")
    begin:comp0
    dmg_62_e299ff50184bf038 core_instance0 (
      .a(core_addra),
      .clk(a_clk),
      .d(dina),
      .we(core_we),
      .dpra(core_addrb),
      .spo(core_douta),
      .dpo(core_doutb)

    );
  end
  if (core_name0 == "dmg_62_f0318986ab2917a2")
    begin:comp1
    dmg_62_f0318986ab2917a2 core_instance1 (
      .a(core_addra),
      .clk(a_clk),
      .d(dina),
      .we(core_we),
      .dpra(core_addrb),
      .spo(core_douta),
      .dpo(core_doutb)

    );
  end
 if (latency > 0)
   begin:registered_dpram_instA
      synth_reg # (c_width, latency)
        output_regA (.i(core_douta),
                     .ce(core_cea),
                     .clr(1'b0),
                     .clk(a_clk),
                     .o(reg_douta));
   end
 if (latency > 0)
   begin:registered_dpram_instB
      synth_reg # (c_width, latency)
        output_regB (.i(core_doutb),
                     .ce(core_ceb),
                     .clr(1'b0),
                     .clk(b_clk),
                     .o(reg_doutb));
   end

   if (latency == 0)
     begin:nonregistered_ram
        assign reg_douta = core_douta;
        assign reg_doutb = core_doutb;
     end
endgenerate
endmodule

//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xlsprom_dist (addr, en, ce, clk, data);
   parameter core_name0= "";
   parameter addr_width= 2;
   parameter latency= 0;
   parameter c_width= 12;
   parameter c_address_width= 4;
   input [addr_width-1:0] addr;
   input en;
   input ce;
   input clk;
   output [c_width-1:0] data;
   wire [c_width-1:0] core_data_out;
   wire [c_address_width-1:0] core_addr;
   wire  core_ce;
   assign core_addr = { {(c_address_width - addr_width) {1'b0}}, addr};
   assign core_ce = ce & en;
generate
if (core_name0 == "dmg_62_c25ab22a2e12a0dd")
begin:comp1
dmg_62_c25ab22a2e12a0dd core_instance0 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_8c0172ee1e6fc864")
begin:comp3
dmg_62_8c0172ee1e6fc864 core_instance1 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_c1f17fd5734c4bf2")
begin:comp5
dmg_62_c1f17fd5734c4bf2 core_instance2 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_dd72e39ad62faa37")
begin:comp7
dmg_62_dd72e39ad62faa37 core_instance3 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_2378f8cddaf130ec")
begin:comp9
dmg_62_2378f8cddaf130ec core_instance4 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_d87244d006cee310")
begin:comp11
dmg_62_d87244d006cee310 core_instance5 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_ee59d5b88a2a13fb")
begin:comp13
dmg_62_ee59d5b88a2a13fb core_instance6 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
if (core_name0 == "dmg_62_80d2b3237a1e3d03")
begin:comp15
dmg_62_80d2b3237a1e3d03 core_instance7 (
         .a(core_addr),
        .clk(clk),
        .qspo_ce(core_ce),
        .qspo(core_data_out)
        );
end
   if (latency > 1)
     begin:latency_test
        synth_reg # (c_width, latency-1)
          reg1 (
               .i(core_data_out),
               .ce(core_ce),
               .clr(1'b0),
               .clk(clk),
               .o(data));
     end

   if (latency <= 1)
     begin:latency_0_or_1
        assign data = core_data_out;
     end
endgenerate
endmodule


module reinterpret_2824f666f2 (
  input [(16 - 1):0] input_port,
  output [(16 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] input_port_1_40;
  wire [(16 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_dee95c6dbb (
  input [(16 - 1):0] input_port,
  output [(16 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(16 - 1):0] input_port_1_40;
  wire signed [(16 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module  xlslice  (x, y);
parameter new_msb= 9;
parameter new_lsb= 1;
parameter x_width= 16;
parameter y_width= 8;
input [x_width-1:0] x;
output [y_width-1:0] y;
assign y = x[new_msb:new_lsb];
endmodule


module counter_5c8ee48e8f (
  input [(1 - 1):0] rst,
  output [(1 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire rst_1_40;
  reg [(1 - 1):0] count_reg_20_23 = 1'b0;
  wire count_reg_20_23_rst;
  localparam [(1 - 1):0] const_value = 1'b1;
  localparam [(2 - 1):0] const_value_x_000000 = 2'b10;
  localparam [(1 - 1):0] const_value_x_000001 = 1'b1;
  localparam [(1 - 1):0] const_value_x_000002 = 1'b0;
  localparam [(1 - 1):0] const_value_x_000003 = 1'b0;
  localparam [(1 - 1):0] const_value_x_000004 = 1'b1;
  wire bool_44_4;
  reg rst_limit_join_44_1;
  reg [(2 - 1):0] count_reg_join_44_1;
  reg count_reg_join_44_1_rst;
  assign rst_1_40 = rst;
  always @(posedge clk)
    begin:proc_count_reg_20_23
      if (((ce == 1'b1) && (count_reg_20_23_rst == 1'b1)))
        begin
          count_reg_20_23 <= 1'b0;
        end
      else if ((ce == 1'b1))
        begin
          count_reg_20_23 <= count_reg_20_23 + const_value_x_000004;
        end
    end
  assign bool_44_4 = rst_1_40 || 1'b0;
  always @(bool_44_4 or count_reg_20_23)
    begin:proc_if_44_1
      if (bool_44_4)
        begin
          count_reg_join_44_1_rst = 1'b1;
        end
      else 
        begin
          count_reg_join_44_1_rst = 1'b0;
        end
      if (bool_44_4)
        begin
          rst_limit_join_44_1 = 1'b0;
        end
      else 
        begin
          rst_limit_join_44_1 = 1'b0;
        end
    end
  assign count_reg_20_23_rst = count_reg_join_44_1_rst;
  assign op = count_reg_20_23;
endmodule
 



module addsub_f03aa9b11e (
  input [(16 - 1):0] a,
  input [(16 - 1):0] b,
  output [(17 - 1):0] s,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] a_17_32;
  wire signed [(16 - 1):0] b_17_35;
  localparam signed [(17 - 1):0] const_value = 17'sb00000000000000000;
  reg signed [(17 - 1):0] op_mem_91_20[0:(1 - 1)];
  initial
    begin
      op_mem_91_20[0] = 17'b00000000000000000;
    end
  wire signed [(17 - 1):0] op_mem_91_20_front_din;
  wire signed [(17 - 1):0] op_mem_91_20_back;
  wire op_mem_91_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b0;
  reg [(1 - 1):0] cout_mem_92_22[0:(1 - 1)];
  initial
    begin
      cout_mem_92_22[0] = 1'b0;
    end
  wire [(1 - 1):0] cout_mem_92_22_front_din;
  wire [(1 - 1):0] cout_mem_92_22_back;
  wire cout_mem_92_22_push_front_pop_back_en;
  wire [(3 - 1):0] prev_mode_93_22_next;
  wire [(3 - 1):0] prev_mode_93_22;
  wire [(3 - 1):0] prev_mode_93_22_reg_i;
  wire [(3 - 1):0] prev_mode_93_22_reg_o;
  localparam [(1 - 1):0] const_value_x_000001 = 1'b0;
  localparam [(1 - 1):0] const_value_x_000002 = 1'b1;
  localparam [(1 - 1):0] const_value_x_000003 = 1'b0;
  localparam [(1 - 1):0] const_value_x_000004 = 1'b0;
  wire signed [(17 - 1):0] cast_69_18;
  wire signed [(17 - 1):0] cast_69_22;
  wire signed [(17 - 1):0] internal_s_69_5_addsub;
  localparam [(1 - 1):0] const_value_x_000005 = 1'b0;
  localparam [(1 - 1):0] const_value_x_000006 = 1'b0;
  localparam [(3 - 1):0] const_value_x_000007 = 3'b000;
  assign a_17_32 = a;
  assign b_17_35 = b;
  assign op_mem_91_20_back = op_mem_91_20[0];
  always @(posedge clk)
    begin:proc_op_mem_91_20
      integer i;
      if (((ce == 1'b1) && (op_mem_91_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_91_20[0] <= op_mem_91_20_front_din;
        end
    end
  assign cout_mem_92_22_back = cout_mem_92_22[0];
  always @(posedge clk)
    begin:proc_cout_mem_92_22
      integer i_x_000000;
      if (((ce == 1'b1) && (cout_mem_92_22_push_front_pop_back_en == 1'b1)))
        begin
          cout_mem_92_22[0] <= cout_mem_92_22_front_din;
        end
    end
  assign prev_mode_93_22_reg_i = prev_mode_93_22_next;
  assign prev_mode_93_22 = prev_mode_93_22_reg_o;
  defparam prev_mode_93_22_reg_inst.init_index = 2;
  defparam prev_mode_93_22_reg_inst.init_value = 3'b010;
  defparam prev_mode_93_22_reg_inst.latency = 1;
  defparam prev_mode_93_22_reg_inst.width = 3;
  synth_reg_w_init prev_mode_93_22_reg_inst(.ce(ce), .clk(clk), .clr(clr), .i(prev_mode_93_22_reg_i), .o(prev_mode_93_22_reg_o));
  assign cast_69_18 = {{1{a_17_32[15]}}, a_17_32[15:0]};
  assign cast_69_22 = {{1{b_17_35[15]}}, b_17_35[15:0]};
  assign internal_s_69_5_addsub = cast_69_18 + cast_69_22;
  assign op_mem_91_20_front_din = internal_s_69_5_addsub;
  assign op_mem_91_20_push_front_pop_back_en = 1'b1;
  assign cout_mem_92_22_front_din = const_value_x_000006;
  assign cout_mem_92_22_push_front_pop_back_en = 1'b1;
  assign prev_mode_93_22_next = const_value_x_000007;
  assign s = op_mem_91_20_back;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xlcounter_limit (ce, clr, clk, op, up, en, rst);
parameter core_name0= "";
parameter op_width= 5;
parameter op_arith= `xlSigned;
parameter cnt_63_48 = 0;
parameter cnt_47_32 = 0;
parameter cnt_31_16 = 0;
parameter cnt_15_0  = 0;
parameter count_limited= 0;

   input  ce, clr, clk;
   input rst, en;
   input up;
   output [op_width-1:0] op;
parameter [63:0] cnt_to = { cnt_63_48[15:0], cnt_47_32[15:0], cnt_31_16[15:0], cnt_15_0[15:0]};
parameter [(8*op_width)-1:0] oneStr = { op_width{"1"}};

reg op_thresh0;
wire core_sinit, core_ce;
wire rst_overrides_en;
wire [op_width-1:0] op_net;
   assign op = op_net;
   assign core_ce = ce & en;
   assign rst_overrides_en = rst | en;

generate
   if (count_limited == 1)
     begin :limit
        always @(op_net)
          begin:eq_cnt_to
             op_thresh0 = (op_net == cnt_to[op_width-1:0])? 1'b1 : 1'b0;
          end
        assign core_sinit = (op_thresh0 | clr | rst) & ce & rst_overrides_en;
     end
   if (count_limited == 0)
     begin :no_limit
        assign core_sinit = (clr | rst) & ce & rst_overrides_en;
     end
  if (core_name0 == "cntr_11_0_2801b0cdb1a0a2a6")
    begin:comp0
    cntr_11_0_2801b0cdb1a0a2a6 core_instance0 (
        .clk(clk),
        .ce(core_ce),
        .sinit(core_sinit),
        .q(op_net)
      );
  end
  if (core_name0 == "cntr_11_0_63de6612768d060a")
    begin:comp1
    cntr_11_0_63de6612768d060a core_instance1 (
        .clk(clk),
        .ce(core_ce),
        .sinit(core_sinit),
        .q(op_net)
      );
  end
endgenerate
endmodule


module shift_a0dd291710 (
  input [(21 - 1):0] ip,
  output [(21 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(21 - 1):0] ip_1_23;
  localparam signed [(21 - 1):0] const_value = 21'sb000000000000000000000;
  reg signed [(21 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 21'b000000000000000000000;
    end
  wire signed [(21 - 1):0] op_mem_46_20_front_din;
  wire signed [(21 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(21 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{1{ip_1_23[20]}}, ip_1_23[20:1]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_92fa79e61c (
  input [(21 - 1):0] ip,
  output [(21 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(21 - 1):0] ip_1_23;
  localparam signed [(21 - 1):0] const_value = 21'sb000000000000000000000;
  reg signed [(21 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 21'b000000000000000000000;
    end
  wire signed [(21 - 1):0] op_mem_46_20_front_din;
  wire signed [(21 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(23 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(21 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[20]}}, ip_1_23[20:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[22]}}, cast_internal_ip_27_3_rsh[22:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_be765386ae (
  input [(28 - 1):0] ip,
  output [(28 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(28 - 1):0] ip_1_23;
  localparam signed [(28 - 1):0] const_value = 28'sb0000000000000000000000000000;
  reg signed [(28 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 28'b0000000000000000000000000000;
    end
  wire signed [(28 - 1):0] op_mem_46_20_front_din;
  wire signed [(28 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(33 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(28 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{5{ip_1_23[27]}}, ip_1_23[27:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[32]}}, cast_internal_ip_27_3_rsh[32:7]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_58794f53f4 (
  input [(32 - 1):0] ip,
  output [(32 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(32 - 1):0] ip_1_23;
  localparam signed [(32 - 1):0] const_value = 32'sb00000000000000000000000000000000;
  reg signed [(32 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 32'b00000000000000000000000000000000;
    end
  wire signed [(32 - 1):0] op_mem_46_20_front_din;
  wire signed [(32 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(34 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(32 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[31]}}, ip_1_23[31:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[33]}}, cast_internal_ip_27_3_rsh[33:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_940a0f4802 (
  input [(24 - 1):0] ip,
  output [(24 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(24 - 1):0] ip_1_23;
  localparam signed [(24 - 1):0] const_value = 24'sb000000000000000000000000;
  reg signed [(24 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 24'b000000000000000000000000;
    end
  wire signed [(24 - 1):0] op_mem_46_20_front_din;
  wire signed [(24 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(25 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(24 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[23]}}, ip_1_23[23:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[24]}}, cast_internal_ip_27_3_rsh[24:3]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_cecea44c7e (
  input [(27 - 1):0] ip,
  output [(27 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(27 - 1):0] ip_1_23;
  localparam signed [(27 - 1):0] const_value = 27'sb000000000000000000000000000;
  reg signed [(27 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 27'b000000000000000000000000000;
    end
  wire signed [(27 - 1):0] op_mem_46_20_front_din;
  wire signed [(27 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(28 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(27 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[26]}}, ip_1_23[26:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[27]}}, cast_internal_ip_27_3_rsh[27:3]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_7d97a52cb7 (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{1{ip_1_23[19]}}, ip_1_23[19:1]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_c3b3a63c34 (
  input [(24 - 1):0] ip,
  output [(24 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(24 - 1):0] ip_1_23;
  localparam signed [(24 - 1):0] const_value = 24'sb000000000000000000000000;
  reg signed [(24 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 24'b000000000000000000000000;
    end
  wire signed [(24 - 1):0] op_mem_46_20_front_din;
  wire signed [(24 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(27 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(24 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{3{ip_1_23[23]}}, ip_1_23[23:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[26]}}, cast_internal_ip_27_3_rsh[26:5]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_0f7277fd89 (
  input [(25 - 1):0] ip,
  output [(25 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(25 - 1):0] ip_1_23;
  localparam signed [(25 - 1):0] const_value = 25'sb0000000000000000000000000;
  reg signed [(25 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 25'b0000000000000000000000000;
    end
  wire signed [(25 - 1):0] op_mem_46_20_front_din;
  wire signed [(25 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(27 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(25 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[24]}}, ip_1_23[24:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[26]}}, cast_internal_ip_27_3_rsh[26:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_a47dc9adee (
  input [(32 - 1):0] ip,
  output [(32 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(32 - 1):0] ip_1_23;
  localparam signed [(32 - 1):0] const_value = 32'sb00000000000000000000000000000000;
  reg signed [(32 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 32'b00000000000000000000000000000000;
    end
  wire signed [(32 - 1):0] op_mem_46_20_front_din;
  wire signed [(32 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(37 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(32 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{5{ip_1_23[31]}}, ip_1_23[31:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[36]}}, cast_internal_ip_27_3_rsh[36:7]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module constant_ab52c706fe (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb010100001101100011;
  assign op = 18'b010100001101100011;
endmodule
 



module constant_c61f683a87 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000000000100100010;
  assign op = 18'b000000000100100010;
endmodule
 



module constant_f944da36b2 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111111110100111111;
  assign op = 18'b111111110100111111;
endmodule
 



module constant_e50ce26af4 (
  output [(48 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(48 - 1):0] const_value = 48'sb000000000000000000000000000001111111111111111111;
  assign op = 48'b000000000000000000000000000001111111111111111111;
endmodule
 



module constant_8bfd575960 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111111111110100011;
  assign op = 18'b111111111110100011;
endmodule
 



module constant_a75cf5751a (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000000010110110010;
  assign op = 18'b000000010110110010;
endmodule
 



module constant_3a33d08f5d (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111111010101011111;
  assign op = 18'b111111010101011111;
endmodule
 



module constant_bae102145d (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000001001010001101;
  assign op = 18'b000001001010001101;
endmodule
 



module constant_2a8a740f47 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111110000010110001;
  assign op = 18'b111110000010110001;
endmodule
 



module constant_9094152419 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000011010101100010;
  assign op = 18'b000011010101100010;
endmodule
 



module constant_f2e18047a9 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111001101011010100;
  assign op = 18'b111001101011010100;
endmodule
 



module opmode_de16be0052 (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b10100000000000110101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b10100;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000110101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b10100000000000110101;
  assign op = 20'b10100000000000110101;
endmodule
 



module opmode_96dace4a09 (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b00100000000000010101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b00100;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000010101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b00100000000000010101;
  assign op = 20'b00100000000000010101;
endmodule
 



module reinterpret_f67f49dab9 (
  input [(19 - 1):0] input_port,
  output [(19 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] input_port_1_40;
  assign input_port_1_40 = input_port;
  assign output_port = input_port_1_40;
endmodule
 



module constant_d1858fa188 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000000100110011101;
  assign op = 18'b000000100110011101;
endmodule
 



module constant_0823bf3a15 (
  output [(48 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(48 - 1):0] const_value = 48'sb000000000000000000000000000000001111111111111111;
  assign op = 48'b000000000000000000000000000000001111111111111111;
endmodule
 



module constant_dad7ec4a11 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb111100010100100101;
  assign op = 18'b111100010100100101;
endmodule
 



module opmode_77dfa9804f (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b00101000000000010101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b00101;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000010101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b00101000000000010101;
  assign op = 20'b00101000000000010101;
endmodule
 



module constant_c44270bde8 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb010011000101100101;
  assign op = 18'b010011000101100101;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xladdsubmode (a, b, c_in, mode, ce, clr, clk, rst, en, c_out, s);
parameter core_name0= "";
parameter a_width= 16;
parameter signed a_bin_pt= 4;
parameter a_arith= `xlUnsigned;
parameter b_width= 8;
parameter signed b_bin_pt= 2;
parameter b_arith= `xlUnsigned;
parameter c_in_width= 16;
parameter c_in_bin_pt= 4;
parameter c_in_arith= `xlUnsigned;
parameter c_out_width= 16;
parameter c_out_bin_pt= 4;
parameter c_out_arith= `xlUnsigned;
parameter s_width= 17;
parameter s_bin_pt= 4;
parameter s_arith= `xlUnsigned;
parameter rst_width= 1;
parameter rst_bin_pt= 0;
parameter rst_arith= `xlUnsigned;
parameter en_width= 1;
parameter en_bin_pt= 0;
parameter en_arith= `xlUnsigned;
parameter padded_width= 16;
parameter full_s_width= 17;
parameter full_s_arith= `xlUnsigned;
parameter mode_width= 1;
parameter mode_bin_pt= 0;
parameter mode_arith= `xlUnsigned;
parameter extra_registers= 0;
parameter latency= 0;
parameter quantization= `xlTruncate;
parameter overflow= `xlWrap;
parameter c_a_width= 16;
parameter c_b_width= 8;
parameter c_a_type= 1;
parameter c_b_type= 1;
parameter c_has_sclr= 0;
parameter c_has_ce= 0;
parameter c_latency= 0;
parameter c_output_width= 17;
parameter c_enable_rlocs= 1;
parameter c_has_c_in= 0;
parameter c_has_c_out= 0;
input [a_width-1:0] a;
input [b_width-1:0] b;
input c_in;
input [mode_width-1:0] mode;
input ce, clr, clk, rst, en;
output c_out;
output [s_width-1:0] s;
parameter full_a_width = full_s_width;
parameter full_b_width = full_s_width;
parameter full_s_bin_pt = (a_bin_pt > b_bin_pt) ? a_bin_pt : b_bin_pt;
wire [full_a_width-1:0] full_a;
wire [full_b_width-1:0] full_b;
wire [full_s_width-1:0] full_s;
wire [full_s_width-1:0] core_s;
wire [s_width-1:0] conv_s;
wire  add;
wire  real_a,real_b,real_s;
wire  internal_clr;
wire  internal_ce;
wire  extra_reg_ce;
wire  override;
wire  logic1;
wire  temp_cout;
wire  temp_cin;
assign internal_clr = clr | rst & ce;
assign internal_ce = ce & en;
assign logic1 = 1'b1;
assign add = ~mode[0];
assign temp_cin = (c_has_c_in) ? c_in : 1'b0;
align_input # (a_width, b_bin_pt - a_bin_pt, a_arith, full_a_width)
align_inp_a (.inp(a),.res(full_a));
align_input # (b_width, a_bin_pt - b_bin_pt, b_arith, full_b_width)
align_inp_b (.inp(b),.res(full_b));
convert_type # (full_s_width, full_s_bin_pt, full_s_arith, s_width,
                s_bin_pt, s_arith, quantization, overflow)
conv_typ_s (.inp(core_s),.res(conv_s));
generate
  if (core_name0 == "addsb_11_0_f9ccbdc7584d43c6")
    begin:comp0
    addsb_11_0_f9ccbdc7584d43c6 core_instance0 (
         .a(full_a),
         .add(add),
         .clk(clk),
         .ce(internal_ce),
         .s(core_s),
         .b(full_b)
      );
  end

endgenerate
generate
  if (extra_registers > 0)
  begin:latency_test

    if (c_latency > 1)
    begin:override_test
      synth_reg # (1, c_latency)
        override_pipe (
          .i(logic1),
          .ce(internal_ce),
          .clr(internal_clr),
          .clk(clk),
          .o(override));
      assign extra_reg_ce = ce & en & override;
    end
    if ((c_latency == 0) || (c_latency == 1))
    begin:no_override
      assign extra_reg_ce = ce & en;
    end
    synth_reg # (s_width, extra_registers)
      extra_reg (
        .i(conv_s),
        .ce(extra_reg_ce),
        .clr(internal_clr),
        .clk(clk),
        .o(s));
    if (c_has_c_out == 1)
    begin:cout_test
      synth_reg # (1, extra_registers)
        c_out_extra_reg (
          .i(temp_cout),
          .ce(extra_reg_ce),
          .clr(internal_clr),
          .clk(clk),
          .o(c_out));
    end

  end
  if ((latency == 0) || (extra_registers == 0))
  begin:latency_s
    assign s = conv_s;
  end
  if (((latency == 0) || (extra_registers == 0)) &&
       (c_has_c_out == 1))
  begin:latency0
    assign c_out = temp_cout;
  end
  if (c_has_c_out == 0)
  begin:tie_dangling_cout
    assign c_out = 0;
  end
endgenerate
endmodule


module constant_e578b14849 (
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  assign op = 16'b0000000000000000;
endmodule
 



module mux_a6eee4b271 (
  input [(2 - 1):0] sel,
  input [(16 - 1):0] d0,
  input [(16 - 1):0] d1,
  input [(16 - 1):0] d2,
  input [(16 - 1):0] d3,
  output [(16 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire [(2 - 1):0] sel_1_20;
  wire [(16 - 1):0] d0_1_24;
  wire [(16 - 1):0] d1_1_27;
  wire [(16 - 1):0] d2_1_30;
  wire [(16 - 1):0] d3_1_33;
  localparam [(16 - 1):0] const_value = 16'b0000000000000000;
  reg [(16 - 1):0] pipe_20_22[0:(1 - 1)];
  initial
    begin
      pipe_20_22[0] = 16'b0000000000000000;
    end
  wire [(16 - 1):0] pipe_20_22_front_din;
  wire [(16 - 1):0] pipe_20_22_back;
  wire pipe_20_22_push_front_pop_back_en;
  reg [(16 - 1):0] unregy_join_6_1;
  assign sel_1_20 = sel;
  assign d0_1_24 = d0;
  assign d1_1_27 = d1;
  assign d2_1_30 = d2;
  assign d3_1_33 = d3;
  assign pipe_20_22_back = pipe_20_22[0];
  always @(posedge clk)
    begin:proc_pipe_20_22
      integer i;
      if (((ce == 1'b1) && (pipe_20_22_push_front_pop_back_en == 1'b1)))
        begin
          pipe_20_22[0] <= pipe_20_22_front_din;
        end
    end
  always @(d0_1_24 or d1_1_27 or d2_1_30 or d3_1_33 or sel_1_20)
    begin:proc_switch_6_1
      case (sel_1_20)
        2'b00 :
          begin
            unregy_join_6_1 = d0_1_24;
          end
        2'b01 :
          begin
            unregy_join_6_1 = d1_1_27;
          end
        2'b10 :
          begin
            unregy_join_6_1 = d2_1_30;
          end
        default:
          begin
            unregy_join_6_1 = d3_1_33;
          end
      endcase
    end
  assign pipe_20_22_front_din = unregy_join_6_1;
  assign pipe_20_22_push_front_pop_back_en = 1'b1;
  assign y = pipe_20_22_back;
endmodule
 



module shift_12819d6cbe (
  input [(16 - 1):0] ip,
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] ip_1_23;
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  reg signed [(16 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 16'b0000000000000000;
    end
  wire signed [(16 - 1):0] op_mem_46_20_front_din;
  wire signed [(16 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(17 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(16 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[15]}}, ip_1_23[15:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[16]}}, cast_internal_ip_27_3_rsh[16:2]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_4108be98c5 (
  input [(16 - 1):0] ip,
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] ip_1_23;
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  reg signed [(16 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 16'b0000000000000000;
    end
  wire signed [(16 - 1):0] op_mem_46_20_front_din;
  wire signed [(16 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(16 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_36_3_convert = {{1{ip_1_23[15]}}, ip_1_23[15:1]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_5447e0aa7e (
  input [(16 - 1):0] ip,
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] ip_1_23;
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  reg signed [(16 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 16'b0000000000000000;
    end
  wire signed [(16 - 1):0] op_mem_46_20_front_din;
  wire signed [(16 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(19 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(16 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{3{ip_1_23[15]}}, ip_1_23[15:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[18]}}, cast_internal_ip_27_3_rsh[18:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_a05534ab8e (
  input [(16 - 1):0] ip,
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] ip_1_23;
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  reg signed [(16 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 16'b0000000000000000;
    end
  wire signed [(16 - 1):0] op_mem_46_20_front_din;
  wire signed [(16 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(21 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(16 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{5{ip_1_23[15]}}, ip_1_23[15:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[20]}}, cast_internal_ip_27_3_rsh[20:6]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_1aa26d2e4f (
  input [(16 - 1):0] ip,
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] ip_1_23;
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  reg signed [(16 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 16'b0000000000000000;
    end
  wire signed [(16 - 1):0] op_mem_46_20_front_din;
  wire signed [(16 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(18 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(16 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[15]}}, ip_1_23[15:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[17]}}, cast_internal_ip_27_3_rsh[17:3]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_997986a690 (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(21 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[20]}}, cast_internal_ip_27_3_rsh[20:2]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_9f4e80fae7 (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(26 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{6{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[25]}}, cast_internal_ip_27_3_rsh[25:7]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_c6a2804ac2 (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(25 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{5{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[24]}}, cast_internal_ip_27_3_rsh[24:6]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module inverter_48d1f6b088 (
  input [(1 - 1):0] ip,
  output [(1 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire ip_1_26;
  reg op_mem_22_20[0:(4 - 1)];
  initial
    begin
      op_mem_22_20[0] = 1'b0;
      op_mem_22_20[1] = 1'b0;
      op_mem_22_20[2] = 1'b0;
      op_mem_22_20[3] = 1'b0;
    end
  wire op_mem_22_20_front_din;
  wire op_mem_22_20_back;
  wire op_mem_22_20_push_front_pop_back_en;
  localparam [(3 - 1):0] const_value = 3'b100;
  wire internal_ip_12_1_bitnot;
  assign ip_1_26 = ip;
  assign op_mem_22_20_back = op_mem_22_20[3];
  always @(posedge clk)
    begin:proc_op_mem_22_20
      integer i;
      if (((ce == 1'b1) && (op_mem_22_20_push_front_pop_back_en == 1'b1)))
        begin
          for (i=3; i>=1; i=i-1)
            begin
              op_mem_22_20[i] <= op_mem_22_20[i-1];
            end
          op_mem_22_20[0] <= op_mem_22_20_front_din;
        end
    end
  assign internal_ip_12_1_bitnot = ~ip_1_26;
  assign op_mem_22_20_front_din = internal_ip_12_1_bitnot;
  assign op_mem_22_20_push_front_pop_back_en = 1'b1;
  assign op = op_mem_22_20_back;
endmodule
 



module mux_f3921567cd (
  input [(1 - 1):0] sel,
  input [(16 - 1):0] d0,
  input [(16 - 1):0] d1,
  output [(16 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire sel_1_20;
  wire [(16 - 1):0] d0_1_24;
  wire [(16 - 1):0] d1_1_27;
  localparam [(16 - 1):0] const_value = 16'b0000000000000000;
  reg [(16 - 1):0] pipe_16_22[0:(1 - 1)];
  initial
    begin
      pipe_16_22[0] = 16'b0000000000000000;
    end
  wire [(16 - 1):0] pipe_16_22_front_din;
  wire [(16 - 1):0] pipe_16_22_back;
  wire pipe_16_22_push_front_pop_back_en;
  wire [(1 - 1):0] sel_internal_2_1_convert;
  reg [(16 - 1):0] unregy_join_6_1;
  assign sel_1_20 = sel;
  assign d0_1_24 = d0;
  assign d1_1_27 = d1;
  assign pipe_16_22_back = pipe_16_22[0];
  always @(posedge clk)
    begin:proc_pipe_16_22
      integer i;
      if (((ce == 1'b1) && (pipe_16_22_push_front_pop_back_en == 1'b1)))
        begin
          pipe_16_22[0] <= pipe_16_22_front_din;
        end
    end
  assign sel_internal_2_1_convert = {sel_1_20};
  always @(d0_1_24 or d1_1_27 or sel_internal_2_1_convert)
    begin:proc_switch_6_1
      case (sel_internal_2_1_convert)
        1'b0 :
          begin
            unregy_join_6_1 = d0_1_24;
          end
        default:
          begin
            unregy_join_6_1 = d1_1_27;
          end
      endcase
    end
  assign pipe_16_22_front_din = unregy_join_6_1;
  assign pipe_16_22_push_front_pop_back_en = 1'b1;
  assign y = pipe_16_22_back;
endmodule
 



module shift_0b767c7711 (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(21 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[20]}}, cast_internal_ip_27_3_rsh[20:3]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_18b87c12cf (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(25 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{5{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{2{cast_internal_ip_27_3_rsh[24]}}, cast_internal_ip_27_3_rsh[24:7]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_2422c3ab70 (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(23 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{3{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[22]}}, cast_internal_ip_27_3_rsh[22:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_69971e276f (
  input [(20 - 1):0] ip,
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(20 - 1):0] ip_1_23;
  localparam signed [(20 - 1):0] const_value = 20'sb00000000000000000000;
  reg signed [(20 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 20'b00000000000000000000;
    end
  wire signed [(20 - 1):0] op_mem_46_20_front_din;
  wire signed [(20 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(22 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(20 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[19]}}, ip_1_23[19:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[21]}}, cast_internal_ip_27_3_rsh[21:3]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module logical_06844c65fb (
  input [(1 - 1):0] d0,
  input [(1 - 1):0] d1,
  output [(1 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire d0_1_24;
  wire d1_1_27;
  reg latency_pipe_5_26[0:(5 - 1)];
  initial
    begin
      latency_pipe_5_26[0] = 1'b0;
      latency_pipe_5_26[1] = 1'b0;
      latency_pipe_5_26[2] = 1'b0;
      latency_pipe_5_26[3] = 1'b0;
      latency_pipe_5_26[4] = 1'b0;
    end
  wire latency_pipe_5_26_front_din;
  wire latency_pipe_5_26_back;
  wire latency_pipe_5_26_push_front_pop_back_en;
  wire bit_2_27;
  wire fully_2_1_bitnot;
  assign d0_1_24 = d0;
  assign d1_1_27 = d1;
  assign latency_pipe_5_26_back = latency_pipe_5_26[4];
  always @(posedge clk)
    begin:proc_latency_pipe_5_26
      integer i;
      if (((ce == 1'b1) && (latency_pipe_5_26_push_front_pop_back_en == 1'b1)))
        begin
          for (i=4; i>=1; i=i-1)
            begin
              latency_pipe_5_26[i] <= latency_pipe_5_26[i-1];
            end
          latency_pipe_5_26[0] <= latency_pipe_5_26_front_din;
        end
    end
  assign bit_2_27 = d0_1_24 ^ d1_1_27;
  assign fully_2_1_bitnot = ~bit_2_27;
  assign latency_pipe_5_26_front_din = fully_2_1_bitnot;
  assign latency_pipe_5_26_push_front_pop_back_en = 1'b1;
  assign y = latency_pipe_5_26_back;
endmodule
 



module inverter_66c3795ede (
  input [(1 - 1):0] ip,
  output [(1 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire ip_1_26;
  reg op_mem_22_20[0:(5 - 1)];
  initial
    begin
      op_mem_22_20[0] = 1'b0;
      op_mem_22_20[1] = 1'b0;
      op_mem_22_20[2] = 1'b0;
      op_mem_22_20[3] = 1'b0;
      op_mem_22_20[4] = 1'b0;
    end
  wire op_mem_22_20_front_din;
  wire op_mem_22_20_back;
  wire op_mem_22_20_push_front_pop_back_en;
  localparam [(3 - 1):0] const_value = 3'b101;
  wire internal_ip_12_1_bitnot;
  assign ip_1_26 = ip;
  assign op_mem_22_20_back = op_mem_22_20[4];
  always @(posedge clk)
    begin:proc_op_mem_22_20
      integer i;
      if (((ce == 1'b1) && (op_mem_22_20_push_front_pop_back_en == 1'b1)))
        begin
          for (i=4; i>=1; i=i-1)
            begin
              op_mem_22_20[i] <= op_mem_22_20[i-1];
            end
          op_mem_22_20[0] <= op_mem_22_20_front_din;
        end
    end
  assign internal_ip_12_1_bitnot = ~ip_1_26;
  assign op_mem_22_20_front_din = internal_ip_12_1_bitnot;
  assign op_mem_22_20_push_front_pop_back_en = 1'b1;
  assign op = op_mem_22_20_back;
endmodule
 



module logical_8641388092 (
  input [(1 - 1):0] d0,
  input [(1 - 1):0] d1,
  output [(1 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire d0_1_24;
  wire d1_1_27;
  reg latency_pipe_5_26[0:(1 - 1)];
  initial
    begin
      latency_pipe_5_26[0] = 1'b0;
    end
  wire latency_pipe_5_26_front_din;
  wire latency_pipe_5_26_back;
  wire latency_pipe_5_26_push_front_pop_back_en;
  wire fully_2_1_bit;
  assign d0_1_24 = d0;
  assign d1_1_27 = d1;
  assign latency_pipe_5_26_back = latency_pipe_5_26[0];
  always @(posedge clk)
    begin:proc_latency_pipe_5_26
      integer i;
      if (((ce == 1'b1) && (latency_pipe_5_26_push_front_pop_back_en == 1'b1)))
        begin
          latency_pipe_5_26[0] <= latency_pipe_5_26_front_din;
        end
    end
  assign fully_2_1_bit = d0_1_24 ^ d1_1_27;
  assign latency_pipe_5_26_front_din = fully_2_1_bit;
  assign latency_pipe_5_26_push_front_pop_back_en = 1'b1;
  assign y = latency_pipe_5_26_back;
endmodule
 



module inverter_33a63b558a (
  input [(1 - 1):0] ip,
  output [(1 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire ip_1_26;
  reg op_mem_22_20[0:(1 - 1)];
  initial
    begin
      op_mem_22_20[0] = 1'b0;
    end
  wire op_mem_22_20_front_din;
  wire op_mem_22_20_back;
  wire op_mem_22_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value = 1'b1;
  wire internal_ip_12_1_bitnot;
  assign ip_1_26 = ip;
  assign op_mem_22_20_back = op_mem_22_20[0];
  always @(posedge clk)
    begin:proc_op_mem_22_20
      integer i;
      if (((ce == 1'b1) && (op_mem_22_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_22_20[0] <= op_mem_22_20_front_din;
        end
    end
  assign internal_ip_12_1_bitnot = ~ip_1_26;
  assign op_mem_22_20_push_front_pop_back_en = 1'b0;
  assign op = internal_ip_12_1_bitnot;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xlcounter_free (ce, clr, clk, op, up, load, din, en, rst);
parameter core_name0= "";
parameter op_width= 5;
parameter op_arith= `xlSigned;
input ce, clr, clk;
input up, load;
input [op_width-1:0] din;
input en, rst;
output [op_width-1:0] op;
parameter [(8*op_width)-1:0] oneStr = { op_width{"1"}};
wire  core_sinit;
wire  core_ce;
wire [op_width-1:0] op_net;
   assign core_ce = ce & en;
   assign core_sinit = (clr | rst) & ce;
   assign op = op_net;
generate
  if (core_name0 == "cntr_11_0_096c03c2da659b51")
    begin:comp0
    cntr_11_0_096c03c2da659b51 core_instance0 (
        .clk(clk),
        .ce(core_ce),
        .sinit(core_sinit),
        .q(op_net)
      );
  end
endgenerate
endmodule


module logical_d5c14b9908 (
  input [(1 - 1):0] d0,
  input [(1 - 1):0] d1,
  output [(1 - 1):0] y,
  input clk,
  input ce,
  input clr);
  wire d0_1_24;
  wire d1_1_27;
  reg latency_pipe_5_26[0:(5 - 1)];
  initial
    begin
      latency_pipe_5_26[0] = 1'b0;
      latency_pipe_5_26[1] = 1'b0;
      latency_pipe_5_26[2] = 1'b0;
      latency_pipe_5_26[3] = 1'b0;
      latency_pipe_5_26[4] = 1'b0;
    end
  wire latency_pipe_5_26_front_din;
  wire latency_pipe_5_26_back;
  wire latency_pipe_5_26_push_front_pop_back_en;
  wire fully_2_1_bit;
  assign d0_1_24 = d0;
  assign d1_1_27 = d1;
  assign latency_pipe_5_26_back = latency_pipe_5_26[4];
  always @(posedge clk)
    begin:proc_latency_pipe_5_26
      integer i;
      if (((ce == 1'b1) && (latency_pipe_5_26_push_front_pop_back_en == 1'b1)))
        begin
          for (i=4; i>=1; i=i-1)
            begin
              latency_pipe_5_26[i] <= latency_pipe_5_26[i-1];
            end
          latency_pipe_5_26[0] <= latency_pipe_5_26_front_din;
        end
    end
  assign fully_2_1_bit = d0_1_24 ^ d1_1_27;
  assign latency_pipe_5_26_front_din = fully_2_1_bit;
  assign latency_pipe_5_26_push_front_pop_back_en = 1'b1;
  assign y = latency_pipe_5_26_back;
endmodule
 



module accum_8dccba219b (
  input [(10 - 1):0] b,
  output [(10 - 1):0] q,
  input clk,
  input ce,
  input clr);
  wire [(10 - 1):0] b_17_24;
  reg [(10 - 1):0] accum_reg_41_23 = 10'b0000000000;
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  localparam [(1 - 1):0] const_value_x_000001 = 1'b1;
  assign b_17_24 = b;
  always @(posedge clk)
    begin:proc_accum_reg_41_23
      if ((ce == 1'b1))
        begin
          accum_reg_41_23 <= accum_reg_41_23 + b_17_24;
        end
    end
  assign q = accum_reg_41_23;
endmodule
 



module constant_ae323e07fc (
  output [(1 - 1):0] op,
  input clk,
  input ce,
  input clr);
  assign op = 1'b0;
endmodule
 



module constant_9e4532c332 (
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  assign op = 18'b000000000000000000;
endmodule
 



module constant_f46b665cdd (
  output [(10 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(10 - 1):0] const_value = 10'b0100000000;
  assign op = 10'b0100000000;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xldpram (dina, addra, wea, a_ce, a_clk, rsta, ena, douta, dinb, addrb, web, b_ce, b_clk, rstb, enb, doutb);
parameter core_name0= "";
parameter c_width_a= 13;
parameter c_address_width_a= 4;
parameter c_width_b= 13;
parameter c_address_width_b= 4;
parameter latency= 1;

input [c_width_a-1:0] dina;
input [c_address_width_a-1:0] addra;
input wea, a_ce, a_clk, rsta, ena;
input [c_width_b-1:0] dinb;
input [c_address_width_b-1:0] addrb;
input web, b_ce, b_clk, rstb, enb;
output [c_width_a-1:0] douta;
output [c_width_b-1:0] doutb;
wire [c_address_width_a-1:0] core_addra;
wire [c_address_width_b-1:0] core_addrb;
wire [c_width_a-1:0] core_dina,core_douta,dly_douta;
wire [c_width_b-1:0] core_dinb,core_doutb,dly_doutb;
wire  core_wea,core_web;
wire  core_a_ce,core_b_ce;
wire  sinita,sinitb;
assign core_addra = addra;
assign core_dina = dina;
assign douta = dly_douta;
assign core_wea = wea;
assign core_a_ce = a_ce & ena;
assign sinita = rsta & a_ce;
assign core_addrb = addrb;
assign core_dinb = dinb;
assign doutb = dly_doutb;
assign core_web = web;
assign core_b_ce = b_ce & enb;
assign sinitb = rstb  & b_ce;
generate
  if (core_name0 == "bmg_62_f5dda5f8f757e285")
    begin:comp0
    bmg_62_f5dda5f8f757e285 core_instance0 (
                              .addra(core_addra),
      .clka(a_clk),
      .addrb(core_addrb),
      .clkb(b_clk),
      .dina(core_dina),
      .wea(core_wea),
      .dinb(core_dinb),
      .web(core_web),
      .ena(core_a_ce),
      .enb(core_b_ce),
      .douta(core_douta),
      .doutb(core_doutb)
                );
  end
if (latency > 2)
  begin:latency_test_instA
   synth_reg # (c_width_a, latency-2)
   regA(
     .i(core_douta),
     .ce(core_a_ce),
     .clr(1'b0),
     .clk(a_clk),
     .o(dly_douta));
  end
if (latency > 2)
  begin:latency_test_instB
   synth_reg # (c_width_b, latency-2)
   regB(
     .i(core_doutb),
     .ce(core_b_ce),
     .clr(1'b0),
     .clk(b_clk),
     .o(dly_doutb));
  end

if (latency <= 2)
   begin:latency1
     assign dly_douta = core_douta;
     assign dly_doutb = core_doutb;
   end
endgenerate
endmodule


module constant_ffa119e374 (
  output [(25 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(25 - 1):0] const_value = 25'sb0000000000000000000000000;
  assign op = 25'b0000000000000000000000000;
endmodule
 



module opmode_2a00e03ade (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b00100000000000110101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b00100;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000110101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b00100000000000110101;
  assign op = 20'b00100000000000110101;
endmodule
 



module opmode_6aca2f0a6e (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b01100000000000010101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b01100;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000010101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b01100000000000010101;
  assign op = 20'b01100000000000010101;
endmodule
 



module opmode_bddb7c5c56 (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b00000000000000010101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b00000;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000010101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b00000000000000010101;
  assign op = 20'b00000000000000010101;
endmodule
 



module constant_f1b4aa180c (
  output [(48 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(48 - 1):0] const_value = 48'sb000000000000000000000000000011111111111111111111;
  assign op = 48'b000000000000000000000000000011111111111111111111;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
module xlsprom (addr, en, rst, ce, clk, data);
   parameter core_name0= "";
   parameter latency= 1;
   parameter c_width= 12;
   parameter c_address_width= 4;
   input [c_address_width-1:0] addr;
   input en;
   input rst;
   input ce;
   input clk;
   output [c_width-1:0] data;
   wire [c_address_width-1:0] core_addr;
   wire [c_width-1:0] core_data_out;
   wire  core_ce, sinit;
   assign core_addr = addr;

   assign core_ce = ce & en;
   assign sinit = rst & ce;
generate
if (core_name0 == "bmg_62_317c2c92f6abd64e")
begin:comp1
  bmg_62_317c2c92f6abd64e core_instance0 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_7e8eaec1029d9f73")
begin:comp3
  bmg_62_7e8eaec1029d9f73 core_instance1 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_bcd177a5609f0846")
begin:comp5
  bmg_62_bcd177a5609f0846 core_instance2 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_fa58db69dab254f0")
begin:comp7
  bmg_62_fa58db69dab254f0 core_instance3 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_d343f1ce4db1823a")
begin:comp9
  bmg_62_d343f1ce4db1823a core_instance4 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_d6e6f44a8de25b69")
begin:comp11
  bmg_62_d6e6f44a8de25b69 core_instance5 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_b6c0b5dfd1d89cee")
begin:comp13
  bmg_62_b6c0b5dfd1d89cee core_instance6 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
if (core_name0 == "bmg_62_d909ce02585bca26")
begin:comp15
  bmg_62_d909ce02585bca26 core_instance7 (
                    .addra(core_addr),
    .clka(clk),
    .ena(core_ce),
    .douta(core_data_out)
        );
end
 if (latency > 1)
     begin:latency_test
        synth_reg # (c_width, latency-1)
          reg1 (
               .i(core_data_out),
               .ce(core_ce),
               .clr(1'b0),
               .clk(clk),
               .o(data));
     end

   if (latency <= 1)
     begin:latency_1
        assign data = core_data_out;
     end
endgenerate
endmodule


module constant_6692871198 (
  output [(10 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(10 - 1):0] const_value = 10'b0000001100;
  assign op = 10'b0000001100;
endmodule
 



module opmode_3711ab4973 (
  output [(20 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam [(1 - 1):0] const_value = 1'b0;
  localparam [(20 - 1):0] const_value_x_000000 = 20'b00000000000000000101;
  localparam [(5 - 1):0] const_value_x_000001 = 5'b00000;
  localparam [(3 - 1):0] const_value_x_000002 = 3'b000;
  localparam [(11 - 1):0] const_value_x_000003 = 11'b00000000101;
  localparam [(20 - 1):0] const_value_x_000004 = 20'b00000000000000000101;
  assign op = 20'b00000000000000000101;
endmodule
 



module reinterpret_84fa2b7df8 (
  input [(48 - 1):0] input_port,
  output [(48 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(48 - 1):0] input_port_1_40;
  wire [(48 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 


//-----------------------------------------------------------------
// System Generator version 13.2 VERILOG source file.
//
// Copyright(C) 2011 by Xilinx, Inc.  All rights reserved.  This
// text/file contains proprietary, confidential information of Xilinx,
// Inc., is distributed under license from Xilinx, Inc., and may be used,
// copied and/or disclosed only pursuant to the terms of a valid license
// agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
// this text/file solely for design, simulation, implementation and
// creation of design files limited to Xilinx devices or technologies.
// Use with non-Xilinx devices or technologies is expressly prohibited
// and immediately terminates your license unless covered by a separate
// agreement.
//
// Xilinx is providing this design, code, or information "as is" solely
// for use in developing programs and solutions for Xilinx devices.  By
// providing this design, code, or information as one possible
// implementation of this feature, application or standard, Xilinx is
// making no representation that this implementation is free from any
// claims of infringement.  You are responsible for obtaining any rights
// you may require for your implementation.  Xilinx expressly disclaims
// any warranty whatsoever with respect to the adequacy of the
// implementation, including but not limited to warranties of
// merchantability or fitness for a particular purpose.
//
// Xilinx products are not intended for use in life support appliances,
// devices, or systems.  Use in such applications is expressly prohibited.
//
// Any modifications that are made to the source code are done at the user's
// sole risk and will be unsupported.
//
// This copyright and support notice must be retained as part of this
// text at all times.  (c) Copyright 1995-2011 Xilinx, Inc.  All rights
// reserved.
//-----------------------------------------------------------------
`timescale 1 ns / 10 ps
module xlregister (d, rst, en, ce, clk, q);
   parameter d_width = 5;
   parameter init_value = 'b0;

   input [d_width-1:0] d;
   input rst, en, ce, clk;
   output [d_width-1:0] q;
   wire internal_clr, internal_ce;
   assign internal_clr = rst & ce;
   assign internal_ce  = ce & en;

   synth_reg_w_init #(.width(d_width),
                      .init_index(2),
                      .init_value(init_value),
                      .latency(1))
   synth_reg_inst(.i(d),
                  .ce(internal_ce),
                  .clr(internal_clr),
                  .clk(clk),
                  .o(q));
endmodule


module reinterpret_9f3848bc50 (
  input [(5 - 1):0] input_port,
  output [(5 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(5 - 1):0] input_port_1_40;
  wire signed [(5 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_b41d29f193 (
  input [(10 - 1):0] input_port,
  output [(10 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(10 - 1):0] input_port_1_40;
  wire [(10 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_3f5d978749 (
  input [(6 - 1):0] input_port,
  output [(6 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(6 - 1):0] input_port_1_40;
  assign input_port_1_40 = input_port;
  assign output_port = input_port_1_40;
endmodule
 



module reinterpret_8eee8341d8 (
  input [(7 - 1):0] input_port,
  output [(7 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(7 - 1):0] input_port_1_40;
  wire signed [(7 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_fd8afbe046 (
  input [(10 - 1):0] input_port,
  output [(10 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(10 - 1):0] input_port_1_40;
  wire signed [(10 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_94dfdafd95 (
  input [(12 - 1):0] input_port,
  output [(12 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(12 - 1):0] input_port_1_40;
  wire signed [(12 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module shift_85f5a5ebd0 (
  input [(10 - 1):0] ip,
  output [(10 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(10 - 1):0] ip_1_23;
  localparam signed [(10 - 1):0] const_value = 10'sb0000000000;
  reg signed [(10 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 10'b0000000000;
    end
  wire signed [(10 - 1):0] op_mem_46_20_front_din;
  wire signed [(10 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(14 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(10 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{4{ip_1_23[9]}}, ip_1_23[9:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[13]}}, cast_internal_ip_27_3_rsh[13:5]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_39b9422678 (
  input [(12 - 1):0] ip,
  output [(12 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(12 - 1):0] ip_1_23;
  localparam signed [(12 - 1):0] const_value = 12'sb000000000000;
  reg signed [(12 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 12'b000000000000;
    end
  wire signed [(12 - 1):0] op_mem_46_20_front_din;
  wire signed [(12 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(16 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(12 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{4{ip_1_23[11]}}, ip_1_23[11:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[15]}}, cast_internal_ip_27_3_rsh[15:5]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_af45bff5a0 (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(23 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(18 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{5{ip_1_23[17]}}, ip_1_23[17:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[22]}}, cast_internal_ip_27_3_rsh[22:6]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_13f7182392 (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(25 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(18 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{7{ip_1_23[17]}}, ip_1_23[17:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[24]}}, cast_internal_ip_27_3_rsh[24:8]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_35e4e03aef (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(30 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(18 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{12{ip_1_23[17]}}, ip_1_23[17:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[29]}}, cast_internal_ip_27_3_rsh[29:13]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module reinterpret_feb184a5ad (
  input [(8 - 1):0] input_port,
  output [(8 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(8 - 1):0] input_port_1_40;
  wire signed [(8 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_34f6390c19 (
  input [(9 - 1):0] input_port,
  output [(9 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire signed [(9 - 1):0] input_port_1_40;
  wire [(9 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_016d92ab20 (
  input [(7 - 1):0] input_port,
  output [(7 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(7 - 1):0] input_port_1_40;
  assign input_port_1_40 = input_port;
  assign output_port = input_port_1_40;
endmodule
 



module reinterpret_6200c8761b (
  input [(15 - 1):0] input_port,
  output [(15 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(15 - 1):0] input_port_1_40;
  wire signed [(15 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_55833616ec (
  input [(13 - 1):0] input_port,
  output [(13 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(13 - 1):0] input_port_1_40;
  wire signed [(13 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module shift_447ff429c9 (
  input [(15 - 1):0] ip,
  output [(15 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(15 - 1):0] ip_1_23;
  localparam signed [(15 - 1):0] const_value = 15'sb000000000000000;
  reg signed [(15 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 15'b000000000000000;
    end
  wire signed [(15 - 1):0] op_mem_46_20_front_din;
  wire signed [(15 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(22 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(15 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{7{ip_1_23[14]}}, ip_1_23[14:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[21]}}, cast_internal_ip_27_3_rsh[21:8]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_05a6d83f8c (
  input [(16 - 1):0] ip,
  output [(16 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(16 - 1):0] ip_1_23;
  localparam signed [(16 - 1):0] const_value = 16'sb0000000000000000;
  reg signed [(16 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 16'b0000000000000000;
    end
  wire signed [(16 - 1):0] op_mem_46_20_front_din;
  wire signed [(16 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(23 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(16 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{7{ip_1_23[15]}}, ip_1_23[15:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[22]}}, cast_internal_ip_27_3_rsh[22:8]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_ed17a56c3a (
  input [(13 - 1):0] ip,
  output [(13 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(13 - 1):0] ip_1_23;
  localparam signed [(13 - 1):0] const_value = 13'sb0000000000000;
  reg signed [(13 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 13'b0000000000000;
    end
  wire signed [(13 - 1):0] op_mem_46_20_front_din;
  wire signed [(13 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(20 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(13 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{7{ip_1_23[12]}}, ip_1_23[12:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[19]}}, cast_internal_ip_27_3_rsh[19:8]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_e2f66c8512 (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(19 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(18 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[17]}}, ip_1_23[17:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[18]}}, cast_internal_ip_27_3_rsh[18:2]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_e2efd1e2c2 (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(22 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(18 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{4{ip_1_23[17]}}, ip_1_23[17:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[21]}}, cast_internal_ip_27_3_rsh[21:5]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_42c206eba8 (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(20 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(18 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{2{ip_1_23[17]}}, ip_1_23[17:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[19]}}, cast_internal_ip_27_3_rsh[19:3]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module reinterpret_87da68fdf8 (
  input [(18 - 1):0] input_port,
  output [(18 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(18 - 1):0] input_port_1_40;
  wire signed [(18 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module shift_572bccbff0 (
  input [(18 - 1):0] ip,
  output [(18 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(18 - 1):0] ip_1_23;
  localparam signed [(18 - 1):0] const_value = 18'sb000000000000000000;
  reg signed [(18 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 18'b000000000000000000;
    end
  wire signed [(18 - 1):0] op_mem_46_20_front_din;
  wire signed [(18 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = ip_1_23;
endmodule
 



module shift_5d11edb312 (
  input [(21 - 1):0] ip,
  output [(21 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(21 - 1):0] ip_1_23;
  localparam signed [(21 - 1):0] const_value = 21'sb000000000000000000000;
  reg signed [(21 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 21'b000000000000000000000;
    end
  wire signed [(21 - 1):0] op_mem_46_20_front_din;
  wire signed [(21 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(25 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(21 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{4{ip_1_23[20]}}, ip_1_23[20:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[24]}}, cast_internal_ip_27_3_rsh[24:5]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_e97ef80d67 (
  input [(21 - 1):0] ip,
  output [(21 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(21 - 1):0] ip_1_23;
  localparam signed [(21 - 1):0] const_value = 21'sb000000000000000000000;
  reg signed [(21 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 21'b000000000000000000000;
    end
  wire signed [(21 - 1):0] op_mem_46_20_front_din;
  wire signed [(21 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(27 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(21 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{6{ip_1_23[20]}}, ip_1_23[20:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[26]}}, cast_internal_ip_27_3_rsh[26:7]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module reinterpret_81e883cd82 (
  input [(9 - 1):0] input_port,
  output [(9 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(9 - 1):0] input_port_1_40;
  wire signed [(9 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_79f2a2c095 (
  input [(17 - 1):0] input_port,
  output [(17 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(17 - 1):0] input_port_1_40;
  wire signed [(17 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module shift_0be5f5842d (
  input [(17 - 1):0] ip,
  output [(17 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(17 - 1):0] ip_1_23;
  localparam signed [(17 - 1):0] const_value = 17'sb00000000000000000;
  reg signed [(17 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 17'b00000000000000000;
    end
  wire signed [(17 - 1):0] op_mem_46_20_front_din;
  wire signed [(17 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(24 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(17 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{7{ip_1_23[16]}}, ip_1_23[16:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[23]}}, cast_internal_ip_27_3_rsh[23:8]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_0b3d34a3d5 (
  input [(19 - 1):0] ip,
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] ip_1_23;
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000000;
  reg signed [(19 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 19'b0000000000000000000;
    end
  wire signed [(19 - 1):0] op_mem_46_20_front_din;
  wire signed [(19 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(20 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(19 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{1{ip_1_23[18]}}, ip_1_23[18:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[19]}}, cast_internal_ip_27_3_rsh[19:2]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_bc177199ac (
  input [(19 - 1):0] ip,
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] ip_1_23;
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000000;
  reg signed [(19 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 19'b0000000000000000000;
    end
  wire signed [(19 - 1):0] op_mem_46_20_front_din;
  wire signed [(19 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(22 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(19 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{3{ip_1_23[18]}}, ip_1_23[18:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[21]}}, cast_internal_ip_27_3_rsh[21:4]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module reinterpret_7fc77e4dea (
  input [(11 - 1):0] input_port,
  output [(11 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(11 - 1):0] input_port_1_40;
  wire signed [(11 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module reinterpret_888f8372ca (
  input [(19 - 1):0] input_port,
  output [(19 - 1):0] output_port,
  input clk,
  input ce,
  input clr);
  wire [(19 - 1):0] input_port_1_40;
  wire signed [(19 - 1):0] output_port_5_5_force;
  assign input_port_1_40 = input_port;
  assign output_port_5_5_force = input_port_1_40;
  assign output_port = output_port_5_5_force;
endmodule
 



module shift_ca62c0bb60 (
  input [(19 - 1):0] ip,
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] ip_1_23;
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000000;
  reg signed [(19 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 19'b0000000000000000000;
    end
  wire signed [(19 - 1):0] op_mem_46_20_front_din;
  wire signed [(19 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  wire signed [(26 - 1):0] cast_internal_ip_27_3_rsh;
  wire signed [(19 - 1):0] cast_internal_ip_36_3_convert;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign cast_internal_ip_27_3_rsh = {{7{ip_1_23[18]}}, ip_1_23[18:0]};
  assign cast_internal_ip_36_3_convert = {{1{cast_internal_ip_27_3_rsh[25]}}, cast_internal_ip_27_3_rsh[25:8]};
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = cast_internal_ip_36_3_convert;
endmodule
 



module shift_c01ac94bc0 (
  input [(19 - 1):0] ip,
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  wire signed [(19 - 1):0] ip_1_23;
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000000;
  reg signed [(19 - 1):0] op_mem_46_20[0:(1 - 1)];
  initial
    begin
      op_mem_46_20[0] = 19'b0000000000000000000;
    end
  wire signed [(19 - 1):0] op_mem_46_20_front_din;
  wire signed [(19 - 1):0] op_mem_46_20_back;
  wire op_mem_46_20_push_front_pop_back_en;
  localparam [(1 - 1):0] const_value_x_000000 = 1'b1;
  assign ip_1_23 = ip;
  assign op_mem_46_20_back = op_mem_46_20[0];
  always @(posedge clk)
    begin:proc_op_mem_46_20
      integer i;
      if (((ce == 1'b1) && (op_mem_46_20_push_front_pop_back_en == 1'b1)))
        begin
          op_mem_46_20[0] <= op_mem_46_20_front_din;
        end
    end
  assign op_mem_46_20_push_front_pop_back_en = 1'b0;
  assign op = ip_1_23;
endmodule
 



module constant_b93fdaba45 (
  output [(19 - 1):0] op,
  input clk,
  input ce,
  input clr);
  localparam signed [(19 - 1):0] const_value = 19'sb0000000000000000011;
  assign op = 19'b0000000000000000011;
endmodule
 

// Generated from Simulink block "duc_341MHz/HBF1 Filter/0.137184776786555_1"

module x0_137184776786555_1_module_cd5be5787f (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [16:0] in_x0;
  output [19:0] out_x0;

  wire [18:0] addsub1_s_net;
  wire [25:0] addsub2_s_net;
  wire [16:0] addsub2_s_net_x1;
  wire [21:0] addsub3_s_net;
  wire [29:0] addsub4_s_net;
  wire [0:0] ce_1_sg_x0;
  wire [0:0] clk_1_sg_x0;
  wire [21:0] convert2_dout_net;
  wire [18:0] convert3_dout_net;
  wire [25:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [31:0] convert6_dout_net;
  wire [19:0] convert7_dout_net_x0;
  wire [18:0] delay_q_net;
  wire [18:0] shift1_op_net;
  wire [31:0] shift2_op_net;
  wire [18:0] shift3_op_net;
  wire [18:0] shift4_op_net;
  wire [21:0] shift5_op_net;
  wire [25:0] shift6_op_net;
  wire [21:0] shift7_op_net;
  wire [29:0] shift9_op_net;

  assign ce_1_sg_x0 = ce_1;
  assign clk_1_sg_x0 = clk_1;
  assign addsub2_s_net_x1 = in_x0;
  assign out_x0 = convert7_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(19))
  addsub1 (
    .a(shift1_op_net),
    .b(shift4_op_net),
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(24),
    .a_width(26),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(27),
    .core_name0("addsb_11_0_b66a0112ed103095"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(27),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(24),
    .s_width(26))
  addsub2 (
    .a(shift6_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(20),
    .a_width(22),
    .b_arith(`xlSigned),
    .b_bin_pt(20),
    .b_width(22),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(23),
    .core_name0("addsb_11_0_21d479b4f0f8b36a"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(23),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(20),
    .s_width(22))
  addsub3 (
    .a(shift7_op_net),
    .b(shift5_op_net),
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(28),
    .a_width(30),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(31),
    .core_name0("addsb_11_0_725cd2adfb370cbc"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(31),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(28),
    .s_width(30))
  addsub4 (
    .a(shift9_op_net),
    .b(delay_q_net),
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(20),
    .dout_width(22),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .din(addsub2_s_net_x1),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .din(addsub2_s_net_x1),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(20),
    .din_width(22),
    .dout_arith(2),
    .dout_bin_pt(24),
    .dout_width(26),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(24),
    .din_width(26),
    .dout_arith(2),
    .dout_bin_pt(28),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(28),
    .din_width(30),
    .dout_arith(2),
    .dout_bin_pt(30),
    .dout_width(32),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .din(addsub4_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(30),
    .din_width(32),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .din(shift2_op_net),
    .en(1'b1),
    .dout(convert7_dout_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(19))
  delay (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .d(shift3_op_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  shift_3fa2663220  shift1 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift1_op_net)
  );

  shift_d13a4b790a  shift2 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift2_op_net)
  );

  shift_091db5281e  shift3 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_091db5281e  shift4 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift4_op_net)
  );

  shift_6a42af8a02  shift5 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift5_op_net)
  );

  shift_860703fe20  shift6 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift6_op_net)
  );

  shift_773079a115  shift7 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift7_op_net)
  );

  shift_2b728df15b  shift9 (
    .ce(ce_1_sg_x0),
    .clk(clk_1_sg_x0),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift9_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF1 Filter/TDM"

module tdm_module_2d0f22538c (
  ce_1,
  clk_1,
  in1,
  in2,
  out_x0,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [15:0] in2;
  input [0:0] sel;
  output [15:0] out_x0;

  wire [0:0] ce_1_sg_x3;
  wire [0:0] clk_1_sg_x3;
  wire [15:0] delay14_q_net_x0;
  wire [15:0] delay6_q_net_x0;
  wire [15:0] mux1_y_net_x0;
  wire [0:0] sel_counter_op_net_x0;

  assign ce_1_sg_x3 = ce_1;
  assign clk_1_sg_x3 = clk_1;
  assign delay14_q_net_x0 = in1;
  assign delay6_q_net_x0 = in2;
  assign out_x0 = mux1_y_net_x0;
  assign sel_counter_op_net_x0 = sel;


  mux_1f6c522247  mux1 (
    .ce(ce_1_sg_x3),
    .clk(clk_1_sg_x3),
    .clr(1'b0),
    .d0(delay14_q_net_x0),
    .d1(delay6_q_net_x0),
    .sel(sel_counter_op_net_x0),
    .y(mux1_y_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF1 Filter/coef1_1"

module coef1_1_module_602e95181f (
  a,
  ce_1,
  clk_1,
  d,
  out_x0
);

  input [15:0] a;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] d;
  output [19:0] out_x0;

  wire [0:0] ce_1_sg_x9;
  wire [0:0] clk_1_sg_x9;
  wire [47:0] constant1_op_net;
  wire [17:0] constant_op_net;
  wire [17:0] convert1_dout_net;
  wire [24:0] convert2_dout_net;
  wire [19:0] convert3_dout_net_x0;
  wire [24:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [15:0] delay30_q_net_x0;
  wire [15:0] delay7_q_net_x0;
  wire [47:0] dsp48e1_4_p_net;
  wire [19:0] opmode1_op_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [47:0] reinterpret2_output_port_net;
  wire [15:0] reinterpret3_output_port_net;
  wire [15:0] reinterpret_output_port_net;

  assign delay30_q_net_x0 = a;
  assign ce_1_sg_x9 = ce_1;
  assign clk_1_sg_x9 = clk_1;
  assign delay7_q_net_x0 = d;
  assign out_x0 = convert3_dout_net_x0;


  constant_57097453ee  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_cfe3e81a1c  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x9),
    .clk(clk_1_sg_x9),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(32),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x9),
    .clk(clk_1_sg_x9),
    .clr(1'b0),
    .din(reinterpret2_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x9),
    .clk(clk_1_sg_x9),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x9),
    .clk(clk_1_sg_x9),
    .clr(1'b0),
    .din(convert2_dout_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert5_dout_net),
    .alumode(4'b0000),
    .b(convert1_dout_net),
    .c(constant1_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x9),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x9),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_4_p_net)
  );

  opmode_6481474c6d  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_81b71e1f8b  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay30_q_net_x0),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant_op_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_4_p_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay7_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF1 Filter/coef3_1"

module coef3_1_module_b3d2e53de6 (
  a,
  ce_1,
  clk_1,
  d,
  out_x0
);

  input [15:0] a;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] d;
  output [19:0] out_x0;

  wire [0:0] ce_1_sg_x12;
  wire [0:0] clk_1_sg_x12;
  wire [47:0] constant1_op_net;
  wire [17:0] constant_op_net;
  wire [17:0] convert1_dout_net;
  wire [24:0] convert2_dout_net;
  wire [19:0] convert3_dout_net_x0;
  wire [24:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [15:0] delay5_q_net_x0;
  wire [15:0] delay_q_net_x0;
  wire [47:0] dsp48e1_4_p_net;
  wire [19:0] opmode1_op_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [47:0] reinterpret2_output_port_net;
  wire [15:0] reinterpret3_output_port_net;
  wire [15:0] reinterpret_output_port_net;

  assign delay5_q_net_x0 = a;
  assign ce_1_sg_x12 = ce_1;
  assign clk_1_sg_x12 = clk_1;
  assign delay_q_net_x0 = d;
  assign out_x0 = convert3_dout_net_x0;


  constant_57097453ee  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_8b9eab6fc5  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x12),
    .clk(clk_1_sg_x12),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(32),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x12),
    .clk(clk_1_sg_x12),
    .clr(1'b0),
    .din(reinterpret2_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x12),
    .clk(clk_1_sg_x12),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x12),
    .clk(clk_1_sg_x12),
    .clr(1'b0),
    .din(convert2_dout_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert5_dout_net),
    .alumode(4'b0000),
    .b(convert1_dout_net),
    .c(constant1_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x12),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x12),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_4_p_net)
  );

  opmode_6481474c6d  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_81b71e1f8b  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay5_q_net_x0),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant_op_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_4_p_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF1 Filter/coef3_2"

module coef3_2_module_4ed75c20c8 (
  a,
  ce_1,
  clk_1,
  d,
  out_x0
);

  input [15:0] a;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] d;
  output [19:0] out_x0;

  wire [0:0] ce_1_sg_x13;
  wire [0:0] clk_1_sg_x13;
  wire [47:0] constant1_op_net;
  wire [17:0] constant_op_net;
  wire [17:0] convert1_dout_net;
  wire [24:0] convert2_dout_net;
  wire [19:0] convert3_dout_net_x0;
  wire [24:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [15:0] delay2_q_net_x0;
  wire [15:0] delay3_q_net_x0;
  wire [47:0] dsp48e1_4_p_net;
  wire [19:0] opmode1_op_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [47:0] reinterpret2_output_port_net;
  wire [15:0] reinterpret3_output_port_net;
  wire [15:0] reinterpret_output_port_net;

  assign delay3_q_net_x0 = a;
  assign ce_1_sg_x13 = ce_1;
  assign clk_1_sg_x13 = clk_1;
  assign delay2_q_net_x0 = d;
  assign out_x0 = convert3_dout_net_x0;


  constant_57097453ee  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_e1a6144063  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x13),
    .clk(clk_1_sg_x13),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(32),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x13),
    .clk(clk_1_sg_x13),
    .clr(1'b0),
    .din(reinterpret2_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x13),
    .clk(clk_1_sg_x13),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x13),
    .clk(clk_1_sg_x13),
    .clr(1'b0),
    .din(convert2_dout_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert5_dout_net),
    .alumode(4'b0000),
    .b(convert1_dout_net),
    .c(constant1_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x13),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x13),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_4_p_net)
  );

  opmode_6481474c6d  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_81b71e1f8b  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay3_q_net_x0),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant_op_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_4_p_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay2_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF1 Filter/reorder1"

module reorder1_module_737d7300a7 (
  addr,
  ce_1,
  clk_1,
  in1,
  in2,
  out1,
  out2
);

  input [3:0] addr;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [15:0] in2;
  output [15:0] out1;
  output [15:0] out2;

  wire [3:0] addr_counter_op_net_x0;
  wire [0:0] ce_1_sg_x18;
  wire [0:0] clk_1_sg_x18;
  wire [31:0] concat_y_net;
  wire [0:0] constant4_op_net;
  wire [15:0] delay1_q_net_x0;
  wire [3:0] delay2_q_net;
  wire [15:0] delay_q_net_x0;
  wire [31:0] dual_port_ram_doutb_net;
  wire [15:0] mux1_y_net_x2;
  wire [15:0] mux1_y_net_x3;
  wire [15:0] reinterpret1_output_port_net;
  wire [15:0] reinterpret8_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [15:0] reinterpret_output_port_net;
  wire [3:0] rom_data_net;
  wire [15:0] slice4_y_net;
  wire [15:0] slice5_y_net;

  assign addr_counter_op_net_x0 = addr;
  assign ce_1_sg_x18 = ce_1;
  assign clk_1_sg_x18 = clk_1;
  assign mux1_y_net_x2 = in1;
  assign mux1_y_net_x3 = in2;
  assign out1 = delay_q_net_x0;
  assign out2 = delay1_q_net_x0;


  concat_7e18b92ffa  concat (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .in0(reinterpret_output_port_net),
    .in1(reinterpret1_output_port_net),
    .y(concat_y_net)
  );

  constant_5e90e4a8ec  constant4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant4_op_net)
  );

  xldelay #(

    .latency(6),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x18),
    .clk(clk_1_sg_x18),
    .d(reinterpret8_output_port_net),
    .en(1'b1),
    .q(delay_q_net_x0)
  );

  xldelay #(

    .latency(6),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x18),
    .clk(clk_1_sg_x18),
    .d(reinterpret9_output_port_net),
    .en(1'b1),
    .q(delay1_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(4))
  delay2 (
    .ce(ce_1_sg_x18),
    .clk(clk_1_sg_x18),
    .d(addr_counter_op_net_x0),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldpram_dist #(

    .addr_width(4),
    .c_address_width(4),
    .c_width(32),
    .core_name0("dmg_62_e299ff50184bf038"),
    .latency(1))
  dual_port_ram (
    .a_ce(ce_1_sg_x18),
    .a_clk(clk_1_sg_x18),
    .addra(delay2_q_net),
    .addrb(rom_data_net),
    .b_ce(ce_1_sg_x18),
    .b_clk(clk_1_sg_x18),
    .dina(concat_y_net),
    .ena(1'b1),
    .enb(1'b1),
    .wea(constant4_op_net),
    .doutb(dual_port_ram_doutb_net)
  );

  reinterpret_2824f666f2  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(mux1_y_net_x2),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_2824f666f2  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(mux1_y_net_x3),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_dee95c6dbb  reinterpret8 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice4_y_net),
    .output_port(reinterpret8_output_port_net)
  );

  reinterpret_dee95c6dbb  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice5_y_net),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom_dist #(

    .addr_width(4),
    .c_address_width(4),
    .c_width(4),
    .core_name0("dmg_62_c25ab22a2e12a0dd"),
    .latency(1))
  rom (
    .addr(delay2_q_net),
    .ce(ce_1_sg_x18),
    .clk(clk_1_sg_x18),
    .en(1'b1),
    .data(rom_data_net)
  );

  xlslice #(

    .new_lsb(16),
    .new_msb(31),
    .x_width(32),
    .y_width(16))
  slice4 (
    .x(dual_port_ram_doutb_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(15),
    .x_width(32),
    .y_width(16))
  slice5 (
    .x(dual_port_ram_doutb_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF1 Filter"

module hbf1_filter_module_d6c24d2777 (
  ce_1,
  clk_1,
  in1,
  in2,
  in3,
  out1,
  out2,
  out3,
  out4,
  out5,
  out6,
  rst,
  valid_out
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [15:0] in2;
  input [15:0] in3;
  input [0:0] rst;
  output [15:0] out1;
  output [15:0] out2;
  output [15:0] out3;
  output [15:0] out4;
  output [15:0] out5;
  output [15:0] out6;
  output [0:0] valid_out;

  wire [3:0] addr_counter1_op_net_x0;
  wire [3:0] addr_counter_op_net_x1;
  wire [19:0] addsub10_s_net;
  wire [19:0] addsub11_s_net;
  wire [19:0] addsub12_s_net;
  wire [19:0] addsub13_s_net;
  wire [16:0] addsub16_s_net_x0;
  wire [19:0] addsub17_s_net;
  wire [16:0] addsub2_s_net_x1;
  wire [19:0] addsub4_s_net;
  wire [19:0] addsub5_s_net;
  wire [19:0] addsub6_s_net;
  wire [16:0] addsub8_s_net_x0;
  wire [19:0] addsub9_s_net;
  wire [0:0] ce_1_sg_x21;
  wire [0:0] clk_1_sg_x21;
  wire [15:0] convert1_dout_net;
  wire [15:0] convert2_dout_net;
  wire [15:0] convert3_dout_net_x0;
  wire [19:0] convert3_dout_net_x1;
  wire [19:0] convert3_dout_net_x2;
  wire [19:0] convert3_dout_net_x3;
  wire [19:0] convert3_dout_net_x4;
  wire [19:0] convert3_dout_net_x5;
  wire [19:0] convert3_dout_net_x6;
  wire [19:0] convert3_dout_net_x7;
  wire [19:0] convert3_dout_net_x8;
  wire [19:0] convert3_dout_net_x9;
  wire [15:0] convert4_dout_net_x0;
  wire [15:0] convert5_dout_net_x0;
  wire [19:0] convert7_dout_net_x0;
  wire [19:0] convert7_dout_net_x1;
  wire [19:0] convert7_dout_net_x2;
  wire [15:0] convert_dout_net;
  wire [15:0] delay10_q_net_x0;
  wire [15:0] delay11_q_net_x0;
  wire [15:0] delay12_q_net_x0;
  wire [15:0] delay13_q_net_x0;
  wire [15:0] delay14_q_net_x0;
  wire [15:0] delay15_q_net_x0;
  wire [15:0] delay16_q_net;
  wire [15:0] delay17_q_net_x0;
  wire [15:0] delay18_q_net_x0;
  wire [15:0] delay19_q_net_x0;
  wire [15:0] delay1_q_net;
  wire [15:0] delay1_q_net_x3;
  wire [15:0] delay1_q_net_x4;
  wire [15:0] delay1_q_net_x5;
  wire [15:0] delay20_q_net_x0;
  wire [15:0] delay21_q_net_x0;
  wire [15:0] delay22_q_net_x0;
  wire [15:0] delay23_q_net;
  wire [15:0] delay24_q_net_x0;
  wire [15:0] delay25_q_net_x0;
  wire [15:0] delay26_q_net_x0;
  wire [15:0] delay27_q_net;
  wire [15:0] delay28_q_net_x0;
  wire [15:0] delay29_q_net_x0;
  wire [15:0] delay2_q_net_x0;
  wire [15:0] delay30_q_net_x0;
  wire [15:0] delay31_q_net_x0;
  wire [15:0] delay32_q_net_x0;
  wire [0:0] delay33_q_net;
  wire [0:0] delay34_q_net_x0;
  wire [15:0] delay3_q_net_x0;
  wire [15:0] delay4_q_net;
  wire [15:0] delay5_q_net_x0;
  wire [15:0] delay6_q_net_x0;
  wire [15:0] delay7_q_net_x0;
  wire [15:0] delay8_q_net_x0;
  wire [15:0] delay9_q_net;
  wire [15:0] delay_q_net_x0;
  wire [15:0] delay_q_net_x4;
  wire [15:0] delay_q_net_x5;
  wire [15:0] delay_q_net_x6;
  wire [15:0] din1_net_x0;
  wire [15:0] din2_net_x0;
  wire [15:0] din5_net_x0;
  wire [15:0] mux1_y_net_x2;
  wire [15:0] mux1_y_net_x3;
  wire [15:0] mux1_y_net_x4;
  wire [15:0] mux1_y_net_x5;
  wire [15:0] mux1_y_net_x6;
  wire [15:0] mux1_y_net_x7;
  wire [0:0] rst_net_x0;
  wire [0:0] sel_counter1_op_net_x1;
  wire [0:0] sel_counter2_op_net_x1;
  wire [0:0] sel_counter_op_net_x1;

  assign ce_1_sg_x21 = ce_1;
  assign clk_1_sg_x21 = clk_1;
  assign din5_net_x0 = in1;
  assign din1_net_x0 = in2;
  assign din2_net_x0 = in3;
  assign out1 = delay_q_net_x4;
  assign out2 = delay1_q_net_x3;
  assign out3 = delay_q_net_x5;
  assign out4 = delay1_q_net_x4;
  assign out5 = delay_q_net_x6;
  assign out6 = delay1_q_net_x5;
  assign rst_net_x0 = rst;
  assign valid_out = delay34_q_net_x0;


  xlcounter_limit #(

    .cnt_15_0(15),
    .cnt_31_16(0),
    .cnt_47_32(0),
    .cnt_63_48(0),
    .core_name0("cntr_11_0_2801b0cdb1a0a2a6"),
    .count_limited(0),
    .op_arith(`xlUnsigned),
    .op_width(4))
  addr_counter (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .rst(delay33_q_net),
    .op(addr_counter_op_net_x1)
  );

  xlcounter_limit #(

    .cnt_15_0(15),
    .cnt_31_16(0),
    .cnt_47_32(0),
    .cnt_63_48(0),
    .core_name0("cntr_11_0_2801b0cdb1a0a2a6"),
    .count_limited(0),
    .op_arith(`xlUnsigned),
    .op_width(4))
  addr_counter1 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .rst(delay33_q_net),
    .op(addr_counter1_op_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e342234b3f808cc6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub10 (
    .a(convert3_dout_net_x7),
    .b(convert7_dout_net_x1),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub10_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub11 (
    .a(addsub9_s_net),
    .b(addsub10_s_net),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub11_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e342234b3f808cc6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub12 (
    .a(convert3_dout_net_x9),
    .b(convert7_dout_net_x2),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub12_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub13 (
    .a(addsub17_s_net),
    .b(addsub12_s_net),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub13_s_net)
  );

  addsub_f03aa9b11e  addsub16 (
    .a(delay27_q_net),
    .b(delay23_q_net),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .s(addsub16_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub17 (
    .a(convert3_dout_net_x8),
    .b(convert3_dout_net_x3),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub17_s_net)
  );

  addsub_f03aa9b11e  addsub2 (
    .a(delay4_q_net),
    .b(delay1_q_net),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .s(addsub2_s_net_x1)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub4 (
    .a(convert3_dout_net_x4),
    .b(convert3_dout_net_x1),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e342234b3f808cc6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub5 (
    .a(convert3_dout_net_x5),
    .b(convert7_dout_net_x0),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub6 (
    .a(addsub4_s_net),
    .b(addsub5_s_net),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  addsub_f03aa9b11e  addsub8 (
    .a(delay16_q_net),
    .b(delay9_q_net),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .s(addsub8_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub9 (
    .a(convert3_dout_net_x6),
    .b(convert3_dout_net_x2),
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub9_s_net)
  );

  coef1_1_module_602e95181f  coef1_1_602e95181f (
    .a(delay30_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay7_q_net_x0),
    .out_x0(convert3_dout_net_x1)
  );

  coef1_1_module_602e95181f  coef1_2_53159e9232 (
    .a(delay31_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay19_q_net_x0),
    .out_x0(convert3_dout_net_x2)
  );

  coef1_1_module_602e95181f  coef1_3_d7992cd769 (
    .a(delay32_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay29_q_net_x0),
    .out_x0(convert3_dout_net_x3)
  );

  coef3_1_module_b3d2e53de6  coef3_1_b3d2e53de6 (
    .a(delay5_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay_q_net_x0),
    .out_x0(convert3_dout_net_x4)
  );

  coef3_2_module_4ed75c20c8  coef3_2_4ed75c20c8 (
    .a(delay3_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay2_q_net_x0),
    .out_x0(convert3_dout_net_x5)
  );

  coef3_1_module_b3d2e53de6  coef3_3_6d314fe4bd (
    .a(delay17_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay8_q_net_x0),
    .out_x0(convert3_dout_net_x6)
  );

  coef3_2_module_4ed75c20c8  coef3_4_e442d5128f (
    .a(delay13_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay12_q_net_x0),
    .out_x0(convert3_dout_net_x7)
  );

  coef3_1_module_b3d2e53de6  coef3_5_80c3601f9f (
    .a(delay28_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay22_q_net_x0),
    .out_x0(convert3_dout_net_x8)
  );

  coef3_2_module_4ed75c20c8  coef3_6_1f994f3ac7 (
    .a(delay25_q_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .d(delay24_q_net_x0),
    .out_x0(convert3_dout_net_x9)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .din(addsub6_s_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert1 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .din(addsub11_s_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert2 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .din(addsub13_s_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .din(delay3_q_net_x0),
    .en(1'b1),
    .dout(convert3_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .din(delay13_q_net_x0),
    .en(1'b1),
    .dout(convert4_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .din(delay25_q_net_x0),
    .en(1'b1),
    .dout(convert5_dout_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay30_q_net_x0),
    .en(1'b1),
    .q(delay_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay_q_net_x0),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(9),
    .reg_retiming(0),
    .width(16))
  delay10 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert1_dout_net),
    .en(1'b1),
    .q(delay10_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay11 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert1_dout_net),
    .en(1'b1),
    .q(delay11_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay12 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay9_q_net),
    .en(1'b1),
    .q(delay12_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay13 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay12_q_net_x0),
    .en(1'b1),
    .q(delay13_q_net_x0)
  );

  xldelay #(

    .latency(9),
    .reg_retiming(0),
    .width(16))
  delay14 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert_dout_net),
    .en(1'b1),
    .q(delay14_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay15 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert_dout_net),
    .en(1'b1),
    .q(delay15_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay16 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay13_q_net_x0),
    .en(1'b1),
    .q(delay16_q_net)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay17 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay16_q_net),
    .en(1'b1),
    .q(delay17_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay18 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert4_dout_net_x0),
    .en(1'b1),
    .q(delay18_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay19 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay17_q_net_x0),
    .en(1'b1),
    .q(delay19_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay2 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay1_q_net),
    .en(1'b1),
    .q(delay2_q_net_x0)
  );

  xldelay #(

    .latency(9),
    .reg_retiming(0),
    .width(16))
  delay20 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert2_dout_net),
    .en(1'b1),
    .q(delay20_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay21 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert2_dout_net),
    .en(1'b1),
    .q(delay21_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay22 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay32_q_net_x0),
    .en(1'b1),
    .q(delay22_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay23 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay22_q_net_x0),
    .en(1'b1),
    .q(delay23_q_net)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay24 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay23_q_net),
    .en(1'b1),
    .q(delay24_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay25 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay24_q_net_x0),
    .en(1'b1),
    .q(delay25_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay26 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert5_dout_net_x0),
    .en(1'b1),
    .q(delay26_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay27 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay25_q_net_x0),
    .en(1'b1),
    .q(delay27_q_net)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay28 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay27_q_net),
    .en(1'b1),
    .q(delay28_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay29 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay28_q_net_x0),
    .en(1'b1),
    .q(delay29_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay3 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay2_q_net_x0),
    .en(1'b1),
    .q(delay3_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay30 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(din5_net_x0),
    .en(1'b1),
    .q(delay30_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay31 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(din1_net_x0),
    .en(1'b1),
    .q(delay31_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay32 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(din2_net_x0),
    .en(1'b1),
    .q(delay32_q_net_x0)
  );

  xldelay #(

    .latency(32),
    .reg_retiming(0),
    .width(1))
  delay33 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(rst_net_x0),
    .en(1'b1),
    .q(delay33_q_net)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(1))
  delay34 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay33_q_net),
    .en(1'b1),
    .q(delay34_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay4 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay3_q_net_x0),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay5 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay4_q_net),
    .en(1'b1),
    .q(delay5_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay6 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(convert3_dout_net_x0),
    .en(1'b1),
    .q(delay6_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay7 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay5_q_net_x0),
    .en(1'b1),
    .q(delay7_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay8 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay31_q_net_x0),
    .en(1'b1),
    .q(delay8_q_net_x0)
  );

  xldelay #(

    .latency(16),
    .reg_retiming(0),
    .width(16))
  delay9 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .d(delay8_q_net_x0),
    .en(1'b1),
    .q(delay9_q_net)
  );

  reorder1_module_737d7300a7  reorder1_737d7300a7 (
    .addr(addr_counter_op_net_x1),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(mux1_y_net_x2),
    .in2(mux1_y_net_x3),
    .out1(delay_q_net_x4),
    .out2(delay1_q_net_x3)
  );

  reorder1_module_737d7300a7  reorder2_74d0ce873d (
    .addr(addr_counter_op_net_x1),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(mux1_y_net_x4),
    .in2(mux1_y_net_x5),
    .out1(delay_q_net_x5),
    .out2(delay1_q_net_x4)
  );

  reorder1_module_737d7300a7  reorder3_f1ed60030c (
    .addr(addr_counter1_op_net_x0),
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(mux1_y_net_x6),
    .in2(mux1_y_net_x7),
    .out1(delay_q_net_x6),
    .out2(delay1_q_net_x5)
  );

  counter_5c8ee48e8f  sel_counter (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .rst(delay33_q_net),
    .op(sel_counter_op_net_x1)
  );

  counter_5c8ee48e8f  sel_counter1 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .rst(delay33_q_net),
    .op(sel_counter1_op_net_x1)
  );

  counter_5c8ee48e8f  sel_counter2 (
    .ce(ce_1_sg_x21),
    .clk(clk_1_sg_x21),
    .clr(1'b0),
    .rst(delay33_q_net),
    .op(sel_counter2_op_net_x1)
  );

  tdm_module_2d0f22538c  tdm1_5409fbf2dc (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(delay15_q_net_x0),
    .in2(convert3_dout_net_x0),
    .sel(sel_counter_op_net_x1),
    .out_x0(mux1_y_net_x3)
  );

  tdm_module_2d0f22538c  tdm2_b1b37105ac (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(delay10_q_net_x0),
    .in2(delay18_q_net_x0),
    .sel(sel_counter1_op_net_x1),
    .out_x0(mux1_y_net_x4)
  );

  tdm_module_2d0f22538c  tdm3_8b8ca91589 (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(delay11_q_net_x0),
    .in2(convert4_dout_net_x0),
    .sel(sel_counter1_op_net_x1),
    .out_x0(mux1_y_net_x5)
  );

  tdm_module_2d0f22538c  tdm4_41b4d4bdb9 (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(delay20_q_net_x0),
    .in2(delay26_q_net_x0),
    .sel(sel_counter2_op_net_x1),
    .out_x0(mux1_y_net_x6)
  );

  tdm_module_2d0f22538c  tdm5_ad69ac97b4 (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(delay21_q_net_x0),
    .in2(convert5_dout_net_x0),
    .sel(sel_counter2_op_net_x1),
    .out_x0(mux1_y_net_x7)
  );

  tdm_module_2d0f22538c  tdm_2d0f22538c (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in1(delay14_q_net_x0),
    .in2(delay6_q_net_x0),
    .sel(sel_counter_op_net_x1),
    .out_x0(mux1_y_net_x2)
  );

  x0_137184776786555_1_module_cd5be5787f  x0_137184776786555_1_cd5be5787f (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in_x0(addsub2_s_net_x1),
    .out_x0(convert7_dout_net_x0)
  );

  x0_137184776786555_1_module_cd5be5787f  x0_137184776786555_2_965a9505b5 (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in_x0(addsub8_s_net_x0),
    .out_x0(convert7_dout_net_x1)
  );

  x0_137184776786555_1_module_cd5be5787f  x0_137184776786555_3_db0e8ddfb7 (
    .ce_1(ce_1_sg_x21),
    .clk_1(clk_1_sg_x21),
    .in_x0(addsub16_s_net_x0),
    .out_x0(convert7_dout_net_x2)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF2 Filter/0.013453762122151"

module x0_013453762122151_module_39717873d7 (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [16:0] in_x0;
  output [19:0] out_x0;

  wire [27:0] addsub2_s_net;
  wire [20:0] addsub3_s_net;
  wire [16:0] addsub_s_net_x0;
  wire [0:0] ce_1_sg_x22;
  wire [0:0] clk_1_sg_x22;
  wire [19:0] convert1_dout_net_x0;
  wire [27:0] convert2_dout_net;
  wire [20:0] convert3_dout_net;
  wire [21:0] convert4_dout_net;
  wire [31:0] convert5_dout_net;
  wire [20:0] shift3_op_net;
  wire [20:0] shift4_op_net;
  wire [27:0] shift5_op_net;
  wire [21:0] shift6_op_net;
  wire [31:0] shift9_op_net;

  assign ce_1_sg_x22 = ce_1;
  assign clk_1_sg_x22 = clk_1;
  assign addsub_s_net_x0 = in_x0;
  assign out_x0 = convert1_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(20),
    .a_width(22),
    .b_arith(`xlSigned),
    .b_bin_pt(26),
    .b_width(28),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(29),
    .core_name0("addsb_11_0_5cceab115d1c98ee"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(29),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(26),
    .s_width(28))
  addsub2 (
    .a(shift6_op_net),
    .b(shift5_op_net),
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(21),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(21),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(22),
    .core_name0("addsb_11_0_a2c1ef62805d079c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(22),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(21))
  addsub3 (
    .a(shift3_op_net),
    .b(shift4_op_net),
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(30),
    .din_width(32),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .din(shift9_op_net),
    .en(1'b1),
    .dout(convert1_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(21),
    .dout_arith(2),
    .dout_bin_pt(26),
    .dout_width(28),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(21),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .din(addsub_s_net_x0),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(21),
    .dout_arith(2),
    .dout_bin_pt(20),
    .dout_width(22),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(26),
    .din_width(28),
    .dout_arith(2),
    .dout_bin_pt(30),
    .dout_width(32),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  shift_a0dd291710  shift3 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_92fa79e61c  shift4 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift4_op_net)
  );

  shift_be765386ae  shift5 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift5_op_net)
  );

  shift_773079a115  shift6 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift6_op_net)
  );

  shift_58794f53f4  shift9 (
    .ce(ce_1_sg_x22),
    .clk(clk_1_sg_x22),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift9_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF2 Filter/0.102575973038173"

module x0_102575973038173_module_99af5321d6 (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [16:0] in_x0;
  output [19:0] out_x0;

  wire [20:0] addsub1_s_net;
  wire [16:0] addsub1_s_net_x1;
  wire [23:0] addsub2_s_net;
  wire [18:0] addsub3_s_net;
  wire [0:0] ce_1_sg_x24;
  wire [0:0] clk_1_sg_x24;
  wire [19:0] convert1_dout_net_x0;
  wire [23:0] convert2_dout_net;
  wire [18:0] convert3_dout_net;
  wire [26:0] convert5_dout_net;
  wire [20:0] convert6_dout_net;
  wire [20:0] shift1_op_net;
  wire [20:0] shift2_op_net;
  wire [18:0] shift3_op_net;
  wire [18:0] shift4_op_net;
  wire [23:0] shift5_op_net;
  wire [26:0] shift9_op_net;

  assign ce_1_sg_x24 = ce_1;
  assign clk_1_sg_x24 = clk_1;
  assign addsub1_s_net_x1 = in_x0;
  assign out_x0 = convert1_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(21),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(21),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(22),
    .core_name0("addsb_11_0_8825bda37560e614"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(22),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(21))
  addsub1 (
    .a(shift2_op_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(22),
    .a_width(24),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(25),
    .core_name0("addsb_11_0_2435c8258456a785"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(25),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(22),
    .s_width(24))
  addsub2 (
    .a(shift5_op_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(19))
  addsub3 (
    .a(shift4_op_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(25),
    .din_width(27),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .din(shift9_op_net),
    .en(1'b1),
    .dout(convert1_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(21),
    .dout_arith(2),
    .dout_bin_pt(22),
    .dout_width(24),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .din(addsub1_s_net_x1),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(22),
    .din_width(24),
    .dout_arith(2),
    .dout_bin_pt(25),
    .dout_width(27),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(21),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .din(addsub1_s_net_x1),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  shift_a0dd291710  shift1 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift1_op_net)
  );

  shift_92fa79e61c  shift2 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift2_op_net)
  );

  shift_091db5281e  shift3 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_3fa2663220  shift4 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift4_op_net)
  );

  shift_940a0f4802  shift5 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift5_op_net)
  );

  shift_cecea44c7e  shift9 (
    .ce(ce_1_sg_x24),
    .clk(clk_1_sg_x24),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift9_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF2 Filter/0.589129026142142"

module x0_589129026142142_module_cfbf781216 (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [16:0] in_x0;
  output [19:0] out_x0;

  wire [20:0] addsub1_s_net;
  wire [24:0] addsub2_s_net;
  wire [16:0] addsub2_s_net_x1;
  wire [18:0] addsub3_s_net;
  wire [23:0] addsub4_s_net;
  wire [31:0] addsub6_s_net;
  wire [0:0] ce_1_sg_x26;
  wire [0:0] clk_1_sg_x26;
  wire [19:0] convert1_dout_net_x0;
  wire [24:0] convert2_dout_net;
  wire [18:0] convert3_dout_net;
  wire [19:0] convert4_dout_net;
  wire [31:0] convert5_dout_net;
  wire [20:0] convert6_dout_net;
  wire [23:0] convert7_dout_net;
  wire [19:0] shift11_op_net;
  wire [23:0] shift12_op_net;
  wire [20:0] shift1_op_net;
  wire [20:0] shift2_op_net;
  wire [18:0] shift3_op_net;
  wire [18:0] shift4_op_net;
  wire [24:0] shift5_op_net;
  wire [31:0] shift6_op_net;

  assign ce_1_sg_x26 = ce_1;
  assign clk_1_sg_x26 = clk_1;
  assign addsub2_s_net_x1 = in_x0;
  assign out_x0 = convert1_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(21),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(21),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(22),
    .core_name0("addsb_11_0_8825bda37560e614"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(22),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(21))
  addsub1 (
    .a(shift2_op_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(23),
    .a_width(25),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(26),
    .core_name0("addsb_11_0_ee39a18b297c3780"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(26),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(23),
    .s_width(25))
  addsub2 (
    .a(shift5_op_net),
    .b(shift11_op_net),
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(19))
  addsub3 (
    .a(shift4_op_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(22),
    .a_width(24),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(21),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(25),
    .core_name0("addsb_11_0_2435c8258456a785"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(25),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(22),
    .s_width(24))
  addsub4 (
    .a(shift12_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(30),
    .a_width(32),
    .b_arith(`xlSigned),
    .b_bin_pt(22),
    .b_width(24),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(33),
    .core_name0("addsb_11_0_bc1be80aeb880952"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(33),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(30),
    .s_width(32))
  addsub6 (
    .a(shift6_op_net),
    .b(addsub4_s_net),
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(30),
    .din_width(32),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub6_s_net),
    .en(1'b1),
    .dout(convert1_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(21),
    .dout_arith(2),
    .dout_bin_pt(23),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub2_s_net_x1),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(17),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(23),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(30),
    .dout_width(32),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(21),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub2_s_net_x1),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(17),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(22),
    .dout_width(24),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  shift_a0dd291710  shift1 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift1_op_net)
  );

  shift_7d97a52cb7  shift11 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift11_op_net)
  );

  shift_c3b3a63c34  shift12 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert7_dout_net),
    .op(shift12_op_net)
  );

  shift_92fa79e61c  shift2 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift2_op_net)
  );

  shift_091db5281e  shift3 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_3fa2663220  shift4 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift4_op_net)
  );

  shift_0f7277fd89  shift5 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift5_op_net)
  );

  shift_a47dc9adee  shift6 (
    .ce(ce_1_sg_x26),
    .clk(clk_1_sg_x26),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift6_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF2 Filter/TDM"

module tdm_module_1579c3c80a (
  ce_1,
  clk_1,
  in1,
  in2,
  out1,
  rst
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [15:0] in2;
  input [0:0] rst;
  output [15:0] out1;

  wire [0:0] ce_1_sg_x28;
  wire [0:0] clk_1_sg_x28;
  wire [0:0] counter1_op_net;
  wire [15:0] delay14_q_net_x0;
  wire [0:0] delay16_q_net_x0;
  wire [15:0] delay6_q_net_x0;
  wire [15:0] mux1_y_net_x0;

  assign ce_1_sg_x28 = ce_1;
  assign clk_1_sg_x28 = clk_1;
  assign delay14_q_net_x0 = in1;
  assign delay6_q_net_x0 = in2;
  assign out1 = mux1_y_net_x0;
  assign delay16_q_net_x0 = rst;


  counter_5c8ee48e8f  counter1 (
    .ce(ce_1_sg_x28),
    .clk(clk_1_sg_x28),
    .clr(1'b0),
    .rst(delay16_q_net_x0),
    .op(counter1_op_net)
  );

  mux_1f6c522247  mux1 (
    .ce(ce_1_sg_x28),
    .clk(clk_1_sg_x28),
    .clr(1'b0),
    .d0(delay14_q_net_x0),
    .d1(delay6_q_net_x0),
    .sel(counter1_op_net),
    .y(mux1_y_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF2 Filter/reorder1"

module reorder1_module_cc51d08836 (
  addr,
  ce_1,
  clk_1,
  in1,
  in2,
  out1,
  out2
);

  input [2:0] addr;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [15:0] in2;
  output [15:0] out1;
  output [15:0] out2;

  wire [0:0] ce_1_sg_x32;
  wire [0:0] clk_1_sg_x32;
  wire [31:0] concat_y_net;
  wire [0:0] constant4_op_net;
  wire [2:0] counter_op_net_x0;
  wire [15:0] delay1_q_net_x0;
  wire [2:0] delay2_q_net;
  wire [15:0] delay_q_net_x0;
  wire [31:0] dual_port_ram_doutb_net;
  wire [15:0] mux1_y_net_x2;
  wire [15:0] mux1_y_net_x3;
  wire [15:0] reinterpret1_output_port_net;
  wire [15:0] reinterpret8_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [15:0] reinterpret_output_port_net;
  wire [2:0] rom_data_net;
  wire [15:0] slice4_y_net;
  wire [15:0] slice5_y_net;

  assign counter_op_net_x0 = addr;
  assign ce_1_sg_x32 = ce_1;
  assign clk_1_sg_x32 = clk_1;
  assign mux1_y_net_x2 = in1;
  assign mux1_y_net_x3 = in2;
  assign out1 = delay_q_net_x0;
  assign out2 = delay1_q_net_x0;


  concat_7e18b92ffa  concat (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .in0(reinterpret_output_port_net),
    .in1(reinterpret1_output_port_net),
    .y(concat_y_net)
  );

  constant_5e90e4a8ec  constant4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant4_op_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x32),
    .clk(clk_1_sg_x32),
    .d(reinterpret8_output_port_net),
    .en(1'b1),
    .q(delay_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x32),
    .clk(clk_1_sg_x32),
    .d(reinterpret9_output_port_net),
    .en(1'b1),
    .q(delay1_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(3))
  delay2 (
    .ce(ce_1_sg_x32),
    .clk(clk_1_sg_x32),
    .d(counter_op_net_x0),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldpram_dist #(

    .addr_width(3),
    .c_address_width(4),
    .c_width(32),
    .core_name0("dmg_62_f0318986ab2917a2"),
    .latency(1))
  dual_port_ram (
    .a_ce(ce_1_sg_x32),
    .a_clk(clk_1_sg_x32),
    .addra(delay2_q_net),
    .addrb(rom_data_net),
    .b_ce(ce_1_sg_x32),
    .b_clk(clk_1_sg_x32),
    .dina(concat_y_net),
    .ena(1'b1),
    .enb(1'b1),
    .wea(constant4_op_net),
    .doutb(dual_port_ram_doutb_net)
  );

  reinterpret_2824f666f2  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(mux1_y_net_x2),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_2824f666f2  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(mux1_y_net_x3),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_dee95c6dbb  reinterpret8 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice4_y_net),
    .output_port(reinterpret8_output_port_net)
  );

  reinterpret_dee95c6dbb  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice5_y_net),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom_dist #(

    .addr_width(3),
    .c_address_width(4),
    .c_width(3),
    .core_name0("dmg_62_8c0172ee1e6fc864"),
    .latency(1))
  rom (
    .addr(delay2_q_net),
    .ce(ce_1_sg_x32),
    .clk(clk_1_sg_x32),
    .en(1'b1),
    .data(rom_data_net)
  );

  xlslice #(

    .new_lsb(16),
    .new_msb(31),
    .x_width(32),
    .y_width(16))
  slice4 (
    .x(dual_port_ram_doutb_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(15),
    .x_width(32),
    .y_width(16))
  slice5 (
    .x(dual_port_ram_doutb_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF2 Filter"

module hbf2_filter_module_0c29128e9b (
  ce_1,
  clk_1,
  in1,
  in2,
  out1,
  out2,
  out3,
  out4,
  valid_in,
  valid_out
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [15:0] in2;
  input [0:0] valid_in;
  output [15:0] out1;
  output [15:0] out2;
  output [15:0] out3;
  output [15:0] out4;
  output [0:0] valid_out;

  wire [16:0] addsub1_s_net_x1;
  wire [16:0] addsub2_s_net_x1;
  wire [16:0] addsub3_s_net_x1;
  wire [19:0] addsub4_s_net;
  wire [16:0] addsub5_s_net_x0;
  wire [19:0] addsub6_s_net;
  wire [16:0] addsub7_s_net_x0;
  wire [19:0] addsub8_s_net;
  wire [19:0] addsub9_s_net;
  wire [16:0] addsub_s_net_x0;
  wire [0:0] ce_1_sg_x34;
  wire [0:0] clk_1_sg_x34;
  wire [19:0] convert1_dout_net_x0;
  wire [19:0] convert1_dout_net_x1;
  wire [19:0] convert1_dout_net_x2;
  wire [19:0] convert1_dout_net_x3;
  wire [19:0] convert1_dout_net_x4;
  wire [19:0] convert1_dout_net_x5;
  wire [15:0] convert1_dout_net_x6;
  wire [15:0] convert2_dout_net;
  wire [15:0] convert3_dout_net;
  wire [15:0] convert_dout_net_x0;
  wire [2:0] counter_op_net_x1;
  wire [15:0] delay10_q_net_x0;
  wire [15:0] delay11_q_net_x0;
  wire [15:0] delay12_q_net;
  wire [15:0] delay13_q_net;
  wire [15:0] delay14_q_net_x0;
  wire [15:0] delay15_q_net_x0;
  wire [0:0] delay16_q_net_x3;
  wire [0:0] delay17_q_net_x0;
  wire [15:0] delay1_q_net;
  wire [15:0] delay1_q_net_x5;
  wire [15:0] delay1_q_net_x6;
  wire [15:0] delay1_q_net_x7;
  wire [15:0] delay2_q_net;
  wire [0:0] delay34_q_net_x1;
  wire [15:0] delay3_q_net;
  wire [15:0] delay4_q_net;
  wire [15:0] delay5_q_net;
  wire [15:0] delay6_q_net_x0;
  wire [15:0] delay7_q_net;
  wire [15:0] delay8_q_net;
  wire [15:0] delay9_q_net_x0;
  wire [15:0] delay_q_net;
  wire [15:0] delay_q_net_x2;
  wire [15:0] delay_q_net_x5;
  wire [15:0] delay_q_net_x6;
  wire [15:0] mux1_y_net_x2;
  wire [15:0] mux1_y_net_x3;
  wire [15:0] mux1_y_net_x4;
  wire [15:0] mux1_y_net_x5;

  assign ce_1_sg_x34 = ce_1;
  assign clk_1_sg_x34 = clk_1;
  assign delay_q_net_x5 = in1;
  assign delay1_q_net_x5 = in2;
  assign out1 = delay_q_net_x2;
  assign out2 = delay1_q_net_x6;
  assign out3 = delay_q_net_x6;
  assign out4 = delay1_q_net_x7;
  assign delay34_q_net_x1 = valid_in;
  assign valid_out = delay17_q_net_x0;


  addsub_f03aa9b11e  addsub (
    .a(delay_q_net_x5),
    .b(delay4_q_net),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .s(addsub_s_net_x0)
  );

  addsub_f03aa9b11e  addsub1 (
    .a(delay3_q_net),
    .b(delay_q_net),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .s(addsub1_s_net_x1)
  );

  addsub_f03aa9b11e  addsub2 (
    .a(delay1_q_net),
    .b(delay2_q_net),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .s(addsub2_s_net_x1)
  );

  addsub_f03aa9b11e  addsub3 (
    .a(delay1_q_net_x5),
    .b(delay13_q_net),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .s(addsub3_s_net_x1)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e342234b3f808cc6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub4 (
    .a(convert1_dout_net_x0),
    .b(convert1_dout_net_x2),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  addsub_f03aa9b11e  addsub5 (
    .a(delay12_q_net),
    .b(delay5_q_net),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .s(addsub5_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub6 (
    .a(addsub4_s_net),
    .b(convert1_dout_net_x4),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  addsub_f03aa9b11e  addsub7 (
    .a(delay7_q_net),
    .b(delay8_q_net),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .s(addsub7_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub8 (
    .a(addsub9_s_net),
    .b(convert1_dout_net_x5),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub8_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e342234b3f808cc6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub9 (
    .a(convert1_dout_net_x1),
    .b(convert1_dout_net_x3),
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub9_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .din(delay2_q_net),
    .en(1'b1),
    .dout(convert_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .din(delay8_q_net),
    .en(1'b1),
    .dout(convert1_dout_net_x6)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert2 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .din(addsub6_s_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert3 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .din(addsub8_s_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlcounter_limit #(

    .cnt_15_0(7),
    .cnt_31_16(0),
    .cnt_47_32(0),
    .cnt_63_48(0),
    .core_name0("cntr_11_0_63de6612768d060a"),
    .count_limited(0),
    .op_arith(`xlUnsigned),
    .op_width(3))
  counter (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .clr(1'b0),
    .en(1'b1),
    .rst(delay16_q_net_x3),
    .op(counter_op_net_x1)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay_q_net_x5),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay10 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(convert3_dout_net),
    .en(1'b1),
    .q(delay10_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay11 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(convert1_dout_net_x6),
    .en(1'b1),
    .q(delay11_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay12 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay8_q_net),
    .en(1'b1),
    .q(delay12_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay13 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay12_q_net),
    .en(1'b1),
    .q(delay13_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay14 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(convert2_dout_net),
    .en(1'b1),
    .q(delay14_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay15 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(convert2_dout_net),
    .en(1'b1),
    .q(delay15_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(1))
  delay16 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay34_q_net_x1),
    .en(1'b1),
    .q(delay16_q_net_x3)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(1))
  delay17 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay16_q_net_x3),
    .en(1'b1),
    .q(delay17_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay2 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay1_q_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay3 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay2_q_net),
    .en(1'b1),
    .q(delay3_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay4 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay3_q_net),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay5 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay1_q_net_x5),
    .en(1'b1),
    .q(delay5_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay6 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(convert_dout_net_x0),
    .en(1'b1),
    .q(delay6_q_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay7 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay5_q_net),
    .en(1'b1),
    .q(delay7_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay8 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(delay7_q_net),
    .en(1'b1),
    .q(delay8_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay9 (
    .ce(ce_1_sg_x34),
    .clk(clk_1_sg_x34),
    .d(convert3_dout_net),
    .en(1'b1),
    .q(delay9_q_net_x0)
  );

  reorder1_module_cc51d08836  reorder1_cc51d08836 (
    .addr(counter_op_net_x1),
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in1(mux1_y_net_x2),
    .in2(mux1_y_net_x3),
    .out1(delay_q_net_x2),
    .out2(delay1_q_net_x6)
  );

  reorder1_module_cc51d08836  reorder2_f21ae8adca (
    .addr(counter_op_net_x1),
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in1(mux1_y_net_x4),
    .in2(mux1_y_net_x5),
    .out1(delay_q_net_x6),
    .out2(delay1_q_net_x7)
  );

  tdm_module_1579c3c80a  tdm1_04c21ed624 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in1(delay15_q_net_x0),
    .in2(convert_dout_net_x0),
    .rst(delay16_q_net_x3),
    .out1(mux1_y_net_x3)
  );

  tdm_module_1579c3c80a  tdm2_7f202b570e (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in1(delay9_q_net_x0),
    .in2(delay11_q_net_x0),
    .rst(delay16_q_net_x3),
    .out1(mux1_y_net_x4)
  );

  tdm_module_1579c3c80a  tdm3_2599b54995 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in1(delay10_q_net_x0),
    .in2(convert1_dout_net_x6),
    .rst(delay16_q_net_x3),
    .out1(mux1_y_net_x5)
  );

  tdm_module_1579c3c80a  tdm_1579c3c80a (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in1(delay14_q_net_x0),
    .in2(delay6_q_net_x0),
    .rst(delay16_q_net_x3),
    .out1(mux1_y_net_x2)
  );

  x0_013453762122151_module_39717873d7  x0_013453762122151_1_bd713bd5f9 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in_x0(addsub3_s_net_x1),
    .out_x0(convert1_dout_net_x1)
  );

  x0_013453762122151_module_39717873d7  x0_013453762122151_39717873d7 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in_x0(addsub_s_net_x0),
    .out_x0(convert1_dout_net_x0)
  );

  x0_102575973038173_module_99af5321d6  x0_102575973038173_1_47de5cd3f4 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in_x0(addsub5_s_net_x0),
    .out_x0(convert1_dout_net_x3)
  );

  x0_102575973038173_module_99af5321d6  x0_102575973038173_99af5321d6 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in_x0(addsub1_s_net_x1),
    .out_x0(convert1_dout_net_x2)
  );

  x0_589129026142142_module_cfbf781216  x0_589129026142142_1_e66bc1ce54 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in_x0(addsub7_s_net_x0),
    .out_x0(convert1_dout_net_x5)
  );

  x0_589129026142142_module_cfbf781216  x0_589129026142142_cfbf781216 (
    .ce_1(ce_1_sg_x34),
    .clk_1(clk_1_sg_x34),
    .in_x0(addsub2_s_net_x1),
    .out_x0(convert1_dout_net_x4)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF3 Filter"

module hbf3_filter_module_e5616ca24f (
  ce_1,
  clk_1,
  xn,
  y1,
  y2
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [18:0] xn;
  output [15:0] y1;
  output [15:0] y2;

  wire [0:0] ce_1_sg_x61;
  wire [0:0] clk_1_sg_x61;
  wire [17:0] constant1_op_net;
  wire [17:0] constant2_op_net;
  wire [47:0] constant32_op_net;
  wire [17:0] constant33_op_net;
  wire [17:0] constant3_op_net;
  wire [17:0] constant4_op_net;
  wire [17:0] constant5_op_net;
  wire [17:0] constant6_op_net;
  wire [17:0] constant7_op_net;
  wire [17:0] constant8_op_net;
  wire [17:0] constant9_op_net;
  wire [24:0] convert10_dout_net;
  wire [17:0] convert11_dout_net;
  wire [24:0] convert12_dout_net;
  wire [17:0] convert13_dout_net;
  wire [24:0] convert14_dout_net;
  wire [24:0] convert15_dout_net;
  wire [17:0] convert16_dout_net;
  wire [17:0] convert17_dout_net;
  wire [17:0] convert18_dout_net;
  wire [17:0] convert19_dout_net;
  wire [24:0] convert1_dout_net;
  wire [24:0] convert20_dout_net;
  wire [17:0] convert21_dout_net;
  wire [24:0] convert2_dout_net;
  wire [15:0] convert3_dout_net_x0;
  wire [24:0] convert4_dout_net;
  wire [17:0] convert5_dout_net;
  wire [15:0] convert64_dout_net;
  wire [24:0] convert6_dout_net;
  wire [17:0] convert7_dout_net;
  wire [17:0] convert8_dout_net;
  wire [24:0] convert9_dout_net;
  wire [29:0] convert_dout_net;
  wire [18:0] delay13_q_net;
  wire [15:0] delay1_q_net_x0;
  wire [18:0] delay2_q_net;
  wire [18:0] delay3_q_net;
  wire [18:0] delay4_q_net;
  wire [18:0] delay_q_net;
  wire [29:0] dsp48e1_16_acout_net;
  wire [47:0] dsp48e1_16_pcout_net;
  wire [29:0] dsp48e1_17_acout_net;
  wire [47:0] dsp48e1_17_pcout_net;
  wire [29:0] dsp48e1_18_acout_net;
  wire [47:0] dsp48e1_18_pcout_net;
  wire [29:0] dsp48e1_19_acout_net;
  wire [47:0] dsp48e1_19_pcout_net;
  wire [47:0] dsp48e1_1_p_net;
  wire [29:0] dsp48e1_2_acout_net;
  wire [47:0] dsp48e1_2_pcout_net;
  wire [29:0] dsp48e1_4_acout_net;
  wire [47:0] dsp48e1_4_pcout_net;
  wire [29:0] dsp48e1_5_acout_net;
  wire [47:0] dsp48e1_5_pcout_net;
  wire [29:0] dsp48e1_6_acout_net;
  wire [47:0] dsp48e1_6_pcout_net;
  wire [29:0] dsp48e1_acout_net;
  wire [47:0] dsp48e1_pcout_net;
  wire [19:0] opmode1_op_net;
  wire [19:0] opmode_op_net;
  wire [17:0] reinterpret10_output_port_net;
  wire [18:0] reinterpret12_output_port_net;
  wire [17:0] reinterpret13_output_port_net;
  wire [18:0] reinterpret14_output_port_net;
  wire [17:0] reinterpret15_output_port_net;
  wire [18:0] reinterpret17_output_port_net;
  wire [18:0] reinterpret18_output_port_net;
  wire [18:0] reinterpret1_output_port_net;
  wire [17:0] reinterpret21_output_port_net;
  wire [18:0] reinterpret22_output_port_net;
  wire [17:0] reinterpret23_output_port_net;
  wire [18:0] reinterpret24_output_port_net;
  wire [17:0] reinterpret2_output_port_net;
  wire [17:0] reinterpret3_output_port_net;
  wire [17:0] reinterpret4_output_port_net;
  wire [18:0] reinterpret5_output_port_net;
  wire [18:0] reinterpret5_output_port_net_x1;
  wire [18:0] reinterpret6_output_port_net;
  wire [18:0] reinterpret7_output_port_net;
  wire [18:0] reinterpret8_output_port_net;
  wire [47:0] reinterpret96_output_port_net;
  wire [17:0] reinterpret9_output_port_net;
  wire [17:0] reinterpret_output_port_net;

  assign ce_1_sg_x61 = ce_1;
  assign clk_1_sg_x61 = clk_1;
  assign reinterpret5_output_port_net_x1 = xn;
  assign y1 = delay1_q_net_x0;
  assign y2 = convert3_dout_net_x0;


  constant_ab52c706fe  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_c61f683a87  constant2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant2_op_net)
  );

  constant_f944da36b2  constant3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant3_op_net)
  );

  constant_e50ce26af4  constant32 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant32_op_net)
  );

  constant_8bfd575960  constant33 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant33_op_net)
  );

  constant_a75cf5751a  constant4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant4_op_net)
  );

  constant_3a33d08f5d  constant5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant5_op_net)
  );

  constant_bae102145d  constant6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant6_op_net)
  );

  constant_2a8a740f47  constant7 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant7_op_net)
  );

  constant_9094152419  constant8 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant8_op_net)
  );

  constant_f2e18047a9  constant9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant9_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret6_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret24_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert10 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret5_output_port_net),
    .en(1'b1),
    .dout(convert10_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert11 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert11_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert12 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret8_output_port_net),
    .en(1'b1),
    .dout(convert12_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert13 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret15_output_port_net),
    .en(1'b1),
    .dout(convert13_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert14 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret17_output_port_net),
    .en(1'b1),
    .dout(convert14_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert15 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret18_output_port_net),
    .en(1'b1),
    .dout(convert15_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert16 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert16_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert17 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret21_output_port_net),
    .en(1'b1),
    .dout(convert17_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert18 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret23_output_port_net),
    .en(1'b1),
    .dout(convert18_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert19 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret2_output_port_net),
    .en(1'b1),
    .dout(convert19_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert20 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret7_output_port_net),
    .en(1'b1),
    .dout(convert20_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert21 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret10_output_port_net),
    .en(1'b1),
    .dout(convert21_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert3 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(delay13_q_net),
    .en(1'b1),
    .dout(convert3_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret14_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret22_output_port_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(35),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert64 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret96_output_port_net),
    .en(1'b1),
    .dout(convert64_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret13_output_port_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .clr(1'b0),
    .din(reinterpret12_output_port_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldelay #(

    .latency(17),
    .reg_retiming(0),
    .width(19))
  delay (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .d(reinterpret5_output_port_net_x1),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .d(convert64_dout_net),
    .en(1'b1),
    .q(delay1_q_net_x0)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(19))
  delay13 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .d(delay3_q_net),
    .en(1'b1),
    .q(delay13_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(19))
  delay2 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(19))
  delay3 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay3_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(19))
  delay4 (
    .ce(ce_1_sg_x61),
    .clk(clk_1_sg_x61),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(1),
    .adreg(1),
    .alumodereg(1),
    .areg(1),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1 (
    .a(convert_dout_net),
    .alumode(4'b0000),
    .b(convert5_dout_net),
    .c(constant32_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert1_dout_net),
    .en(1'b1),
    .op(opmode_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_acout_net),
    .pcout(dsp48e1_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_1 (
    .acin(dsp48e1_2_acout_net),
    .alumode(4'b0000),
    .b(convert19_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert2_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_2_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_1_p_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_16 (
    .acin(dsp48e1_6_acout_net),
    .alumode(4'b0000),
    .b(convert13_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert12_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_6_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_16_acout_net),
    .pcout(dsp48e1_16_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_17 (
    .acin(dsp48e1_18_acout_net),
    .alumode(4'b0000),
    .b(convert17_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert14_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_18_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_17_acout_net),
    .pcout(dsp48e1_17_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_18 (
    .acin(dsp48e1_16_acout_net),
    .alumode(4'b0000),
    .b(convert16_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert6_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_16_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_18_acout_net),
    .pcout(dsp48e1_18_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_19 (
    .acin(dsp48e1_17_acout_net),
    .alumode(4'b0000),
    .b(convert18_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert15_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_17_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_19_acout_net),
    .pcout(dsp48e1_19_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_2 (
    .acin(dsp48e1_19_acout_net),
    .alumode(4'b0000),
    .b(convert21_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert20_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_19_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_2_acout_net),
    .pcout(dsp48e1_2_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(1),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .acin(dsp48e1_acout_net),
    .alumode(4'b0000),
    .b(convert7_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert9_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_4_acout_net),
    .pcout(dsp48e1_4_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_5 (
    .acin(dsp48e1_4_acout_net),
    .alumode(4'b0000),
    .b(convert8_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert10_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_4_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_5_acout_net),
    .pcout(dsp48e1_5_pcout_net)
  );

  xldsp48e1 #(

    .a_input("CASCADE"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(0),
    .c_use_acin(1),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_6 (
    .acin(dsp48e1_5_acout_net),
    .alumode(4'b0000),
    .b(convert11_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x61),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x61),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_5_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .acout(dsp48e1_6_acout_net),
    .pcout(dsp48e1_6_pcout_net)
  );

  opmode_de16be0052  opmode (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode_op_net)
  );

  opmode_96dace4a09  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_0e0c011a4e  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant33_op_net),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay3_q_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant9_op_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret12 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay2_q_net),
    .output_port(reinterpret12_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret13 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant3_op_net),
    .output_port(reinterpret13_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret14 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay4_q_net),
    .output_port(reinterpret14_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret15 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant5_op_net),
    .output_port(reinterpret15_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret17 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay3_q_net),
    .output_port(reinterpret17_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret18 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay3_q_net),
    .output_port(reinterpret18_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant1_op_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret21 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant7_op_net),
    .output_port(reinterpret21_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret22 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay4_q_net),
    .output_port(reinterpret22_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret23 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant8_op_net),
    .output_port(reinterpret23_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret24 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay2_q_net),
    .output_port(reinterpret24_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant4_op_net),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant2_op_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay2_q_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(reinterpret5_output_port_net_x1),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret7 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay3_q_net),
    .output_port(reinterpret7_output_port_net)
  );

  reinterpret_f67f49dab9  reinterpret8 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay4_q_net),
    .output_port(reinterpret8_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant6_op_net),
    .output_port(reinterpret9_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret96 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_1_p_net),
    .output_port(reinterpret96_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF4 Filter/coef1_1"

module coef1_1_module_382002e7d9 (
  a,
  ce_1,
  clk_1,
  d,
  pcout
);

  input [15:0] a;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] d;
  output [47:0] pcout;

  wire [0:0] ce_1_sg_x67;
  wire [0:0] clk_1_sg_x67;
  wire [47:0] constant1_op_net;
  wire [17:0] constant_op_net;
  wire [17:0] convert1_dout_net;
  wire [24:0] convert2_dout_net;
  wire [24:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [15:0] delay1_q_net_x1;
  wire [15:0] delay5_q_net_x0;
  wire [47:0] dsp48e1_4_pcout_net_x0;
  wire [19:0] opmode1_op_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [15:0] reinterpret3_output_port_net;
  wire [15:0] reinterpret_output_port_net;

  assign delay1_q_net_x1 = a;
  assign ce_1_sg_x67 = ce_1;
  assign clk_1_sg_x67 = clk_1;
  assign delay5_q_net_x0 = d;
  assign pcout = dsp48e1_4_pcout_net_x0;


  constant_0823bf3a15  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_d1858fa188  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x67),
    .clk(clk_1_sg_x67),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x67),
    .clk(clk_1_sg_x67),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x67),
    .clk(clk_1_sg_x67),
    .clr(1'b0),
    .din(convert2_dout_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert5_dout_net),
    .alumode(4'b0000),
    .b(convert1_dout_net),
    .c(constant1_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x67),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x67),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .pcout(dsp48e1_4_pcout_net_x0)
  );

  opmode_6481474c6d  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_81b71e1f8b  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay1_q_net_x1),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant_op_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay5_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF4 Filter/coef3_1"

module coef3_1_module_64b2cb315e (
  a,
  ce_1,
  clk_1,
  d,
  pcin,
  pcout
);

  input [15:0] a;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] d;
  input [47:0] pcin;
  output [47:0] pcout;

  wire [0:0] ce_1_sg_x69;
  wire [0:0] clk_1_sg_x69;
  wire [17:0] constant_op_net;
  wire [17:0] convert1_dout_net;
  wire [24:0] convert2_dout_net;
  wire [24:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [15:0] delay8_q_net_x0;
  wire [15:0] delay9_q_net_x0;
  wire [47:0] dsp48e1_4_pcout_net_x1;
  wire [47:0] dsp48e1_4_pcout_net_x2;
  wire [19:0] opmode1_op_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [15:0] reinterpret3_output_port_net;
  wire [15:0] reinterpret_output_port_net;

  assign delay8_q_net_x0 = a;
  assign ce_1_sg_x69 = ce_1;
  assign clk_1_sg_x69 = clk_1;
  assign delay9_q_net_x0 = d;
  assign dsp48e1_4_pcout_net_x1 = pcin;
  assign pcout = dsp48e1_4_pcout_net_x2;


  constant_dad7ec4a11  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x69),
    .clk(clk_1_sg_x69),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x69),
    .clk(clk_1_sg_x69),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x69),
    .clk(clk_1_sg_x69),
    .clr(1'b0),
    .din(convert2_dout_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert5_dout_net),
    .alumode(4'b0000),
    .b(convert1_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x69),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x69),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_4_pcout_net_x1),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .pcout(dsp48e1_4_pcout_net_x2)
  );

  opmode_77dfa9804f  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_81b71e1f8b  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay8_q_net_x0),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant_op_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay9_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF4 Filter/coef3_2"

module coef3_2_module_6fb0883a89 (
  a,
  ce_1,
  clk_1,
  d,
  out_x0,
  pcin
);

  input [15:0] a;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] d;
  input [47:0] pcin;
  output [15:0] out_x0;

  wire [0:0] ce_1_sg_x70;
  wire [0:0] clk_1_sg_x70;
  wire [17:0] constant_op_net;
  wire [17:0] convert1_dout_net;
  wire [24:0] convert2_dout_net;
  wire [15:0] convert3_dout_net_x0;
  wire [24:0] convert4_dout_net;
  wire [29:0] convert5_dout_net;
  wire [15:0] delay10_q_net_x0;
  wire [15:0] delay11_q_net_x0;
  wire [47:0] dsp48e1_4_p_net;
  wire [47:0] dsp48e1_4_pcout_net_x3;
  wire [19:0] opmode1_op_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [47:0] reinterpret2_output_port_net;
  wire [15:0] reinterpret3_output_port_net;
  wire [15:0] reinterpret_output_port_net;

  assign delay10_q_net_x0 = a;
  assign ce_1_sg_x70 = ce_1;
  assign clk_1_sg_x70 = clk_1;
  assign delay11_q_net_x0 = d;
  assign out_x0 = convert3_dout_net_x0;
  assign dsp48e1_4_pcout_net_x3 = pcin;


  constant_c44270bde8  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(1'b1),
    .clk(1'b1),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x70),
    .clk(clk_1_sg_x70),
    .clr(1'b0),
    .din(reinterpret_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(32),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x70),
    .clk(clk_1_sg_x70),
    .clr(1'b0),
    .din(reinterpret2_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(25),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x70),
    .clk(clk_1_sg_x70),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(25),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x70),
    .clk(clk_1_sg_x70),
    .clr(1'b0),
    .din(convert2_dout_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(1),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert5_dout_net),
    .alumode(4'b0000),
    .b(convert1_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x70),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x70),
    .d(convert4_dout_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_4_pcout_net_x3),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_4_p_net)
  );

  opmode_77dfa9804f  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_81b71e1f8b  reinterpret (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay10_q_net_x0),
    .output_port(reinterpret_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(constant_op_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_4_p_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay11_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/HBF4 Filter"

module hbf4_filter_module_42671de005 (
  ce_1,
  clk_1,
  x1,
  x2,
  y1,
  y2,
  y3,
  y4
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] x1;
  input [15:0] x2;
  output [15:0] y1;
  output [15:0] y2;
  output [15:0] y3;
  output [15:0] y4;

  wire [0:0] ce_1_sg_x73;
  wire [0:0] clk_1_sg_x73;
  wire [15:0] convert3_dout_net_x0;
  wire [15:0] convert3_dout_net_x2;
  wire [15:0] convert3_dout_net_x3;
  wire [15:0] delay10_q_net_x0;
  wire [15:0] delay11_q_net_x0;
  wire [15:0] delay12_q_net_x0;
  wire [15:0] delay13_q_net_x0;
  wire [15:0] delay14_q_net_x0;
  wire [15:0] delay15_q_net_x0;
  wire [15:0] delay16_q_net_x0;
  wire [15:0] delay1_q_net_x0;
  wire [15:0] delay1_q_net_x2;
  wire [15:0] delay2_q_net;
  wire [15:0] delay3_q_net_x0;
  wire [15:0] delay4_q_net;
  wire [15:0] delay5_q_net_x0;
  wire [15:0] delay6_q_net_x0;
  wire [15:0] delay7_q_net_x0;
  wire [15:0] delay8_q_net_x0;
  wire [15:0] delay9_q_net_x0;
  wire [15:0] delay_q_net;
  wire [47:0] dsp48e1_4_pcout_net_x1;
  wire [47:0] dsp48e1_4_pcout_net_x2;
  wire [47:0] dsp48e1_4_pcout_net_x3;
  wire [47:0] dsp48e1_4_pcout_net_x4;

  assign ce_1_sg_x73 = ce_1;
  assign clk_1_sg_x73 = clk_1;
  assign delay1_q_net_x2 = x1;
  assign convert3_dout_net_x3 = x2;
  assign y1 = delay7_q_net_x0;
  assign y2 = delay3_q_net_x0;
  assign y3 = delay16_q_net_x0;
  assign y4 = delay15_q_net_x0;


  coef1_1_module_382002e7d9  coef1_1_382002e7d9 (
    .a(delay1_q_net_x2),
    .ce_1(ce_1_sg_x73),
    .clk_1(clk_1_sg_x73),
    .d(delay5_q_net_x0),
    .pcout(dsp48e1_4_pcout_net_x1)
  );

  coef1_1_module_382002e7d9  coef1_2_6ae83231ca (
    .a(convert3_dout_net_x3),
    .ce_1(ce_1_sg_x73),
    .clk_1(clk_1_sg_x73),
    .d(delay1_q_net_x0),
    .pcout(dsp48e1_4_pcout_net_x2)
  );

  coef3_1_module_64b2cb315e  coef3_1_64b2cb315e (
    .a(delay8_q_net_x0),
    .ce_1(ce_1_sg_x73),
    .clk_1(clk_1_sg_x73),
    .d(delay9_q_net_x0),
    .pcin(dsp48e1_4_pcout_net_x1),
    .pcout(dsp48e1_4_pcout_net_x3)
  );

  coef3_2_module_6fb0883a89  coef3_2_6fb0883a89 (
    .a(delay10_q_net_x0),
    .ce_1(ce_1_sg_x73),
    .clk_1(clk_1_sg_x73),
    .d(delay11_q_net_x0),
    .pcin(dsp48e1_4_pcout_net_x3),
    .out_x0(convert3_dout_net_x0)
  );

  coef3_1_module_64b2cb315e  coef3_3_f50e3a5826 (
    .a(delay6_q_net_x0),
    .ce_1(ce_1_sg_x73),
    .clk_1(clk_1_sg_x73),
    .d(delay12_q_net_x0),
    .pcin(dsp48e1_4_pcout_net_x2),
    .pcout(dsp48e1_4_pcout_net_x4)
  );

  coef3_2_module_6fb0883a89  coef3_4_64a1015523 (
    .a(delay13_q_net_x0),
    .ce_1(ce_1_sg_x73),
    .clk_1(clk_1_sg_x73),
    .d(delay14_q_net_x0),
    .pcin(dsp48e1_4_pcout_net_x4),
    .out_x0(convert3_dout_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay1_q_net_x2),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay1_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay10 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay10_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay11 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay4_q_net),
    .en(1'b1),
    .q(delay11_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay12 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay4_q_net),
    .en(1'b1),
    .q(delay12_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay13 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay2_q_net),
    .en(1'b1),
    .q(delay13_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay14 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay14_q_net_x0)
  );

  xldelay #(

    .latency(7),
    .reg_retiming(0),
    .width(16))
  delay15 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay2_q_net),
    .en(1'b1),
    .q(delay15_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay16 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(convert3_dout_net_x2),
    .en(1'b1),
    .q(delay16_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay2 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(convert3_dout_net_x3),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldelay #(

    .latency(7),
    .reg_retiming(0),
    .width(16))
  delay3 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay_q_net),
    .en(1'b1),
    .q(delay3_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay4 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay2_q_net),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay5 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay4_q_net),
    .en(1'b1),
    .q(delay5_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay6 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay1_q_net_x2),
    .en(1'b1),
    .q(delay6_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay7 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(convert3_dout_net_x0),
    .en(1'b1),
    .q(delay7_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay8 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay2_q_net),
    .en(1'b1),
    .q(delay8_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay9 (
    .ce(ce_1_sg_x73),
    .clk(clk_1_sg_x73),
    .d(delay1_q_net_x0),
    .en(1'b1),
    .q(delay9_q_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I0_calc"

module i0_calc_module_9f1f5e3668 (
  ce_1,
  clk_1,
  i,
  out1,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out1;

  wire [15:0] addsub1_s_net_x0;
  wire [0:0] ce_1_sg_x109;
  wire [0:0] clk_1_sg_x109;
  wire [15:0] constant1_op_net;
  wire [1:0] counter2_op_net_x0;
  wire [1:0] delay1_q_net;
  wire [15:0] delay24_q_net_x0;
  wire [15:0] delay28_q_net_x0;
  wire [0:0] delay_q_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux_y_net;

  assign ce_1_sg_x109 = ce_1;
  assign clk_1_sg_x109 = clk_1;
  assign delay24_q_net_x0 = i;
  assign out1 = addsub1_s_net_x0;
  assign delay28_q_net_x0 = q;
  assign counter2_op_net_x0 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(4),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(5),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(constant1_op_net),
    .b(mux_y_net),
    .ce(ce_1_sg_x109),
    .clk(clk_1_sg_x109),
    .clr(1'b0),
    .en(1'b1),
    .mode(delay_q_net),
    .s(addsub1_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(1))
  delay (
    .ce(ce_1_sg_x109),
    .clk(clk_1_sg_x109),
    .d(msb_y_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x109),
    .clk(clk_1_sg_x109),
    .d(counter2_op_net_x0),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_a6eee4b271  mux (
    .ce(ce_1_sg_x109),
    .clk(clk_1_sg_x109),
    .clr(1'b0),
    .d0(delay24_q_net_x0),
    .d1(delay28_q_net_x0),
    .d2(delay24_q_net_x0),
    .d3(delay28_q_net_x0),
    .sel(delay1_q_net),
    .y(mux_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I1_calc/sin(2*pi*3/16)"

module x16_module_19a625c1a6 (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in_x0;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub2_s_net;
  wire [15:0] addsub3_s_net;
  wire [15:0] addsub4_s_net_x0;
  wire [15:0] addsub5_s_net;
  wire [0:0] ce_1_sg_x110;
  wire [0:0] clk_1_sg_x110;
  wire [15:0] mux3_y_net_x0;
  wire [15:0] shift1_op_net;
  wire [15:0] shift2_op_net;
  wire [15:0] shift3_op_net;
  wire [15:0] shift4_op_net;
  wire [15:0] shift5_op_net;
  wire [15:0] shift6_op_net;
  wire [15:0] shift_op_net;

  assign ce_1_sg_x110 = ce_1;
  assign clk_1_sg_x110 = clk_1;
  assign mux3_y_net_x0 = in_x0;
  assign out_x0 = addsub4_s_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(shift_op_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub2 (
    .a(shift2_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_23630b5019bde586"),
    .extra_registers(1),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(2),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(mux3_y_net_x0),
    .b(shift5_op_net),
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub4 (
    .a(shift6_op_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub5 (
    .a(shift4_op_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net)
  );

  shift_12819d6cbe  shift (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(mux3_y_net_x0),
    .op(shift_op_net)
  );

  shift_4108be98c5  shift1 (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(mux3_y_net_x0),
    .op(shift1_op_net)
  );

  shift_5447e0aa7e  shift2 (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(addsub5_s_net),
    .op(shift2_op_net)
  );

  shift_4108be98c5  shift3 (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(mux3_y_net_x0),
    .op(shift3_op_net)
  );

  shift_a05534ab8e  shift4 (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(mux3_y_net_x0),
    .op(shift4_op_net)
  );

  shift_1aa26d2e4f  shift5 (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(mux3_y_net_x0),
    .op(shift5_op_net)
  );

  shift_5447e0aa7e  shift6 (
    .ce(ce_1_sg_x110),
    .clk(clk_1_sg_x110),
    .clr(1'b0),
    .ip(addsub2_s_net),
    .op(shift6_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I1_calc/sin(2*pi/16)"

module x16_module_becd43a54a (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in_x0;
  output [15:0] out_x0;

  wire [19:0] addsub1_s_net;
  wire [19:0] addsub2_s_net;
  wire [19:0] addsub_s_net;
  wire [0:0] ce_1_sg_x111;
  wire [0:0] clk_1_sg_x111;
  wire [15:0] convert1_dout_net_x0;
  wire [19:0] convert_dout_net;
  wire [15:0] mux2_y_net_x0;
  wire [19:0] shift1_op_net;
  wire [19:0] shift2_op_net;
  wire [19:0] shift3_op_net;
  wire [19:0] shift4_op_net;
  wire [19:0] shift6_op_net;
  wire [19:0] shift_op_net;

  assign ce_1_sg_x111 = ce_1;
  assign clk_1_sg_x111 = clk_1;
  assign mux2_y_net_x0 = in_x0;
  assign out_x0 = convert1_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub (
    .a(shift1_op_net),
    .b(shift_op_net),
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e342234b3f808cc6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub1 (
    .a(shift3_op_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub2 (
    .a(shift6_op_net),
    .b(shift4_op_net),
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(19),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .din(mux2_y_net_x0),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert1 (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert1_dout_net_x0)
  );

  shift_997986a690  shift (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift_op_net)
  );

  shift_7d97a52cb7  shift1 (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift1_op_net)
  );

  shift_9f4e80fae7  shift2 (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift2_op_net)
  );

  shift_7d97a52cb7  shift3 (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift3_op_net)
  );

  shift_c6a2804ac2  shift4 (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .ip(addsub1_s_net),
    .op(shift4_op_net)
  );

  shift_7d97a52cb7  shift6 (
    .ce(ce_1_sg_x111),
    .clk(clk_1_sg_x111),
    .clr(1'b0),
    .ip(addsub_s_net),
    .op(shift6_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I1_calc"

module i1_calc_module_999e3d4f4d (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x112;
  wire [0:0] clk_1_sg_x112;
  wire [15:0] constant1_op_net;
  wire [0:0] convert1_dout_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter2_op_net_x1;
  wire [1:0] delay1_q_net;
  wire [15:0] delay25_q_net_x0;
  wire [15:0] delay29_q_net_x0;
  wire [0:0] delay2_q_net;
  wire [0:0] inverter_op_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x112 = ce_1;
  assign clk_1_sg_x112 = clk_1;
  assign delay25_q_net_x0 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay29_q_net_x0 = q;
  assign counter2_op_net_x1 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(convert1_dout_net_x0),
    .b(addsub4_s_net_x0),
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert_dout_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert1_dout_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .din(inverter_op_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .din(delay2_q_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .d(counter2_op_net_x1),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(5),
    .reg_retiming(0),
    .width(1))
  delay2 (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .d(msb_y_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  inverter_48d1f6b088  inverter (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .ip(lsb_y_net),
    .op(inverter_op_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .d0(delay25_q_net_x0),
    .d1(delay29_q_net_x0),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x112),
    .clk(clk_1_sg_x112),
    .clr(1'b0),
    .d0(delay29_q_net_x0),
    .d1(delay25_q_net_x0),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_19a625c1a6  x16_19a625c1a6 (
    .ce_1(ce_1_sg_x112),
    .clk_1(clk_1_sg_x112),
    .in_x0(mux3_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );

  x16_module_becd43a54a  x16_becd43a54a (
    .ce_1(ce_1_sg_x112),
    .clk_1(clk_1_sg_x112),
    .in_x0(mux2_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I2_calc/cos(2*pi*2/16)"

module x16_module_63d8fc50b4 (
  ce_1,
  clk_1,
  in_x0,
  out_x0
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [16:0] in_x0;
  output [15:0] out_x0;

  wire [19:0] addsub1_s_net;
  wire [19:0] addsub2_s_net_x0;
  wire [16:0] addsub2_s_net_x1;
  wire [19:0] addsub3_s_net;
  wire [19:0] addsub4_s_net;
  wire [19:0] addsub5_s_net;
  wire [0:0] ce_1_sg_x113;
  wire [0:0] clk_1_sg_x113;
  wire [15:0] convert1_dout_net_x0;
  wire [19:0] convert_dout_net;
  wire [19:0] shift1_op_net;
  wire [19:0] shift2_op_net;
  wire [19:0] shift3_op_net;
  wire [19:0] shift4_op_net;
  wire [19:0] shift5_op_net;
  wire [19:0] shift6_op_net;
  wire [19:0] shift8_op_net;
  wire [19:0] shift_op_net;

  assign ce_1_sg_x113 = ce_1;
  assign clk_1_sg_x113 = clk_1;
  assign addsub2_s_net_x1 = in_x0;
  assign out_x0 = convert1_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub1 (
    .a(shift4_op_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub2 (
    .a(shift6_op_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub3 (
    .a(shift_op_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(19),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(19),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub4 (
    .a(shift8_op_net),
    .b(addsub5_s_net),
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(20),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(20),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(21),
    .core_name0("addsb_11_0_e9a94c669f456a3b"),
    .extra_registers(1),
    .full_s_arith(2),
    .full_s_width(21),
    .latency(2),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(19),
    .s_width(20))
  addsub5 (
    .a(shift2_op_net),
    .b(shift5_op_net),
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(20),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .din(addsub2_s_net_x1),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(19),
    .din_width(20),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert1 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .din(addsub4_s_net),
    .en(1'b1),
    .dout(convert1_dout_net_x0)
  );

  shift_0b767c7711  shift (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift_op_net)
  );

  shift_7d97a52cb7  shift1 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift1_op_net)
  );

  shift_0b767c7711  shift2 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift2_op_net)
  );

  shift_7d97a52cb7  shift3 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift3_op_net)
  );

  shift_18b87c12cf  shift4 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift4_op_net)
  );

  shift_7d97a52cb7  shift5 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift5_op_net)
  );

  shift_2422c3ab70  shift6 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(addsub1_s_net),
    .op(shift6_op_net)
  );

  shift_69971e276f  shift8 (
    .ce(ce_1_sg_x113),
    .clk(clk_1_sg_x113),
    .clr(1'b0),
    .ip(addsub2_s_net_x0),
    .op(shift8_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I2_calc"

module i2_calc_module_3342bbfec5 (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [16:0] addsub2_s_net_x1;
  wire [15:0] addsub3_s_net_x0;
  wire [0:0] ce_1_sg_x114;
  wire [0:0] clk_1_sg_x114;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [1:0] counter2_op_net_x2;
  wire [1:0] delay1_q_net;
  wire [15:0] delay26_q_net_x0;
  wire [15:0] delay30_q_net_x0;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;

  assign ce_1_sg_x114 = ce_1;
  assign clk_1_sg_x114 = clk_1;
  assign delay26_q_net_x0 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay30_q_net_x0 = q;
  assign counter2_op_net_x2 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub2 (
    .a(delay26_q_net_x0),
    .b(delay30_q_net_x0),
    .ce(ce_1_sg_x114),
    .clk(clk_1_sg_x114),
    .clr(1'b0),
    .en(1'b1),
    .mode(lsb_y_net),
    .s(addsub2_s_net_x1)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x114),
    .clk(clk_1_sg_x114),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x114),
    .clk(clk_1_sg_x114),
    .d(counter2_op_net_x2),
    .en(1'b1),
    .q(delay1_q_net)
  );

  logical_06844c65fb  logical (
    .ce(ce_1_sg_x114),
    .clk(clk_1_sg_x114),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  x16_module_63d8fc50b4  x16_63d8fc50b4 (
    .ce_1(ce_1_sg_x114),
    .clk_1(clk_1_sg_x114),
    .in_x0(addsub2_s_net_x1),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/I3_calc"

module i3_calc_module_135d3dbd7e (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x117;
  wire [0:0] clk_1_sg_x117;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter2_op_net_x3;
  wire [1:0] delay1_q_net;
  wire [15:0] delay27_q_net_x0;
  wire [15:0] delay31_q_net_x0;
  wire [0:0] inverter1_op_net;
  wire [0:0] inverter_op_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x117 = ce_1;
  assign clk_1_sg_x117 = clk_1;
  assign delay27_q_net_x0 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay31_q_net_x0 = q;
  assign counter2_op_net_x3 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(addsub4_s_net_x0),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert_dout_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .en(1'b1),
    .mode(inverter1_op_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .din(inverter_op_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .d(counter2_op_net_x3),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_48d1f6b088  inverter (
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .ip(lsb_y_net),
    .op(inverter_op_net)
  );

  inverter_66c3795ede  inverter1 (
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .ip(msb_y_net),
    .op(inverter1_op_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .d0(delay27_q_net_x0),
    .d1(delay31_q_net_x0),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x117),
    .clk(clk_1_sg_x117),
    .clr(1'b0),
    .d0(delay31_q_net_x0),
    .d1(delay27_q_net_x0),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_becd43a54a  x16_b55551104c (
    .ce_1(ce_1_sg_x117),
    .clk_1(clk_1_sg_x117),
    .in_x0(mux3_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );

  x16_module_19a625c1a6  x16_dc53860d3f (
    .ce_1(ce_1_sg_x117),
    .clk_1(clk_1_sg_x117),
    .in_x0(mux2_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/Q0_calc"

module q0_calc_module_81e8cec6ca (
  ce_1,
  clk_1,
  i,
  out1,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out1;

  wire [15:0] addsub1_s_net_x0;
  wire [0:0] ce_1_sg_x118;
  wire [0:0] clk_1_sg_x118;
  wire [15:0] constant1_op_net;
  wire [1:0] counter1_op_net_x0;
  wire [1:0] delay1_q_net;
  wire [15:0] delay24_q_net_x1;
  wire [15:0] delay28_q_net_x1;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux_y_net;

  assign ce_1_sg_x118 = ce_1;
  assign clk_1_sg_x118 = clk_1;
  assign delay24_q_net_x1 = i;
  assign out1 = addsub1_s_net_x0;
  assign delay28_q_net_x1 = q;
  assign counter1_op_net_x0 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(4),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(5),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(constant1_op_net),
    .b(mux_y_net),
    .ce(ce_1_sg_x118),
    .clk(clk_1_sg_x118),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub1_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x118),
    .clk(clk_1_sg_x118),
    .d(counter1_op_net_x0),
    .en(1'b1),
    .q(delay1_q_net)
  );

  logical_8641388092  logical (
    .ce(ce_1_sg_x118),
    .clk(clk_1_sg_x118),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_a6eee4b271  mux (
    .ce(ce_1_sg_x118),
    .clk(clk_1_sg_x118),
    .clr(1'b0),
    .d0(delay28_q_net_x1),
    .d1(delay24_q_net_x1),
    .d2(delay28_q_net_x1),
    .d3(delay24_q_net_x1),
    .sel(delay1_q_net),
    .y(mux_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/Q1_calc"

module q1_calc_module_0d51101bf3 (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x121;
  wire [0:0] clk_1_sg_x121;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [1:0] counter1_op_net_x1;
  wire [1:0] delay1_q_net;
  wire [15:0] delay25_q_net_x1;
  wire [15:0] delay29_q_net_x1;
  wire [0:0] delay2_q_net;
  wire [0:0] delay_q_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x121 = ce_1;
  assign clk_1_sg_x121 = clk_1;
  assign delay25_q_net_x1 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay29_q_net_x1 = q;
  assign counter1_op_net_x1 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(addsub4_s_net_x0),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .clr(1'b0),
    .en(1'b1),
    .mode(delay_q_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .clr(1'b0),
    .en(1'b1),
    .mode(delay2_q_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(1))
  delay (
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .d(lsb_y_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .d(counter1_op_net_x1),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(5),
    .reg_retiming(0),
    .width(1))
  delay2 (
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .d(msb_y_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .clr(1'b0),
    .d0(delay25_q_net_x1),
    .d1(delay29_q_net_x1),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x121),
    .clk(clk_1_sg_x121),
    .clr(1'b0),
    .d0(delay29_q_net_x1),
    .d1(delay25_q_net_x1),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_becd43a54a  x16_261a466db5 (
    .ce_1(ce_1_sg_x121),
    .clk_1(clk_1_sg_x121),
    .in_x0(mux3_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );

  x16_module_19a625c1a6  x16_58da7abb65 (
    .ce_1(ce_1_sg_x121),
    .clk_1(clk_1_sg_x121),
    .in_x0(mux2_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/Q2_calc"

module q2_calc_module_3d6c7a669f (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [16:0] addsub2_s_net_x1;
  wire [15:0] addsub3_s_net_x0;
  wire [0:0] ce_1_sg_x123;
  wire [0:0] clk_1_sg_x123;
  wire [15:0] constant1_op_net;
  wire [0:0] convert1_dout_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter1_op_net_x2;
  wire [1:0] delay1_q_net;
  wire [15:0] delay26_q_net_x1;
  wire [15:0] delay30_q_net_x1;
  wire [0:0] delay_q_net;
  wire [0:0] inverter_op_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;

  assign ce_1_sg_x123 = ce_1;
  assign clk_1_sg_x123 = clk_1;
  assign delay26_q_net_x1 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay30_q_net_x1 = q;
  assign counter1_op_net_x2 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub2 (
    .a(delay26_q_net_x1),
    .b(delay30_q_net_x1),
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert1_dout_net),
    .s(addsub2_s_net_x1)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert_dout_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .clr(1'b0),
    .din(delay_q_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .clr(1'b0),
    .din(inverter_op_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xldelay #(

    .latency(5),
    .reg_retiming(0),
    .width(1))
  delay (
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .d(msb_y_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .d(counter1_op_net_x2),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_33a63b558a  inverter (
    .ce(ce_1_sg_x123),
    .clk(clk_1_sg_x123),
    .clr(1'b0),
    .ip(lsb_y_net),
    .op(inverter_op_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  x16_module_63d8fc50b4  x16_46ade3120a (
    .ce_1(ce_1_sg_x123),
    .clk_1(clk_1_sg_x123),
    .in_x0(addsub2_s_net_x1),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3/Q3_calc"

module q3_calc_module_af2120fa6f (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x126;
  wire [0:0] clk_1_sg_x126;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter1_op_net_x3;
  wire [1:0] delay1_q_net;
  wire [15:0] delay27_q_net_x1;
  wire [15:0] delay31_q_net_x1;
  wire [0:0] delay_q_net;
  wire [0:0] inverter_op_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x126 = ce_1;
  assign clk_1_sg_x126 = clk_1;
  assign delay27_q_net_x1 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay31_q_net_x1 = q;
  assign counter1_op_net_x3 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(convert1_dout_net_x0),
    .b(addsub4_s_net_x0),
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .clr(1'b0),
    .en(1'b1),
    .mode(delay_q_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .clr(1'b0),
    .en(1'b1),
    .mode(inverter_op_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .clr(1'b0),
    .din(lsb_y_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(1))
  delay (
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .d(convert_dout_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .d(counter1_op_net_x3),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_66c3795ede  inverter (
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .clr(1'b0),
    .ip(msb_y_net),
    .op(inverter_op_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .clr(1'b0),
    .d0(delay27_q_net_x1),
    .d1(delay31_q_net_x1),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x126),
    .clk(clk_1_sg_x126),
    .clr(1'b0),
    .d0(delay31_q_net_x1),
    .d1(delay27_q_net_x1),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_becd43a54a  x16_5ec90f58a5 (
    .ce_1(ce_1_sg_x126),
    .clk_1(clk_1_sg_x126),
    .in_x0(mux2_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );

  x16_module_19a625c1a6  x16_c6993b458c (
    .ce_1(ce_1_sg_x126),
    .clk_1(clk_1_sg_x126),
    .in_x0(mux3_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_band3"

module mixer1536_band3_module_800ec86a93 (
  ce_1,
  clk_1,
  i0,
  i0_out,
  i1,
  i1_out,
  i2,
  i2_out,
  i3,
  i3_out,
  q0,
  q0_out,
  q1,
  q1_out,
  q2,
  q2_out,
  q3,
  q3_out
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i0;
  input [15:0] i1;
  input [15:0] i2;
  input [15:0] i3;
  input [15:0] q0;
  input [15:0] q1;
  input [15:0] q2;
  input [15:0] q3;
  output [15:0] i0_out;
  output [15:0] i1_out;
  output [15:0] i2_out;
  output [15:0] i3_out;
  output [15:0] q0_out;
  output [15:0] q1_out;
  output [15:0] q2_out;
  output [15:0] q3_out;

  wire [15:0] addsub1_s_net_x2;
  wire [15:0] addsub1_s_net_x3;
  wire [15:0] addsub3_s_net_x10;
  wire [15:0] addsub3_s_net_x11;
  wire [15:0] addsub3_s_net_x6;
  wire [15:0] addsub3_s_net_x7;
  wire [15:0] addsub3_s_net_x8;
  wire [15:0] addsub3_s_net_x9;
  wire [0:0] ce_1_sg_x127;
  wire [0:0] clk_1_sg_x127;
  wire [1:0] counter1_op_net_x3;
  wire [1:0] counter2_op_net_x3;
  wire [15:0] delay24_q_net_x2;
  wire [15:0] delay25_q_net_x2;
  wire [15:0] delay26_q_net_x2;
  wire [15:0] delay27_q_net_x2;
  wire [15:0] delay28_q_net_x2;
  wire [15:0] delay29_q_net_x2;
  wire [15:0] delay30_q_net_x2;
  wire [15:0] delay31_q_net_x2;

  assign ce_1_sg_x127 = ce_1;
  assign clk_1_sg_x127 = clk_1;
  assign delay24_q_net_x2 = i0;
  assign i0_out = addsub1_s_net_x2;
  assign delay25_q_net_x2 = i1;
  assign i1_out = addsub3_s_net_x6;
  assign delay26_q_net_x2 = i2;
  assign i2_out = addsub3_s_net_x7;
  assign delay27_q_net_x2 = i3;
  assign i3_out = addsub3_s_net_x8;
  assign delay28_q_net_x2 = q0;
  assign q0_out = addsub1_s_net_x3;
  assign delay29_q_net_x2 = q1;
  assign q1_out = addsub3_s_net_x9;
  assign delay30_q_net_x2 = q2;
  assign q2_out = addsub3_s_net_x10;
  assign delay31_q_net_x2 = q3;
  assign q3_out = addsub3_s_net_x11;


  xlcounter_free #(

    .core_name0("cntr_11_0_096c03c2da659b51"),
    .op_arith(`xlUnsigned),
    .op_width(2))
  counter1 (
    .ce(ce_1_sg_x127),
    .clk(clk_1_sg_x127),
    .clr(1'b0),
    .en(1'b1),
    .rst(1'b0),
    .op(counter1_op_net_x3)
  );

  xlcounter_free #(

    .core_name0("cntr_11_0_096c03c2da659b51"),
    .op_arith(`xlUnsigned),
    .op_width(2))
  counter2 (
    .ce(ce_1_sg_x127),
    .clk(clk_1_sg_x127),
    .clr(1'b0),
    .en(1'b1),
    .rst(1'b0),
    .op(counter2_op_net_x3)
  );

  i0_calc_module_9f1f5e3668  i0_calc_9f1f5e3668 (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay24_q_net_x2),
    .q(delay28_q_net_x2),
    .sel(counter2_op_net_x3),
    .out1(addsub1_s_net_x2)
  );

  i1_calc_module_999e3d4f4d  i1_calc_999e3d4f4d (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay25_q_net_x2),
    .q(delay29_q_net_x2),
    .sel(counter2_op_net_x3),
    .out_x0(addsub3_s_net_x6)
  );

  i2_calc_module_3342bbfec5  i2_calc_3342bbfec5 (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay26_q_net_x2),
    .q(delay30_q_net_x2),
    .sel(counter2_op_net_x3),
    .out_x0(addsub3_s_net_x7)
  );

  i3_calc_module_135d3dbd7e  i3_calc_135d3dbd7e (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay27_q_net_x2),
    .q(delay31_q_net_x2),
    .sel(counter2_op_net_x3),
    .out_x0(addsub3_s_net_x8)
  );

  q0_calc_module_81e8cec6ca  q0_calc_81e8cec6ca (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay24_q_net_x2),
    .q(delay28_q_net_x2),
    .sel(counter1_op_net_x3),
    .out1(addsub1_s_net_x3)
  );

  q1_calc_module_0d51101bf3  q1_calc_0d51101bf3 (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay25_q_net_x2),
    .q(delay29_q_net_x2),
    .sel(counter1_op_net_x3),
    .out_x0(addsub3_s_net_x9)
  );

  q2_calc_module_3d6c7a669f  q2_calc_3d6c7a669f (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay26_q_net_x2),
    .q(delay30_q_net_x2),
    .sel(counter1_op_net_x3),
    .out_x0(addsub3_s_net_x10)
  );

  q3_calc_module_af2120fa6f  q3_calc_af2120fa6f (
    .ce_1(ce_1_sg_x127),
    .clk_1(clk_1_sg_x127),
    .i(delay27_q_net_x2),
    .q(delay31_q_net_x2),
    .sel(counter1_op_net_x3),
    .out_x0(addsub3_s_net_x11)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/I0_calc"

module i0_calc_module_d0dd1ba635 (
  ce_1,
  clk_1,
  i,
  out1,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out1;

  wire [15:0] addsub1_s_net_x0;
  wire [0:0] ce_1_sg_x128;
  wire [0:0] clk_1_sg_x128;
  wire [15:0] constant1_op_net;
  wire [1:0] counter2_op_net_x0;
  wire [15:0] delay12_q_net_x0;
  wire [1:0] delay1_q_net;
  wire [15:0] delay8_q_net_x0;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux_y_net;

  assign ce_1_sg_x128 = ce_1;
  assign clk_1_sg_x128 = clk_1;
  assign delay8_q_net_x0 = i;
  assign out1 = addsub1_s_net_x0;
  assign delay12_q_net_x0 = q;
  assign counter2_op_net_x0 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(4),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(5),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(constant1_op_net),
    .b(mux_y_net),
    .ce(ce_1_sg_x128),
    .clk(clk_1_sg_x128),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub1_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x128),
    .clk(clk_1_sg_x128),
    .d(counter2_op_net_x0),
    .en(1'b1),
    .q(delay1_q_net)
  );

  logical_8641388092  logical (
    .ce(ce_1_sg_x128),
    .clk(clk_1_sg_x128),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_a6eee4b271  mux (
    .ce(ce_1_sg_x128),
    .clk(clk_1_sg_x128),
    .clr(1'b0),
    .d0(delay8_q_net_x0),
    .d1(delay12_q_net_x0),
    .d2(delay8_q_net_x0),
    .d3(delay12_q_net_x0),
    .sel(delay1_q_net),
    .y(mux_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/I1_calc"

module i1_calc_module_b3926fd0be (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x131;
  wire [0:0] clk_1_sg_x131;
  wire [15:0] constant1_op_net;
  wire [0:0] convert1_dout_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter2_op_net_x1;
  wire [15:0] delay13_q_net_x0;
  wire [1:0] delay1_q_net;
  wire [0:0] delay3_q_net;
  wire [15:0] delay9_q_net_x0;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x131 = ce_1;
  assign clk_1_sg_x131 = clk_1;
  assign delay9_q_net_x0 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay13_q_net_x0 = q;
  assign counter2_op_net_x1 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(convert1_dout_net_x0),
    .b(addsub4_s_net_x0),
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert_dout_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert1_dout_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .din(delay3_q_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .din(logical_y_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .d(counter2_op_net_x1),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(1))
  delay3 (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .d(lsb_y_net),
    .en(1'b1),
    .q(delay3_q_net)
  );

  logical_d5c14b9908  logical (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .d0(delay9_q_net_x0),
    .d1(delay13_q_net_x0),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x131),
    .clk(clk_1_sg_x131),
    .clr(1'b0),
    .d0(delay13_q_net_x0),
    .d1(delay9_q_net_x0),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_becd43a54a  x16_5a86153a6a (
    .ce_1(ce_1_sg_x131),
    .clk_1(clk_1_sg_x131),
    .in_x0(mux2_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );

  x16_module_19a625c1a6  x16_7776586819 (
    .ce_1(ce_1_sg_x131),
    .clk_1(clk_1_sg_x131),
    .in_x0(mux3_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/I2_calc"

module i2_calc_module_e5fd09d2f3 (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [16:0] addsub2_s_net_x1;
  wire [15:0] addsub3_s_net_x0;
  wire [0:0] ce_1_sg_x133;
  wire [0:0] clk_1_sg_x133;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [1:0] counter2_op_net_x2;
  wire [15:0] delay10_q_net_x0;
  wire [15:0] delay14_q_net_x0;
  wire [1:0] delay1_q_net;
  wire [0:0] inverter_op_net;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;

  assign ce_1_sg_x133 = ce_1;
  assign clk_1_sg_x133 = clk_1;
  assign delay10_q_net_x0 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay14_q_net_x0 = q;
  assign counter2_op_net_x2 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub2 (
    .a(delay10_q_net_x0),
    .b(delay14_q_net_x0),
    .ce(ce_1_sg_x133),
    .clk(clk_1_sg_x133),
    .clr(1'b0),
    .en(1'b1),
    .mode(inverter_op_net),
    .s(addsub2_s_net_x1)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x133),
    .clk(clk_1_sg_x133),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x133),
    .clk(clk_1_sg_x133),
    .d(counter2_op_net_x2),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_33a63b558a  inverter (
    .ce(ce_1_sg_x133),
    .clk(clk_1_sg_x133),
    .clr(1'b0),
    .ip(lsb_y_net),
    .op(inverter_op_net)
  );

  logical_06844c65fb  logical (
    .ce(ce_1_sg_x133),
    .clk(clk_1_sg_x133),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  x16_module_63d8fc50b4  x16_f73ad73902 (
    .ce_1(ce_1_sg_x133),
    .clk_1(clk_1_sg_x133),
    .in_x0(addsub2_s_net_x1),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/I3_calc"

module i3_calc_module_b834a1d5a8 (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x136;
  wire [0:0] clk_1_sg_x136;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter2_op_net_x3;
  wire [15:0] delay11_q_net_x0;
  wire [15:0] delay15_q_net_x0;
  wire [1:0] delay1_q_net;
  wire [0:0] delay2_q_net;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x136 = ce_1;
  assign clk_1_sg_x136 = clk_1;
  assign delay11_q_net_x0 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay15_q_net_x0 = q;
  assign counter2_op_net_x3 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(addsub4_s_net_x0),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert_dout_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .clr(1'b0),
    .din(delay2_q_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .d(counter2_op_net_x3),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(1))
  delay2 (
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .d(lsb_y_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  logical_06844c65fb  logical (
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .clr(1'b0),
    .d0(delay11_q_net_x0),
    .d1(delay15_q_net_x0),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x136),
    .clk(clk_1_sg_x136),
    .clr(1'b0),
    .d0(delay15_q_net_x0),
    .d1(delay11_q_net_x0),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_19a625c1a6  x16_51f1465d99 (
    .ce_1(ce_1_sg_x136),
    .clk_1(clk_1_sg_x136),
    .in_x0(mux2_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );

  x16_module_becd43a54a  x16_b037820fa4 (
    .ce_1(ce_1_sg_x136),
    .clk_1(clk_1_sg_x136),
    .in_x0(mux3_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/Q0_calc"

module q0_calc_module_0a6d9381da (
  ce_1,
  clk_1,
  i,
  out1,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out1;

  wire [15:0] addsub1_s_net_x0;
  wire [0:0] ce_1_sg_x137;
  wire [0:0] clk_1_sg_x137;
  wire [15:0] constant1_op_net;
  wire [1:0] counter1_op_net_x0;
  wire [15:0] delay12_q_net_x1;
  wire [1:0] delay1_q_net;
  wire [0:0] delay2_q_net;
  wire [15:0] delay8_q_net_x1;
  wire [0:0] msb_y_net;
  wire [15:0] mux_y_net;

  assign ce_1_sg_x137 = ce_1;
  assign clk_1_sg_x137 = clk_1;
  assign delay8_q_net_x1 = i;
  assign out1 = addsub1_s_net_x0;
  assign delay12_q_net_x1 = q;
  assign counter1_op_net_x0 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(4),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(5),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(constant1_op_net),
    .b(mux_y_net),
    .ce(ce_1_sg_x137),
    .clk(clk_1_sg_x137),
    .clr(1'b0),
    .en(1'b1),
    .mode(delay2_q_net),
    .s(addsub1_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x137),
    .clk(clk_1_sg_x137),
    .d(counter1_op_net_x0),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(1))
  delay2 (
    .ce(ce_1_sg_x137),
    .clk(clk_1_sg_x137),
    .d(msb_y_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_a6eee4b271  mux (
    .ce(ce_1_sg_x137),
    .clk(clk_1_sg_x137),
    .clr(1'b0),
    .d0(delay12_q_net_x1),
    .d1(delay8_q_net_x1),
    .d2(delay12_q_net_x1),
    .d3(delay8_q_net_x1),
    .sel(delay1_q_net),
    .y(mux_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/Q1_calc"

module q1_calc_module_6d24599b63 (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x140;
  wire [0:0] clk_1_sg_x140;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [1:0] counter1_op_net_x1;
  wire [15:0] delay13_q_net_x1;
  wire [1:0] delay1_q_net;
  wire [15:0] delay9_q_net_x1;
  wire [0:0] inverter1_op_net;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x140 = ce_1;
  assign clk_1_sg_x140 = clk_1;
  assign delay9_q_net_x1 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay13_q_net_x1 = q;
  assign counter1_op_net_x1 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(addsub4_s_net_x0),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .clr(1'b0),
    .en(1'b1),
    .mode(inverter1_op_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .d(counter1_op_net_x1),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_48d1f6b088  inverter1 (
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .clr(1'b0),
    .ip(lsb_y_net),
    .op(inverter1_op_net)
  );

  logical_06844c65fb  logical (
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .clr(1'b0),
    .d0(delay9_q_net_x1),
    .d1(delay13_q_net_x1),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x140),
    .clk(clk_1_sg_x140),
    .clr(1'b0),
    .d0(delay13_q_net_x1),
    .d1(delay9_q_net_x1),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_19a625c1a6  x16_3ce49263be (
    .ce_1(ce_1_sg_x140),
    .clk_1(clk_1_sg_x140),
    .in_x0(mux2_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );

  x16_module_becd43a54a  x16_4ea0a71e79 (
    .ce_1(ce_1_sg_x140),
    .clk_1(clk_1_sg_x140),
    .in_x0(mux3_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/Q2_calc"

module q2_calc_module_be1a299fdb (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [16:0] addsub2_s_net_x1;
  wire [15:0] addsub3_s_net_x0;
  wire [0:0] ce_1_sg_x142;
  wire [0:0] clk_1_sg_x142;
  wire [15:0] constant1_op_net;
  wire [0:0] convert1_dout_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter1_op_net_x2;
  wire [15:0] delay10_q_net_x1;
  wire [15:0] delay14_q_net_x1;
  wire [1:0] delay1_q_net;
  wire [0:0] inverter1_op_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;

  assign ce_1_sg_x142 = ce_1;
  assign clk_1_sg_x142 = clk_1;
  assign delay10_q_net_x1 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay14_q_net_x1 = q;
  assign counter1_op_net_x2 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub2 (
    .a(delay10_q_net_x1),
    .b(delay14_q_net_x1),
    .ce(ce_1_sg_x142),
    .clk(clk_1_sg_x142),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert1_dout_net),
    .s(addsub2_s_net_x1)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x142),
    .clk(clk_1_sg_x142),
    .clr(1'b0),
    .en(1'b1),
    .mode(convert_dout_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x142),
    .clk(clk_1_sg_x142),
    .clr(1'b0),
    .din(inverter1_op_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x142),
    .clk(clk_1_sg_x142),
    .clr(1'b0),
    .din(lsb_y_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x142),
    .clk(clk_1_sg_x142),
    .d(counter1_op_net_x2),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_66c3795ede  inverter1 (
    .ce(ce_1_sg_x142),
    .clk(clk_1_sg_x142),
    .clr(1'b0),
    .ip(msb_y_net),
    .op(inverter1_op_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  x16_module_63d8fc50b4  x16_61cf62bf9a (
    .ce_1(ce_1_sg_x142),
    .clk_1(clk_1_sg_x142),
    .in_x0(addsub2_s_net_x1),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3/Q3_calc"

module q3_calc_module_2156576458 (
  ce_1,
  clk_1,
  i,
  out_x0,
  q,
  sel
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i;
  input [15:0] q;
  input [1:0] sel;
  output [15:0] out_x0;

  wire [15:0] addsub1_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub4_s_net_x0;
  wire [0:0] ce_1_sg_x145;
  wire [0:0] clk_1_sg_x145;
  wire [15:0] constant1_op_net;
  wire [15:0] convert1_dout_net_x0;
  wire [0:0] convert_dout_net;
  wire [1:0] counter1_op_net_x3;
  wire [15:0] delay11_q_net_x1;
  wire [15:0] delay15_q_net_x1;
  wire [1:0] delay1_q_net;
  wire [0:0] inverter2_op_net;
  wire [0:0] logical_y_net;
  wire [0:0] lsb_y_net;
  wire [0:0] msb_y_net;
  wire [15:0] mux2_y_net_x0;
  wire [15:0] mux3_y_net_x0;

  assign ce_1_sg_x145 = ce_1;
  assign clk_1_sg_x145 = clk_1;
  assign delay11_q_net_x1 = i;
  assign out_x0 = addsub3_s_net_x0;
  assign delay15_q_net_x1 = q;
  assign counter1_op_net_x3 = sel;


  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(convert1_dout_net_x0),
    .b(addsub4_s_net_x0),
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .en(1'b1),
    .mode(inverter2_op_net),
    .s(addsub1_s_net)
  );

  xladdsubmode #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_f9ccbdc7584d43c6"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .mode_arith(`xlUnsigned),
    .mode_bin_pt(0),
    .mode_width(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(constant1_op_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .en(1'b1),
    .mode(logical_y_net),
    .s(addsub3_s_net_x0)
  );

  constant_e578b14849  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  xlconvert #(

    .bool_conversion(1),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(1),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(1),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .din(lsb_y_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xldelay #(

    .latency(4),
    .reg_retiming(0),
    .width(2))
  delay1 (
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .d(counter1_op_net_x3),
    .en(1'b1),
    .q(delay1_q_net)
  );

  inverter_48d1f6b088  inverter2 (
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(inverter2_op_net)
  );

  logical_d5c14b9908  logical (
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .d0(msb_y_net),
    .d1(lsb_y_net),
    .y(logical_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(0),
    .x_width(2),
    .y_width(1))
  lsb (
    .x(delay1_q_net),
    .y(lsb_y_net)
  );

  xlslice #(

    .new_lsb(1),
    .new_msb(1),
    .x_width(2),
    .y_width(1))
  msb (
    .x(delay1_q_net),
    .y(msb_y_net)
  );

  mux_f3921567cd  mux2 (
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .d0(delay11_q_net_x1),
    .d1(delay15_q_net_x1),
    .sel(lsb_y_net),
    .y(mux2_y_net_x0)
  );

  mux_f3921567cd  mux3 (
    .ce(ce_1_sg_x145),
    .clk(clk_1_sg_x145),
    .clr(1'b0),
    .d0(delay15_q_net_x1),
    .d1(delay11_q_net_x1),
    .sel(lsb_y_net),
    .y(mux3_y_net_x0)
  );

  x16_module_19a625c1a6  x16_5493396c52 (
    .ce_1(ce_1_sg_x145),
    .clk_1(clk_1_sg_x145),
    .in_x0(mux3_y_net_x0),
    .out_x0(addsub4_s_net_x0)
  );

  x16_module_becd43a54a  x16_5f6bca131e (
    .ce_1(ce_1_sg_x145),
    .clk_1(clk_1_sg_x145),
    .in_x0(mux2_y_net_x0),
    .out_x0(convert1_dout_net_x0)
  );
endmodule
// Generated from Simulink block "duc_341MHz/MIXER1536_minus_band3"

module mixer1536_minus_band3_module_212d868d6c (
  ce_1,
  clk_1,
  i0,
  i0_out,
  i1,
  i1_out,
  i2,
  i2_out,
  i3,
  i3_out,
  q0,
  q0_out,
  q1,
  q1_out,
  q2,
  q2_out,
  q3,
  q3_out
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] i0;
  input [15:0] i1;
  input [15:0] i2;
  input [15:0] i3;
  input [15:0] q0;
  input [15:0] q1;
  input [15:0] q2;
  input [15:0] q3;
  output [15:0] i0_out;
  output [15:0] i1_out;
  output [15:0] i2_out;
  output [15:0] i3_out;
  output [15:0] q0_out;
  output [15:0] q1_out;
  output [15:0] q2_out;
  output [15:0] q3_out;

  wire [15:0] addsub1_s_net_x2;
  wire [15:0] addsub1_s_net_x3;
  wire [15:0] addsub3_s_net_x10;
  wire [15:0] addsub3_s_net_x11;
  wire [15:0] addsub3_s_net_x6;
  wire [15:0] addsub3_s_net_x7;
  wire [15:0] addsub3_s_net_x8;
  wire [15:0] addsub3_s_net_x9;
  wire [0:0] ce_1_sg_x146;
  wire [0:0] clk_1_sg_x146;
  wire [1:0] counter1_op_net_x3;
  wire [1:0] counter2_op_net_x3;
  wire [15:0] delay10_q_net_x2;
  wire [15:0] delay11_q_net_x2;
  wire [15:0] delay12_q_net_x2;
  wire [15:0] delay13_q_net_x2;
  wire [15:0] delay14_q_net_x2;
  wire [15:0] delay15_q_net_x2;
  wire [15:0] delay8_q_net_x2;
  wire [15:0] delay9_q_net_x2;

  assign ce_1_sg_x146 = ce_1;
  assign clk_1_sg_x146 = clk_1;
  assign delay8_q_net_x2 = i0;
  assign i0_out = addsub1_s_net_x2;
  assign delay9_q_net_x2 = i1;
  assign i1_out = addsub3_s_net_x6;
  assign delay10_q_net_x2 = i2;
  assign i2_out = addsub3_s_net_x7;
  assign delay11_q_net_x2 = i3;
  assign i3_out = addsub3_s_net_x8;
  assign delay12_q_net_x2 = q0;
  assign q0_out = addsub1_s_net_x3;
  assign delay13_q_net_x2 = q1;
  assign q1_out = addsub3_s_net_x9;
  assign delay14_q_net_x2 = q2;
  assign q2_out = addsub3_s_net_x10;
  assign delay15_q_net_x2 = q3;
  assign q3_out = addsub3_s_net_x11;


  xlcounter_free #(

    .core_name0("cntr_11_0_096c03c2da659b51"),
    .op_arith(`xlUnsigned),
    .op_width(2))
  counter1 (
    .ce(ce_1_sg_x146),
    .clk(clk_1_sg_x146),
    .clr(1'b0),
    .en(1'b1),
    .rst(1'b0),
    .op(counter1_op_net_x3)
  );

  xlcounter_free #(

    .core_name0("cntr_11_0_096c03c2da659b51"),
    .op_arith(`xlUnsigned),
    .op_width(2))
  counter2 (
    .ce(ce_1_sg_x146),
    .clk(clk_1_sg_x146),
    .clr(1'b0),
    .en(1'b1),
    .rst(1'b0),
    .op(counter2_op_net_x3)
  );

  i0_calc_module_d0dd1ba635  i0_calc_d0dd1ba635 (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay8_q_net_x2),
    .q(delay12_q_net_x2),
    .sel(counter2_op_net_x3),
    .out1(addsub1_s_net_x2)
  );

  i1_calc_module_b3926fd0be  i1_calc_b3926fd0be (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay9_q_net_x2),
    .q(delay13_q_net_x2),
    .sel(counter2_op_net_x3),
    .out_x0(addsub3_s_net_x6)
  );

  i2_calc_module_e5fd09d2f3  i2_calc_e5fd09d2f3 (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay10_q_net_x2),
    .q(delay14_q_net_x2),
    .sel(counter2_op_net_x3),
    .out_x0(addsub3_s_net_x7)
  );

  i3_calc_module_b834a1d5a8  i3_calc_b834a1d5a8 (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay11_q_net_x2),
    .q(delay15_q_net_x2),
    .sel(counter2_op_net_x3),
    .out_x0(addsub3_s_net_x8)
  );

  q0_calc_module_0a6d9381da  q0_calc_0a6d9381da (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay8_q_net_x2),
    .q(delay12_q_net_x2),
    .sel(counter1_op_net_x3),
    .out1(addsub1_s_net_x3)
  );

  q1_calc_module_6d24599b63  q1_calc_6d24599b63 (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay9_q_net_x2),
    .q(delay13_q_net_x2),
    .sel(counter1_op_net_x3),
    .out_x0(addsub3_s_net_x9)
  );

  q2_calc_module_be1a299fdb  q2_calc_be1a299fdb (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay10_q_net_x2),
    .q(delay14_q_net_x2),
    .sel(counter1_op_net_x3),
    .out_x0(addsub3_s_net_x10)
  );

  q3_calc_module_2156576458  q3_calc_2156576458 (
    .ce_1(ce_1_sg_x146),
    .clk_1(clk_1_sg_x146),
    .i(delay11_q_net_x2),
    .q(delay15_q_net_x2),
    .sel(counter1_op_net_x3),
    .out_x0(addsub3_s_net_x11)
  );
endmodule
// Generated from Simulink block "duc_341MHz/Mixer1/LO"

module lo_module_5b39f16f19 (
  ce_1,
  clk_1,
  cos,
  freq_word,
  sin
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [9:0] freq_word;
  output [17:0] cos;
  output [17:0] sin;

  wire [9:0] accumulator_q_net;
  wire [9:0] addsub_s_net;
  wire [0:0] ce_1_sg_x147;
  wire [0:0] clk_1_sg_x147;
  wire [17:0] constant1_op_net;
  wire [9:0] constant2_op_net;
  wire [0:0] constant_op_net;
  wire [17:0] delay1_q_net_x0;
  wire [17:0] delay2_q_net_x0;
  wire [9:0] delay_q_net;
  wire [17:0] dual_port_ram_douta_net;
  wire [17:0] dual_port_ram_doutb_net;
  wire [9:0] freq_word1_net_x0;

  assign ce_1_sg_x147 = ce_1;
  assign clk_1_sg_x147 = clk_1;
  assign cos = delay2_q_net_x0;
  assign freq_word1_net_x0 = freq_word;
  assign sin = delay1_q_net_x0;


  accum_8dccba219b  accumulator (
    .b(freq_word1_net_x0),
    .ce(ce_1_sg_x147),
    .clk(clk_1_sg_x147),
    .clr(1'b0),
    .q(accumulator_q_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(10))
  addsub (
    .a(accumulator_q_net),
    .b(constant2_op_net),
    .ce(ce_1_sg_x147),
    .clk(clk_1_sg_x147),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  constant_9e4532c332  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_f46b665cdd  constant2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant2_op_net)
  );

  constant_ae323e07fc  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(10))
  delay (
    .ce(ce_1_sg_x147),
    .clk(clk_1_sg_x147),
    .d(accumulator_q_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay1 (
    .ce(ce_1_sg_x147),
    .clk(clk_1_sg_x147),
    .d(dual_port_ram_douta_net),
    .en(1'b1),
    .q(delay1_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay2 (
    .ce(ce_1_sg_x147),
    .clk(clk_1_sg_x147),
    .d(dual_port_ram_doutb_net),
    .en(1'b1),
    .q(delay2_q_net_x0)
  );

  xldpram #(

    .c_address_width_a(10),
    .c_address_width_b(10),
    .c_width_a(18),
    .c_width_b(18),
    .core_name0("bmg_62_f5dda5f8f757e285"),
    .latency(2))
  dual_port_ram (
    .a_ce(ce_1_sg_x147),
    .a_clk(clk_1_sg_x147),
    .addra(delay_q_net),
    .addrb(addsub_s_net),
    .b_ce(ce_1_sg_x147),
    .b_clk(clk_1_sg_x147),
    .dina(constant1_op_net),
    .dinb(constant1_op_net),
    .ena(1'b1),
    .enb(1'b1),
    .rsta(1'b0),
    .rstb(1'b0),
    .wea(constant_op_net),
    .web(constant_op_net),
    .douta(dual_port_ram_douta_net),
    .doutb(dual_port_ram_doutb_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/Mixer1"

module mixer1_module_53ccf2fc2a (
  ce_1,
  clk_1,
  freq_word,
  i,
  iout,
  q,
  qout
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [9:0] freq_word;
  input [15:0] i;
  input [15:0] q;
  output [15:0] iout;
  output [15:0] qout;

  wire [0:0] ce_1_sg_x148;
  wire [0:0] clk_1_sg_x148;
  wire [47:0] constant1_op_net;
  wire [47:0] constant2_op_net;
  wire [24:0] constant_op_net;
  wire [17:0] convert10_dout_net;
  wire [29:0] convert11_dout_net;
  wire [29:0] convert2_dout_net;
  wire [29:0] convert3_dout_net;
  wire [15:0] convert4_dout_net_x0;
  wire [15:0] convert5_dout_net_x0;
  wire [29:0] convert6_dout_net;
  wire [17:0] convert7_dout_net;
  wire [17:0] convert8_dout_net;
  wire [17:0] convert9_dout_net;
  wire [15:0] delay15_q_net_x1;
  wire [15:0] delay15_q_net_x2;
  wire [17:0] delay1_q_net_x0;
  wire [17:0] delay2_q_net_x0;
  wire [47:0] dsp48e1_1_pcout_net;
  wire [47:0] dsp48e1_2_p_net;
  wire [47:0] dsp48e1_4_p_net;
  wire [47:0] dsp48e1_pcout_net;
  wire [9:0] freq_word1_net_x1;
  wire [19:0] opmode1_op_net;
  wire [19:0] opmode2_op_net;
  wire [19:0] opmode_op_net;
  wire [15:0] reinterpret10_output_port_net;
  wire [17:0] reinterpret1_output_port_net;
  wire [15:0] reinterpret2_output_port_net;
  wire [17:0] reinterpret3_output_port_net;
  wire [17:0] reinterpret4_output_port_net;
  wire [15:0] reinterpret5_output_port_net;
  wire [17:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret7_output_port_net;
  wire [47:0] reinterpret8_output_port_net;
  wire [47:0] reinterpret9_output_port_net;

  assign ce_1_sg_x148 = ce_1;
  assign clk_1_sg_x148 = clk_1;
  assign freq_word1_net_x1 = freq_word;
  assign delay15_q_net_x1 = i;
  assign iout = convert4_dout_net_x0;
  assign delay15_q_net_x2 = q;
  assign qout = convert5_dout_net_x0;


  constant_0823bf3a15  constant1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant1_op_net)
  );

  constant_0823bf3a15  constant2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant2_op_net)
  );

  constant_ffa119e374  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert10 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret6_output_port_net),
    .en(1'b1),
    .dout(convert10_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert11 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret10_output_port_net),
    .en(1'b1),
    .dout(convert11_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret7_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret5_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(32),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret8_output_port_net),
    .en(1'b1),
    .dout(convert4_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(32),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert5_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret2_output_port_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x148),
    .clk(clk_1_sg_x148),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(1),
    .adreg(0),
    .alumodereg(1),
    .areg(1),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(1),
    .breg(1),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(0),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("FALSE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1 (
    .a(convert11_dout_net),
    .alumode(4'b0000),
    .b(convert10_dout_net),
    .c(constant2_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x148),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x148),
    .en(1'b1),
    .op(opmode_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .pcout(dsp48e1_pcout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(1),
    .adreg(0),
    .alumodereg(1),
    .areg(1),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(1),
    .breg(1),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(0),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("FALSE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_1 (
    .a(convert2_dout_net),
    .alumode(4'b0000),
    .b(convert8_dout_net),
    .c(constant1_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x148),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x148),
    .en(1'b1),
    .op(opmode_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .pcout(dsp48e1_1_pcout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(0),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(0),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("FALSE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_2 (
    .a(convert3_dout_net),
    .alumode(4'b0000),
    .b(convert9_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x148),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x148),
    .en(1'b1),
    .op(opmode2_op_net),
    .pcin(dsp48e1_1_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_2_p_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(1),
    .adreg(1),
    .alumodereg(1),
    .areg(1),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert6_dout_net),
    .alumode(4'b0000),
    .b(convert7_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x148),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x148),
    .d(constant_op_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_4_p_net)
  );

  lo_module_5b39f16f19  lo_5b39f16f19 (
    .ce_1(ce_1_sg_x148),
    .clk_1(clk_1_sg_x148),
    .freq_word(freq_word1_net_x1),
    .cos(delay2_q_net_x0),
    .sin(delay1_q_net_x0)
  );

  opmode_2a00e03ade  opmode (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode_op_net)
  );

  opmode_6aca2f0a6e  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  opmode_bddb7c5c56  opmode2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode2_op_net)
  );

  reinterpret_0e0c011a4e  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay1_q_net_x0),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay15_q_net_x1),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay15_q_net_x2),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay1_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay2_q_net_x0),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay15_q_net_x2),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay2_q_net_x0),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret7 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay15_q_net_x1),
    .output_port(reinterpret7_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret8 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_4_p_net),
    .output_port(reinterpret8_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_2_p_net),
    .output_port(reinterpret9_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/RF_mixer/Mixer4096_0"

module mixer4096_0_module_72c5552fbb (
  addr,
  ce_1,
  clk_1,
  i,
  iout,
  q
);

  input [9:0] addr;
  input [0:0] ce_1;
  input [0:0] clk_1;
  input [17:0] i;
  input [17:0] q;
  output [13:0] iout;

  wire [17:0] addsub5_s_net_x1;
  wire [17:0] addsub5_s_net_x2;
  wire [0:0] ce_1_sg_x195;
  wire [0:0] clk_1_sg_x195;
  wire [47:0] constant2_op_net;
  wire [24:0] constant_op_net;
  wire [17:0] convert10_dout_net;
  wire [29:0] convert11_dout_net;
  wire [13:0] convert2_dout_net;
  wire [29:0] convert3_dout_net;
  wire [17:0] convert5_dout_net;
  wire [17:0] delay1_q_net;
  wire [13:0] delay2_q_net_x0;
  wire [17:0] delay_q_net_x0;
  wire [9:0] delay_q_net_x1;
  wire [47:0] dsp48e1_4_p_net;
  wire [47:0] dsp48e1_pcout_net;
  wire [19:0] opmode1_op_net;
  wire [19:0] opmode_op_net;
  wire [17:0] reinterpret10_output_port_net;
  wire [17:0] reinterpret3_output_port_net;
  wire [17:0] reinterpret4_output_port_net;
  wire [17:0] reinterpret5_output_port_net;
  wire [47:0] reinterpret7_output_port_net;
  wire [17:0] sin_lut1_data_net;
  wire [17:0] sin_lut_data_net;

  assign delay_q_net_x1 = addr;
  assign ce_1_sg_x195 = ce_1;
  assign clk_1_sg_x195 = clk_1;
  assign addsub5_s_net_x1 = i;
  assign iout = delay2_q_net_x0;
  assign addsub5_s_net_x2 = q;


  constant_f1b4aa180c  constant2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant2_op_net)
  );

  constant_ffa119e374  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert10 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .clr(1'b0),
    .din(reinterpret5_output_port_net),
    .en(1'b1),
    .dout(convert10_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert11 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .clr(1'b0),
    .din(reinterpret10_output_port_net),
    .en(1'b1),
    .dout(convert11_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(34),
    .din_width(48),
    .dout_arith(2),
    .dout_bin_pt(13),
    .dout_width(14),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .clr(1'b0),
    .din(reinterpret7_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(0),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .d(sin_lut_data_net),
    .en(1'b1),
    .q(delay_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay1 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .d(sin_lut1_data_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(14))
  delay2 (
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .d(convert2_dout_net),
    .en(1'b1),
    .q(delay2_q_net_x0)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(1),
    .adreg(0),
    .alumodereg(1),
    .areg(1),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(1),
    .breg(1),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(1),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(1),
    .dreg(0),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(1),
    .use_dport("FALSE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1 (
    .a(convert11_dout_net),
    .alumode(4'b0000),
    .b(convert10_dout_net),
    .c(constant2_op_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x195),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x195),
    .en(1'b1),
    .op(opmode_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .pcout(dsp48e1_pcout_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(1),
    .adreg(1),
    .alumodereg(1),
    .areg(1),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(1),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(1),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("TRUE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1_4 (
    .a(convert3_dout_net),
    .alumode(4'b0000),
    .b(convert5_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x195),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x195),
    .d(constant_op_net),
    .en(1'b1),
    .op(opmode1_op_net),
    .pcin(dsp48e1_pcout_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_4_p_net)
  );

  opmode_2a00e03ade  opmode (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode_op_net)
  );

  opmode_6aca2f0a6e  opmode1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode1_op_net)
  );

  reinterpret_0e0c011a4e  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(addsub5_s_net_x1),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay_q_net_x0),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(addsub5_s_net_x2),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_0e0c011a4e  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay1_q_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_5668f8e576  reinterpret7 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_4_p_net),
    .output_port(reinterpret7_output_port_net)
  );

  xlsprom #(

    .c_address_width(10),
    .c_width(18),
    .core_name0("bmg_62_317c2c92f6abd64e"),
    .latency(1))
  sin_lut (
    .addr(delay_q_net_x1),
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .en(1'b1),
    .rst(1'b0),
    .data(sin_lut_data_net)
  );

  xlsprom #(

    .c_address_width(10),
    .c_width(18),
    .core_name0("bmg_62_7e8eaec1029d9f73"),
    .latency(1))
  sin_lut1 (
    .addr(delay_q_net_x1),
    .ce(ce_1_sg_x195),
    .clk(clk_1_sg_x195),
    .en(1'b1),
    .rst(1'b0),
    .data(sin_lut1_data_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/RF_mixer"

module rf_mixer_module_089a594eba (
  ce_1,
  clk_1,
  freq_word1,
  freq_word10,
  freq_word11,
  freq_word12,
  freq_word2,
  freq_word3,
  freq_word4,
  freq_word5,
  freq_word6,
  freq_word7,
  freq_word8,
  freq_word9,
  i1,
  i10,
  i11,
  i12,
  i2,
  i3,
  i4,
  i5,
  i6,
  i7,
  i8,
  i9,
  out1,
  out10,
  out11,
  out12,
  out2,
  out3,
  out4,
  out5,
  out6,
  out7,
  out8,
  out9,
  q1,
  q10,
  q11,
  q12,
  q2,
  q3,
  q4,
  q5,
  q6,
  q7,
  q8,
  q9
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [9:0] freq_word1;
  input [9:0] freq_word10;
  input [9:0] freq_word11;
  input [9:0] freq_word12;
  input [9:0] freq_word2;
  input [9:0] freq_word3;
  input [9:0] freq_word4;
  input [9:0] freq_word5;
  input [9:0] freq_word6;
  input [9:0] freq_word7;
  input [9:0] freq_word8;
  input [9:0] freq_word9;
  input [17:0] i1;
  input [17:0] i10;
  input [17:0] i11;
  input [17:0] i12;
  input [17:0] i2;
  input [17:0] i3;
  input [17:0] i4;
  input [17:0] i5;
  input [17:0] i6;
  input [17:0] i7;
  input [17:0] i8;
  input [17:0] i9;
  input [17:0] q1;
  input [17:0] q10;
  input [17:0] q11;
  input [17:0] q12;
  input [17:0] q2;
  input [17:0] q3;
  input [17:0] q4;
  input [17:0] q5;
  input [17:0] q6;
  input [17:0] q7;
  input [17:0] q8;
  input [17:0] q9;
  output [13:0] out1;
  output [13:0] out10;
  output [13:0] out11;
  output [13:0] out12;
  output [13:0] out2;
  output [13:0] out3;
  output [13:0] out4;
  output [13:0] out5;
  output [13:0] out6;
  output [13:0] out7;
  output [13:0] out8;
  output [13:0] out9;

  wire [10:0] addsub10_s_net;
  wire [10:0] addsub11_s_net;
  wire [10:0] addsub12_s_net;
  wire [9:0] addsub1_s_net;
  wire [10:0] addsub2_s_net;
  wire [10:0] addsub3_s_net;
  wire [10:0] addsub4_s_net;
  wire [10:0] addsub5_s_net;
  wire [17:0] addsub5_s_net_x25;
  wire [17:0] addsub5_s_net_x26;
  wire [17:0] addsub5_s_net_x27;
  wire [17:0] addsub5_s_net_x28;
  wire [17:0] addsub5_s_net_x29;
  wire [17:0] addsub5_s_net_x30;
  wire [17:0] addsub5_s_net_x31;
  wire [17:0] addsub5_s_net_x32;
  wire [17:0] addsub5_s_net_x33;
  wire [17:0] addsub5_s_net_x34;
  wire [17:0] addsub5_s_net_x35;
  wire [17:0] addsub5_s_net_x36;
  wire [17:0] addsub5_s_net_x37;
  wire [17:0] addsub5_s_net_x38;
  wire [17:0] addsub5_s_net_x39;
  wire [17:0] addsub5_s_net_x40;
  wire [17:0] addsub5_s_net_x41;
  wire [17:0] addsub5_s_net_x42;
  wire [17:0] addsub5_s_net_x43;
  wire [17:0] addsub5_s_net_x44;
  wire [17:0] addsub5_s_net_x45;
  wire [17:0] addsub5_s_net_x46;
  wire [17:0] addsub5_s_net_x47;
  wire [17:0] addsub5_s_net_x48;
  wire [10:0] addsub6_s_net;
  wire [10:0] addsub7_s_net;
  wire [10:0] addsub8_s_net;
  wire [10:0] addsub9_s_net;
  wire [0:0] ce_1_sg_x207;
  wire [0:0] clk_1_sg_x207;
  wire [9:0] constant2_op_net;
  wire [9:0] convert10_dout_net_x1;
  wire [9:0] convert11_dout_net_x1;
  wire [9:0] convert12_dout_net_x0;
  wire [9:0] convert13_dout_net_x0;
  wire [29:0] convert14_dout_net;
  wire [17:0] convert15_dout_net;
  wire [9:0] convert16_dout_net;
  wire [9:0] convert3_dout_net_x1;
  wire [9:0] convert4_dout_net_x0;
  wire [9:0] convert5_dout_net_x1;
  wire [9:0] convert6_dout_net_x0;
  wire [9:0] convert7_dout_net_x0;
  wire [9:0] convert8_dout_net_x0;
  wire [9:0] convert9_dout_net_x0;
  wire [9:0] delay1_q_net;
  wire [9:0] delay2_q_net;
  wire [13:0] delay2_q_net_x12;
  wire [13:0] delay2_q_net_x13;
  wire [13:0] delay2_q_net_x14;
  wire [13:0] delay2_q_net_x15;
  wire [13:0] delay2_q_net_x16;
  wire [13:0] delay2_q_net_x17;
  wire [13:0] delay2_q_net_x18;
  wire [13:0] delay2_q_net_x19;
  wire [13:0] delay2_q_net_x20;
  wire [13:0] delay2_q_net_x21;
  wire [13:0] delay2_q_net_x22;
  wire [13:0] delay2_q_net_x23;
  wire [9:0] delay3_q_net;
  wire [9:0] delay4_q_net;
  wire [9:0] delay_q_net_x1;
  wire [47:0] dsp48e1_p_net;
  wire [9:0] freq_word24_net_x0;
  wire [9:0] freq_word25_net_x0;
  wire [9:0] freq_word26_net_x0;
  wire [9:0] freq_word27_net_x0;
  wire [9:0] freq_word28_net_x0;
  wire [9:0] freq_word29_net_x0;
  wire [9:0] freq_word30_net_x0;
  wire [9:0] freq_word31_net_x0;
  wire [9:0] freq_word32_net_x0;
  wire [9:0] freq_word33_net_x0;
  wire [9:0] freq_word34_net_x0;
  wire [9:0] freq_word35_net_x0;
  wire [19:0] opmode_op_net;
  wire [47:0] reinterpret1_output_port_net;

  assign ce_1_sg_x207 = ce_1;
  assign clk_1_sg_x207 = clk_1;
  assign freq_word24_net_x0 = freq_word1;
  assign freq_word25_net_x0 = freq_word10;
  assign freq_word26_net_x0 = freq_word11;
  assign freq_word27_net_x0 = freq_word12;
  assign freq_word28_net_x0 = freq_word2;
  assign freq_word29_net_x0 = freq_word3;
  assign freq_word30_net_x0 = freq_word4;
  assign freq_word31_net_x0 = freq_word5;
  assign freq_word32_net_x0 = freq_word6;
  assign freq_word33_net_x0 = freq_word7;
  assign freq_word34_net_x0 = freq_word8;
  assign freq_word35_net_x0 = freq_word9;
  assign addsub5_s_net_x25 = i1;
  assign addsub5_s_net_x28 = i10;
  assign addsub5_s_net_x35 = i11;
  assign addsub5_s_net_x36 = i12;
  assign addsub5_s_net_x29 = i2;
  assign addsub5_s_net_x30 = i3;
  assign addsub5_s_net_x26 = i4;
  assign addsub5_s_net_x31 = i5;
  assign addsub5_s_net_x32 = i6;
  assign addsub5_s_net_x27 = i7;
  assign addsub5_s_net_x33 = i8;
  assign addsub5_s_net_x34 = i9;
  assign out1 = delay2_q_net_x12;
  assign out10 = delay2_q_net_x23;
  assign out11 = delay2_q_net_x14;
  assign out12 = delay2_q_net_x15;
  assign out2 = delay2_q_net_x13;
  assign out3 = delay2_q_net_x16;
  assign out4 = delay2_q_net_x17;
  assign out5 = delay2_q_net_x18;
  assign out6 = delay2_q_net_x19;
  assign out7 = delay2_q_net_x20;
  assign out8 = delay2_q_net_x21;
  assign out9 = delay2_q_net_x22;
  assign addsub5_s_net_x37 = q1;
  assign addsub5_s_net_x40 = q10;
  assign addsub5_s_net_x47 = q11;
  assign addsub5_s_net_x48 = q12;
  assign addsub5_s_net_x41 = q2;
  assign addsub5_s_net_x42 = q3;
  assign addsub5_s_net_x38 = q4;
  assign addsub5_s_net_x43 = q5;
  assign addsub5_s_net_x44 = q6;
  assign addsub5_s_net_x39 = q7;
  assign addsub5_s_net_x45 = q8;
  assign addsub5_s_net_x46 = q9;


  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(10))
  addsub1 (
    .a(addsub1_s_net),
    .b(constant2_op_net),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub10 (
    .a(delay3_q_net),
    .b(freq_word25_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub10_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub11 (
    .a(delay3_q_net),
    .b(freq_word26_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub11_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub12 (
    .a(delay3_q_net),
    .b(freq_word27_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub12_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub2 (
    .a(delay1_q_net),
    .b(freq_word28_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub3 (
    .a(delay1_q_net),
    .b(freq_word29_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub4 (
    .a(delay2_q_net),
    .b(freq_word30_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub5 (
    .a(delay2_q_net),
    .b(freq_word31_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub6 (
    .a(delay2_q_net),
    .b(freq_word32_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub7 (
    .a(delay4_q_net),
    .b(freq_word33_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub7_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub8 (
    .a(delay4_q_net),
    .b(freq_word34_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub8_s_net)
  );

  xladdsub #(

    .a_arith(`xlUnsigned),
    .a_bin_pt(0),
    .a_width(10),
    .b_arith(`xlUnsigned),
    .b_bin_pt(0),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_64bb7cb6774745cb"),
    .extra_registers(0),
    .full_s_arith(1),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlUnsigned),
    .s_bin_pt(0),
    .s_width(11))
  addsub9 (
    .a(delay4_q_net),
    .b(freq_word35_net_x0),
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub9_s_net)
  );

  constant_6692871198  constant2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant2_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert10 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub8_s_net),
    .en(1'b1),
    .dout(convert10_dout_net_x1)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert11 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub10_s_net),
    .en(1'b1),
    .dout(convert11_dout_net_x1)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert12 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub11_s_net),
    .en(1'b1),
    .dout(convert12_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert13 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub12_s_net),
    .en(1'b1),
    .dout(convert13_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(30),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert14 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert14_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert15 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(freq_word24_net_x0),
    .en(1'b1),
    .dout(convert15_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(48),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert16 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert16_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert3_dout_net_x1)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert4_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub5_s_net),
    .en(1'b1),
    .dout(convert5_dout_net_x1)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub4_s_net),
    .en(1'b1),
    .dout(convert6_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub7_s_net),
    .en(1'b1),
    .dout(convert7_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub6_s_net),
    .en(1'b1),
    .dout(convert8_dout_net_x0)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(11),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .clr(1'b0),
    .din(addsub9_s_net),
    .en(1'b1),
    .dout(convert9_dout_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(10))
  delay (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .d(delay1_q_net),
    .en(1'b1),
    .q(delay_q_net_x1)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(10))
  delay1 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .d(convert16_dout_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(10))
  delay2 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .d(convert16_dout_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(10))
  delay3 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .d(convert16_dout_net),
    .en(1'b1),
    .q(delay3_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(10))
  delay4 (
    .ce(ce_1_sg_x207),
    .clk(clk_1_sg_x207),
    .d(convert16_dout_net),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldsp48e1 #(

    .a_input("DIRECT"),
    .acascreg(2),
    .adreg(0),
    .alumodereg(1),
    .areg(2),
    .autoreset_pattern_detect("NO_RESET"),
    .b_input("DIRECT"),
    .bcascreg(2),
    .breg(2),
    .c_use_a(1),
    .c_use_acin(0),
    .c_use_b(1),
    .c_use_bcin(0),
    .c_use_c(0),
    .c_use_cea1(0),
    .c_use_cea2(0),
    .c_use_cead(0),
    .c_use_cealumode(0),
    .c_use_ceb1(0),
    .c_use_ceb2(0),
    .c_use_cec(0),
    .c_use_cecarryin(0),
    .c_use_cectrl(0),
    .c_use_ced(0),
    .c_use_ceinmode(0),
    .c_use_cem(0),
    .c_use_cemultcarryin(0),
    .c_use_cep(0),
    .c_use_en(0),
    .c_use_pcin(0),
    .c_use_rst(0),
    .c_use_rsta(0),
    .c_use_rstalumode(0),
    .c_use_rstb(0),
    .c_use_rstc(0),
    .c_use_rstcarryin(0),
    .c_use_rstctrl(0),
    .c_use_rstd(0),
    .c_use_rstinmode(0),
    .c_use_rstm(0),
    .c_use_rstp(0),
    .carryinreg(1),
    .carryinselreg(1),
    .carryout_width(4),
    .creg(0),
    .dreg(0),
    .inmodereg(0),
    .mreg(1),
    .opmodereg(1),
    .preg(1),
    .sel_mask("C"),
    .sel_pattern("C"),
    .use_c_port(0),
    .use_dport("FALSE"),
    .use_mult("MULTIPLY"),
    .use_op(1),
    .use_pattern_detect("NO_PATDET"),
    .use_simd("ONE48"))
  dsp48e1 (
    .a(convert14_dout_net),
    .alumode(4'b0000),
    .b(convert15_dout_net),
    .carryin(1'b0),
    .ce(ce_1_sg_x207),
    .cea1(1'b1),
    .cea2(1'b1),
    .cead(1'b1),
    .cealumode(1'b1),
    .ceb1(1'b1),
    .ceb2(1'b1),
    .cec(1'b1),
    .cecarryin(1'b1),
    .cectrl(1'b1),
    .ced(1'b1),
    .ceinmode(1'b1),
    .cem(1'b1),
    .cemultcarryin(1'b1),
    .cep(1'b1),
    .clk(clk_1_sg_x207),
    .en(1'b1),
    .op(opmode_op_net),
    .rst(1'b0),
    .rsta(1'b0),
    .rstalumode(1'b0),
    .rstb(1'b0),
    .rstc(1'b0),
    .rstcarryin(1'b0),
    .rstctrl(1'b0),
    .rstd(1'b0),
    .rstinmode(1'b0),
    .rstm(1'b0),
    .rstp(1'b0),
    .p(dsp48e1_p_net)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_0_72c5552fbb (
    .addr(delay_q_net_x1),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x25),
    .q(addsub5_s_net_x37),
    .iout(delay2_q_net_x12)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_10_a8fb52b1ab (
    .addr(convert12_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x35),
    .q(addsub5_s_net_x47),
    .iout(delay2_q_net_x14)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_11_39053b757a (
    .addr(convert13_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x36),
    .q(addsub5_s_net_x48),
    .iout(delay2_q_net_x15)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_1_4627f02be6 (
    .addr(convert4_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x29),
    .q(addsub5_s_net_x41),
    .iout(delay2_q_net_x13)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_2_c69b865ec8 (
    .addr(convert3_dout_net_x1),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x30),
    .q(addsub5_s_net_x42),
    .iout(delay2_q_net_x16)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_3_df39cd0457 (
    .addr(convert6_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x26),
    .q(addsub5_s_net_x38),
    .iout(delay2_q_net_x17)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_4_40d000bc52 (
    .addr(convert5_dout_net_x1),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x31),
    .q(addsub5_s_net_x43),
    .iout(delay2_q_net_x18)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_5_e25d8ec866 (
    .addr(convert8_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x32),
    .q(addsub5_s_net_x44),
    .iout(delay2_q_net_x19)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_6_14d28b8912 (
    .addr(convert7_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x27),
    .q(addsub5_s_net_x39),
    .iout(delay2_q_net_x20)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_7_7d99a858d4 (
    .addr(convert10_dout_net_x1),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x33),
    .q(addsub5_s_net_x45),
    .iout(delay2_q_net_x21)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_8_1add569388 (
    .addr(convert9_dout_net_x0),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x34),
    .q(addsub5_s_net_x46),
    .iout(delay2_q_net_x22)
  );

  mixer4096_0_module_72c5552fbb  mixer4096_9_9e2f86b616 (
    .addr(convert11_dout_net_x1),
    .ce_1(ce_1_sg_x207),
    .clk_1(clk_1_sg_x207),
    .i(addsub5_s_net_x28),
    .q(addsub5_s_net_x40),
    .iout(delay2_q_net_x23)
  );

  opmode_3711ab4973  opmode (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(opmode_op_net)
  );

  reinterpret_84fa2b7df8  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(dsp48e1_p_net),
    .output_port(reinterpret1_output_port_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/Subsystem"

module subsystem_module_3a8d411b03 (
  ce_1,
  clk_1,
  ena_c0,
  ena_c1,
  ena_c10,
  ena_c11,
  ena_c12,
  ena_c13,
  ena_c14,
  ena_c15,
  ena_c16,
  ena_c17,
  ena_c18,
  ena_c19,
  ena_c2,
  ena_c20,
  ena_c21,
  ena_c22,
  ena_c23,
  ena_c3,
  ena_c4,
  ena_c5,
  ena_c6,
  ena_c7,
  ena_c8,
  ena_c9,
  i0,
  i1,
  i10,
  i11,
  i12,
  i13,
  i14,
  i15,
  i16,
  i17,
  i18,
  i19,
  i2,
  i20,
  i21,
  i22,
  i23,
  i3,
  i4,
  i5,
  i6,
  i7,
  i8,
  i9,
  out1,
  out2,
  q0,
  q1,
  q10,
  q11,
  q12,
  q13,
  q14,
  q15,
  q16,
  q17,
  q18,
  q19,
  q2,
  q20,
  q21,
  q22,
  q23,
  q3,
  q4,
  q5,
  q6,
  q7,
  q8,
  q9
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [0:0] ena_c0;
  input [0:0] ena_c1;
  input [0:0] ena_c10;
  input [0:0] ena_c11;
  input [0:0] ena_c12;
  input [0:0] ena_c13;
  input [0:0] ena_c14;
  input [0:0] ena_c15;
  input [0:0] ena_c16;
  input [0:0] ena_c17;
  input [0:0] ena_c18;
  input [0:0] ena_c19;
  input [0:0] ena_c2;
  input [0:0] ena_c20;
  input [0:0] ena_c21;
  input [0:0] ena_c22;
  input [0:0] ena_c23;
  input [0:0] ena_c3;
  input [0:0] ena_c4;
  input [0:0] ena_c5;
  input [0:0] ena_c6;
  input [0:0] ena_c7;
  input [0:0] ena_c8;
  input [0:0] ena_c9;
  input [15:0] i0;
  input [15:0] i1;
  input [15:0] i10;
  input [15:0] i11;
  input [15:0] i12;
  input [15:0] i13;
  input [15:0] i14;
  input [15:0] i15;
  input [15:0] i16;
  input [15:0] i17;
  input [15:0] i18;
  input [15:0] i19;
  input [15:0] i2;
  input [15:0] i20;
  input [15:0] i21;
  input [15:0] i22;
  input [15:0] i23;
  input [15:0] i3;
  input [15:0] i4;
  input [15:0] i5;
  input [15:0] i6;
  input [15:0] i7;
  input [15:0] i8;
  input [15:0] i9;
  input [15:0] q0;
  input [15:0] q1;
  input [15:0] q10;
  input [15:0] q11;
  input [15:0] q12;
  input [15:0] q13;
  input [15:0] q14;
  input [15:0] q15;
  input [15:0] q16;
  input [15:0] q17;
  input [15:0] q18;
  input [15:0] q19;
  input [15:0] q2;
  input [15:0] q20;
  input [15:0] q21;
  input [15:0] q22;
  input [15:0] q23;
  input [15:0] q3;
  input [15:0] q4;
  input [15:0] q5;
  input [15:0] q6;
  input [15:0] q7;
  input [15:0] q8;
  input [15:0] q9;
  output [18:0] out1;
  output [18:0] out2;

  wire [16:0] addsub10_s_net;
  wire [17:0] addsub11_s_net;
  wire [17:0] addsub12_s_net;
  wire [17:0] addsub13_s_net;
  wire [16:0] addsub14_s_net;
  wire [17:0] addsub15_s_net;
  wire [17:0] addsub16_s_net;
  wire [16:0] addsub17_s_net;
  wire [16:0] addsub18_s_net;
  wire [16:0] addsub19_s_net;
  wire [16:0] addsub1_s_net;
  wire [16:0] addsub20_s_net;
  wire [17:0] addsub21_s_net;
  wire [16:0] addsub22_s_net;
  wire [17:0] addsub23_s_net;
  wire [17:0] addsub24_s_net;
  wire [17:0] addsub25_s_net;
  wire [17:0] addsub26_s_net;
  wire [16:0] addsub27_s_net;
  wire [17:0] addsub28_s_net;
  wire [17:0] addsub29_s_net;
  wire [16:0] addsub2_s_net;
  wire [17:0] addsub30_s_net;
  wire [17:0] addsub31_s_net;
  wire [16:0] addsub32_s_net;
  wire [17:0] addsub33_s_net;
  wire [17:0] addsub34_s_net;
  wire [16:0] addsub35_s_net;
  wire [16:0] addsub36_s_net;
  wire [16:0] addsub37_s_net;
  wire [16:0] addsub38_s_net;
  wire [17:0] addsub39_s_net;
  wire [16:0] addsub3_s_net;
  wire [16:0] addsub40_s_net;
  wire [16:0] addsub41_s_net;
  wire [18:0] addsub42_s_net;
  wire [18:0] addsub43_s_net;
  wire [18:0] addsub44_s_net_x0;
  wire [18:0] addsub45_s_net_x0;
  wire [16:0] addsub4_s_net;
  wire [16:0] addsub5_s_net;
  wire [16:0] addsub6_s_net;
  wire [17:0] addsub7_s_net;
  wire [16:0] addsub8_s_net;
  wire [16:0] addsub9_s_net;
  wire [16:0] addsub_s_net;
  wire [0:0] ce_1_sg_x208;
  wire [0:0] clk_1_sg_x208;
  wire [15:0] convert4_dout_net_x24;
  wire [15:0] convert4_dout_net_x25;
  wire [15:0] convert4_dout_net_x26;
  wire [15:0] convert4_dout_net_x27;
  wire [15:0] convert4_dout_net_x28;
  wire [15:0] convert4_dout_net_x29;
  wire [15:0] convert4_dout_net_x30;
  wire [15:0] convert4_dout_net_x31;
  wire [15:0] convert4_dout_net_x32;
  wire [15:0] convert4_dout_net_x33;
  wire [15:0] convert4_dout_net_x34;
  wire [15:0] convert4_dout_net_x35;
  wire [15:0] convert4_dout_net_x36;
  wire [15:0] convert4_dout_net_x37;
  wire [15:0] convert4_dout_net_x38;
  wire [15:0] convert4_dout_net_x39;
  wire [15:0] convert4_dout_net_x40;
  wire [15:0] convert4_dout_net_x41;
  wire [15:0] convert4_dout_net_x42;
  wire [15:0] convert4_dout_net_x43;
  wire [15:0] convert4_dout_net_x44;
  wire [15:0] convert4_dout_net_x45;
  wire [15:0] convert4_dout_net_x46;
  wire [15:0] convert4_dout_net_x47;
  wire [15:0] convert5_dout_net_x24;
  wire [15:0] convert5_dout_net_x25;
  wire [15:0] convert5_dout_net_x26;
  wire [15:0] convert5_dout_net_x27;
  wire [15:0] convert5_dout_net_x28;
  wire [15:0] convert5_dout_net_x29;
  wire [15:0] convert5_dout_net_x30;
  wire [15:0] convert5_dout_net_x31;
  wire [15:0] convert5_dout_net_x32;
  wire [15:0] convert5_dout_net_x33;
  wire [15:0] convert5_dout_net_x34;
  wire [15:0] convert5_dout_net_x35;
  wire [15:0] convert5_dout_net_x36;
  wire [15:0] convert5_dout_net_x37;
  wire [15:0] convert5_dout_net_x38;
  wire [15:0] convert5_dout_net_x39;
  wire [15:0] convert5_dout_net_x40;
  wire [15:0] convert5_dout_net_x41;
  wire [15:0] convert5_dout_net_x42;
  wire [15:0] convert5_dout_net_x43;
  wire [15:0] convert5_dout_net_x44;
  wire [15:0] convert5_dout_net_x45;
  wire [15:0] convert5_dout_net_x46;
  wire [15:0] convert5_dout_net_x47;
  wire [0:0] ena_b0c0_net_x0;
  wire [0:0] ena_b0c10_net_x0;
  wire [0:0] ena_b0c11_net_x0;
  wire [0:0] ena_b0c12_net_x0;
  wire [0:0] ena_b0c13_net_x0;
  wire [0:0] ena_b0c14_net_x0;
  wire [0:0] ena_b0c15_net_x0;
  wire [0:0] ena_b0c16_net_x0;
  wire [0:0] ena_b0c17_net_x0;
  wire [0:0] ena_b0c18_net_x0;
  wire [0:0] ena_b0c19_net_x0;
  wire [0:0] ena_b0c1_net_x0;
  wire [0:0] ena_b0c20_net_x0;
  wire [0:0] ena_b0c21_net_x0;
  wire [0:0] ena_b0c22_net_x0;
  wire [0:0] ena_b0c23_net_x0;
  wire [0:0] ena_b0c2_net_x0;
  wire [0:0] ena_b0c3_net_x0;
  wire [0:0] ena_b0c4_net_x0;
  wire [0:0] ena_b0c5_net_x0;
  wire [0:0] ena_b0c6_net_x0;
  wire [0:0] ena_b0c7_net_x0;
  wire [0:0] ena_b0c8_net_x0;
  wire [0:0] ena_b0c9_net_x0;
  wire [15:0] register10_q_net;
  wire [15:0] register11_q_net;
  wire [15:0] register12_q_net;
  wire [15:0] register13_q_net;
  wire [15:0] register14_q_net;
  wire [15:0] register15_q_net;
  wire [15:0] register16_q_net;
  wire [15:0] register17_q_net;
  wire [15:0] register18_q_net;
  wire [15:0] register19_q_net;
  wire [15:0] register1_q_net;
  wire [15:0] register20_q_net;
  wire [15:0] register21_q_net;
  wire [15:0] register22_q_net;
  wire [15:0] register23_q_net;
  wire [15:0] register24_q_net;
  wire [15:0] register25_q_net;
  wire [15:0] register26_q_net;
  wire [15:0] register27_q_net;
  wire [15:0] register28_q_net;
  wire [15:0] register29_q_net;
  wire [15:0] register2_q_net;
  wire [15:0] register30_q_net;
  wire [15:0] register31_q_net;
  wire [15:0] register32_q_net;
  wire [15:0] register33_q_net;
  wire [15:0] register34_q_net;
  wire [15:0] register35_q_net;
  wire [15:0] register36_q_net;
  wire [15:0] register37_q_net;
  wire [15:0] register38_q_net;
  wire [15:0] register39_q_net;
  wire [15:0] register3_q_net;
  wire [15:0] register40_q_net;
  wire [15:0] register41_q_net;
  wire [15:0] register42_q_net;
  wire [15:0] register43_q_net;
  wire [15:0] register44_q_net;
  wire [15:0] register45_q_net;
  wire [15:0] register46_q_net;
  wire [15:0] register47_q_net;
  wire [15:0] register4_q_net;
  wire [15:0] register5_q_net;
  wire [15:0] register6_q_net;
  wire [15:0] register7_q_net;
  wire [15:0] register8_q_net;
  wire [15:0] register9_q_net;
  wire [15:0] register_q_net;

  assign ce_1_sg_x208 = ce_1;
  assign clk_1_sg_x208 = clk_1;
  assign ena_b0c0_net_x0 = ena_c0;
  assign ena_b0c1_net_x0 = ena_c1;
  assign ena_b0c10_net_x0 = ena_c10;
  assign ena_b0c11_net_x0 = ena_c11;
  assign ena_b0c12_net_x0 = ena_c12;
  assign ena_b0c13_net_x0 = ena_c13;
  assign ena_b0c14_net_x0 = ena_c14;
  assign ena_b0c15_net_x0 = ena_c15;
  assign ena_b0c22_net_x0 = ena_c16;
  assign ena_b0c23_net_x0 = ena_c17;
  assign ena_b0c16_net_x0 = ena_c18;
  assign ena_b0c17_net_x0 = ena_c19;
  assign ena_b0c2_net_x0 = ena_c2;
  assign ena_b0c18_net_x0 = ena_c20;
  assign ena_b0c19_net_x0 = ena_c21;
  assign ena_b0c20_net_x0 = ena_c22;
  assign ena_b0c21_net_x0 = ena_c23;
  assign ena_b0c3_net_x0 = ena_c3;
  assign ena_b0c4_net_x0 = ena_c4;
  assign ena_b0c5_net_x0 = ena_c5;
  assign ena_b0c6_net_x0 = ena_c6;
  assign ena_b0c7_net_x0 = ena_c7;
  assign ena_b0c8_net_x0 = ena_c8;
  assign ena_b0c9_net_x0 = ena_c9;
  assign convert4_dout_net_x41 = i0;
  assign convert4_dout_net_x24 = i1;
  assign convert4_dout_net_x25 = i10;
  assign convert4_dout_net_x26 = i11;
  assign convert4_dout_net_x27 = i12;
  assign convert4_dout_net_x28 = i13;
  assign convert4_dout_net_x29 = i14;
  assign convert4_dout_net_x30 = i15;
  assign convert4_dout_net_x31 = i16;
  assign convert4_dout_net_x32 = i17;
  assign convert4_dout_net_x33 = i18;
  assign convert4_dout_net_x34 = i19;
  assign convert4_dout_net_x35 = i2;
  assign convert4_dout_net_x36 = i20;
  assign convert4_dout_net_x37 = i21;
  assign convert4_dout_net_x38 = i22;
  assign convert4_dout_net_x39 = i23;
  assign convert4_dout_net_x40 = i3;
  assign convert4_dout_net_x42 = i4;
  assign convert4_dout_net_x43 = i5;
  assign convert4_dout_net_x44 = i6;
  assign convert4_dout_net_x45 = i7;
  assign convert4_dout_net_x46 = i8;
  assign convert4_dout_net_x47 = i9;
  assign out1 = addsub44_s_net_x0;
  assign out2 = addsub45_s_net_x0;
  assign convert5_dout_net_x41 = q0;
  assign convert5_dout_net_x24 = q1;
  assign convert5_dout_net_x25 = q10;
  assign convert5_dout_net_x26 = q11;
  assign convert5_dout_net_x27 = q12;
  assign convert5_dout_net_x28 = q13;
  assign convert5_dout_net_x29 = q14;
  assign convert5_dout_net_x30 = q15;
  assign convert5_dout_net_x31 = q16;
  assign convert5_dout_net_x32 = q17;
  assign convert5_dout_net_x33 = q18;
  assign convert5_dout_net_x34 = q19;
  assign convert5_dout_net_x35 = q2;
  assign convert5_dout_net_x36 = q20;
  assign convert5_dout_net_x37 = q21;
  assign convert5_dout_net_x38 = q22;
  assign convert5_dout_net_x39 = q23;
  assign convert5_dout_net_x40 = q3;
  assign convert5_dout_net_x42 = q4;
  assign convert5_dout_net_x43 = q5;
  assign convert5_dout_net_x44 = q6;
  assign convert5_dout_net_x45 = q7;
  assign convert5_dout_net_x46 = q8;
  assign convert5_dout_net_x47 = q9;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub (
    .a(register_q_net),
    .b(register2_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub1 (
    .a(register4_q_net),
    .b(register6_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub10 (
    .a(register17_q_net),
    .b(register25_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub10_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub11 (
    .a(addsub9_s_net),
    .b(addsub14_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub11_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub12 (
    .a(addsub10_s_net),
    .b(addsub17_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub12_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub13 (
    .a(addsub19_s_net),
    .b(addsub22_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub13_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub14 (
    .a(register26_q_net),
    .b(register28_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub14_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub15 (
    .a(addsub11_s_net),
    .b(addsub21_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub15_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub16 (
    .a(addsub12_s_net),
    .b(addsub13_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub16_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub17 (
    .a(register27_q_net),
    .b(register29_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub17_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub18 (
    .a(register30_q_net),
    .b(register18_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub18_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub19 (
    .a(register31_q_net),
    .b(register19_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub19_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub2 (
    .a(register1_q_net),
    .b(register3_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub20 (
    .a(register20_q_net),
    .b(register22_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub20_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub21 (
    .a(addsub18_s_net),
    .b(addsub20_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub21_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub22 (
    .a(register21_q_net),
    .b(register23_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub22_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub23 (
    .a(addsub32_s_net),
    .b(addsub36_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub23_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub24 (
    .a(addsub_s_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub24_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub25 (
    .a(addsub2_s_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub25_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub26 (
    .a(addsub5_s_net),
    .b(addsub8_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub26_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub27 (
    .a(register32_q_net),
    .b(register40_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub27_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub28 (
    .a(addsub24_s_net),
    .b(addsub7_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub28_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub29 (
    .a(addsub25_s_net),
    .b(addsub26_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub29_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub3 (
    .a(register5_q_net),
    .b(register7_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub30 (
    .a(addsub27_s_net),
    .b(addsub35_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub30_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub31 (
    .a(addsub38_s_net),
    .b(addsub41_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub31_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub32 (
    .a(register33_q_net),
    .b(register41_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub32_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub33 (
    .a(addsub30_s_net),
    .b(addsub39_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub33_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub34 (
    .a(addsub23_s_net),
    .b(addsub31_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub34_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub35 (
    .a(register42_q_net),
    .b(register44_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub35_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub36 (
    .a(register43_q_net),
    .b(register45_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub36_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub37 (
    .a(register46_q_net),
    .b(register34_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub37_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub38 (
    .a(register47_q_net),
    .b(register35_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub38_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub39 (
    .a(addsub37_s_net),
    .b(addsub40_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub39_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub4 (
    .a(register8_q_net),
    .b(register10_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub40 (
    .a(register36_q_net),
    .b(register38_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub40_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub41 (
    .a(register37_q_net),
    .b(register39_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub41_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(19))
  addsub42 (
    .a(addsub28_s_net),
    .b(addsub15_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub42_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(19))
  addsub43 (
    .a(addsub29_s_net),
    .b(addsub16_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub43_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(19))
  addsub44 (
    .a(addsub42_s_net),
    .b(addsub33_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub44_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(19))
  addsub45 (
    .a(addsub43_s_net),
    .b(addsub34_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub45_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub5 (
    .a(register9_q_net),
    .b(register11_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub6 (
    .a(register12_q_net),
    .b(register14_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(18))
  addsub7 (
    .a(addsub4_s_net),
    .b(addsub6_s_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub7_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub8 (
    .a(register13_q_net),
    .b(register15_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub8_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(17))
  addsub9 (
    .a(register16_q_net),
    .b(register24_q_net),
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub9_s_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register1 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x41),
    .en(1'b1),
    .rst(ena_b0c0_net_x0),
    .q(register1_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register10 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x43),
    .en(1'b1),
    .rst(ena_b0c5_net_x0),
    .q(register10_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register11 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x43),
    .en(1'b1),
    .rst(ena_b0c5_net_x0),
    .q(register11_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register12 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x44),
    .en(1'b1),
    .rst(ena_b0c6_net_x0),
    .q(register12_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register13 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x44),
    .en(1'b1),
    .rst(ena_b0c6_net_x0),
    .q(register13_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register14 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x45),
    .en(1'b1),
    .rst(ena_b0c7_net_x0),
    .q(register14_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register15 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x45),
    .en(1'b1),
    .rst(ena_b0c7_net_x0),
    .q(register15_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register16 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x46),
    .en(1'b1),
    .rst(ena_b0c8_net_x0),
    .q(register16_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register17 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x46),
    .en(1'b1),
    .rst(ena_b0c8_net_x0),
    .q(register17_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register18 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x28),
    .en(1'b1),
    .rst(ena_b0c13_net_x0),
    .q(register18_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register19 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x28),
    .en(1'b1),
    .rst(ena_b0c13_net_x0),
    .q(register19_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register2 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x24),
    .en(1'b1),
    .rst(ena_b0c1_net_x0),
    .q(register2_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register20 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x29),
    .en(1'b1),
    .rst(ena_b0c14_net_x0),
    .q(register20_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register21 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x29),
    .en(1'b1),
    .rst(ena_b0c14_net_x0),
    .q(register21_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register22 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x30),
    .en(1'b1),
    .rst(ena_b0c15_net_x0),
    .q(register22_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register23 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x30),
    .en(1'b1),
    .rst(ena_b0c15_net_x0),
    .q(register23_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register24 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x47),
    .en(1'b1),
    .rst(ena_b0c9_net_x0),
    .q(register24_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register25 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x47),
    .en(1'b1),
    .rst(ena_b0c9_net_x0),
    .q(register25_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register26 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x25),
    .en(1'b1),
    .rst(ena_b0c10_net_x0),
    .q(register26_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register27 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x25),
    .en(1'b1),
    .rst(ena_b0c10_net_x0),
    .q(register27_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register28 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x26),
    .en(1'b1),
    .rst(ena_b0c11_net_x0),
    .q(register28_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register29 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x26),
    .en(1'b1),
    .rst(ena_b0c11_net_x0),
    .q(register29_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register3 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x24),
    .en(1'b1),
    .rst(ena_b0c1_net_x0),
    .q(register3_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register30 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x27),
    .en(1'b1),
    .rst(ena_b0c12_net_x0),
    .q(register30_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register31 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x27),
    .en(1'b1),
    .rst(ena_b0c12_net_x0),
    .q(register31_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register32 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x31),
    .en(1'b1),
    .rst(ena_b0c22_net_x0),
    .q(register32_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register33 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x31),
    .en(1'b1),
    .rst(ena_b0c22_net_x0),
    .q(register33_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register34 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x37),
    .en(1'b1),
    .rst(ena_b0c19_net_x0),
    .q(register34_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register35 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x37),
    .en(1'b1),
    .rst(ena_b0c19_net_x0),
    .q(register35_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register36 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x38),
    .en(1'b1),
    .rst(ena_b0c20_net_x0),
    .q(register36_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register37 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x38),
    .en(1'b1),
    .rst(ena_b0c20_net_x0),
    .q(register37_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register38 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x39),
    .en(1'b1),
    .rst(ena_b0c21_net_x0),
    .q(register38_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register39 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x39),
    .en(1'b1),
    .rst(ena_b0c21_net_x0),
    .q(register39_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register4 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x35),
    .en(1'b1),
    .rst(ena_b0c2_net_x0),
    .q(register4_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register40 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x32),
    .en(1'b1),
    .rst(ena_b0c23_net_x0),
    .q(register40_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register41 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x32),
    .en(1'b1),
    .rst(ena_b0c23_net_x0),
    .q(register41_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register42 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x33),
    .en(1'b1),
    .rst(ena_b0c16_net_x0),
    .q(register42_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register43 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x33),
    .en(1'b1),
    .rst(ena_b0c16_net_x0),
    .q(register43_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register44 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x34),
    .en(1'b1),
    .rst(ena_b0c17_net_x0),
    .q(register44_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register45 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x34),
    .en(1'b1),
    .rst(ena_b0c17_net_x0),
    .q(register45_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register46 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x36),
    .en(1'b1),
    .rst(ena_b0c18_net_x0),
    .q(register46_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register47 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x36),
    .en(1'b1),
    .rst(ena_b0c18_net_x0),
    .q(register47_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register5 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x35),
    .en(1'b1),
    .rst(ena_b0c2_net_x0),
    .q(register5_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register6 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x40),
    .en(1'b1),
    .rst(ena_b0c3_net_x0),
    .q(register6_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register7 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x40),
    .en(1'b1),
    .rst(ena_b0c3_net_x0),
    .q(register7_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register8 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x42),
    .en(1'b1),
    .rst(ena_b0c4_net_x0),
    .q(register8_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register9 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert5_dout_net_x42),
    .en(1'b1),
    .rst(ena_b0c4_net_x0),
    .q(register9_q_net)
  );

  xlregister #(

    .d_width(16),
    .init_value(16'b0000000000000000))
  register_x0 (
    .ce(ce_1_sg_x208),
    .clk(clk_1_sg_x208),
    .d(convert4_dout_net_x41),
    .en(1'b1),
    .rst(ena_b0c0_net_x0),
    .q(register_q_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/X3FIR_dedicate"

module x3fir_dedicate_module_0be82d3c76 (
  c0_x,
  c1_x,
  c2_x,
  ce_1,
  clk_1,
  din
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [17:0] c0_x;
  output [17:0] c1_x;
  output [17:0] c2_x;

  wire [9:0] addsub1_s_net;
  wire [11:0] addsub2_s_net;
  wire [0:0] ce_1_sg_x211;
  wire [0:0] clk_1_sg_x211;
  wire [9:0] convert1_dout_net;
  wire [11:0] convert3_dout_net;
  wire [17:0] convert4_dout_net;
  wire [17:0] convert5_dout_net;
  wire [17:0] convert6_dout_net;
  wire [9:0] convert_dout_net;
  wire [26:0] delay1_q_net;
  wire [11:0] delay2_q_net;
  wire [15:0] delay4_q_net_x0;
  wire [4:0] delay_q_net;
  wire [5:0] lsb1_y_net;
  wire [9:0] reinterpret10_output_port_net;
  wire [5:0] reinterpret11_output_port_net;
  wire [4:0] reinterpret1_output_port_net;
  wire [4:0] reinterpret2_output_port_net;
  wire [6:0] reinterpret4_output_port_net;
  wire [9:0] reinterpret5_output_port_net;
  wire [11:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [11:0] rom3_data_net;
  wire [26:0] rom_data_net;
  wire [9:0] shift2_op_net;
  wire [11:0] shift3_op_net;
  wire [17:0] shift5_op_net_x0;
  wire [17:0] shift6_op_net_x0;
  wire [17:0] shift8_op_net_x0;
  wire [9:0] slice2_y_net;
  wire [11:0] slice3_y_net;
  wire [4:0] slice4_y_net;
  wire [6:0] slice5_y_net;
  wire [4:0] slice_y_net;

  assign c0_x = shift8_op_net_x0;
  assign c1_x = shift6_op_net_x0;
  assign c2_x = shift5_op_net_x0;
  assign ce_1_sg_x211 = ce_1;
  assign clk_1_sg_x211 = clk_1;
  assign delay4_q_net_x0 = din;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(9),
    .a_width(10),
    .b_arith(`xlSigned),
    .b_bin_pt(9),
    .b_width(10),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(11),
    .core_name0("addsb_11_0_7f55411a8f505b42"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(11),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(9),
    .s_width(10))
  addsub1 (
    .a(reinterpret5_output_port_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(11),
    .a_width(12),
    .b_arith(`xlSigned),
    .b_bin_pt(11),
    .b_width(12),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(13),
    .core_name0("addsb_11_0_75cae8bed5545ee9"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(13),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(11),
    .s_width(12))
  addsub2 (
    .a(reinterpret6_output_port_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(6),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(4),
    .din_width(5),
    .dout_arith(2),
    .dout_bin_pt(9),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(6),
    .din_width(7),
    .dout_arith(2),
    .dout_bin_pt(11),
    .dout_width(12),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(4),
    .din_width(5),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .din(delay_q_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(9),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(11),
    .din_width(12),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(5))
  delay (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .d(reinterpret2_output_port_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(27))
  delay1 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .d(rom_data_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(12))
  delay2 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .d(rom3_data_net),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(5),
    .x_width(16),
    .y_width(6))
  lsb1 (
    .x(reinterpret9_output_port_net),
    .y(lsb1_y_net)
  );

  reinterpret_9f3848bc50  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice4_y_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_b41d29f193  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert_dout_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_3f5d978749  reinterpret11 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(lsb1_y_net),
    .output_port(reinterpret11_output_port_net)
  );

  reinterpret_9f3848bc50  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice_y_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_8eee8341d8  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice5_y_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_fd8afbe046  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice2_y_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_94dfdafd95  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice3_y_net),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay4_q_net_x0),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom #(

    .c_address_width(10),
    .c_width(27),
    .core_name0("bmg_62_bcd177a5609f0846"),
    .latency(1))
  rom (
    .addr(reinterpret10_output_port_net),
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .en(1'b1),
    .rst(1'b0),
    .data(rom_data_net)
  );

  xlsprom_dist #(

    .addr_width(6),
    .c_address_width(6),
    .c_width(12),
    .core_name0("dmg_62_c1f17fd5734c4bf2"),
    .latency(1))
  rom3 (
    .addr(reinterpret11_output_port_net),
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .en(1'b1),
    .data(rom3_data_net)
  );

  shift_85f5a5ebd0  shift2 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .ip(convert1_dout_net),
    .op(shift2_op_net)
  );

  shift_39b9422678  shift3 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_af45bff5a0  shift5 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift5_op_net_x0)
  );

  shift_13f7182392  shift6 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift6_op_net_x0)
  );

  shift_35e4e03aef  shift8 (
    .ce(ce_1_sg_x211),
    .clk(clk_1_sg_x211),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift8_op_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(4),
    .x_width(27),
    .y_width(5))
  slice (
    .x(delay1_q_net),
    .y(slice_y_net)
  );

  xlslice #(

    .new_lsb(5),
    .new_msb(14),
    .x_width(27),
    .y_width(10))
  slice2 (
    .x(delay1_q_net),
    .y(slice2_y_net)
  );

  xlslice #(

    .new_lsb(15),
    .new_msb(26),
    .x_width(27),
    .y_width(12))
  slice3 (
    .x(delay1_q_net),
    .y(slice3_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(4),
    .x_width(12),
    .y_width(5))
  slice4 (
    .x(delay2_q_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(5),
    .new_msb(11),
    .x_width(12),
    .y_width(7))
  slice5 (
    .x(delay2_q_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/X3FIR_general1"

module x3fir_general1_module_0ff5bcf041 (
  c6_x,
  c7_x,
  c8_x,
  ce_1,
  clk_1,
  din
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [17:0] c6_x;
  output [17:0] c7_x;
  output [17:0] c8_x;

  wire [15:0] addsub1_s_net;
  wire [12:0] addsub2_s_net;
  wire [14:0] addsub3_s_net;
  wire [0:0] ce_1_sg_x215;
  wire [0:0] clk_1_sg_x215;
  wire [15:0] convert1_dout_net;
  wire [14:0] convert2_dout_net;
  wire [12:0] convert3_dout_net;
  wire [17:0] convert4_dout_net;
  wire [17:0] convert5_dout_net;
  wire [17:0] convert6_dout_net;
  wire [6:0] convert7_dout_net;
  wire [7:0] convert8_dout_net;
  wire [4:0] convert9_dout_net;
  wire [8:0] convert_dout_net;
  wire [43:0] delay1_q_net;
  wire [15:0] delay26_q_net_x0;
  wire [16:0] delay_q_net;
  wire [6:0] lsb1_y_net;
  wire [8:0] reinterpret10_output_port_net;
  wire [6:0] reinterpret11_output_port_net;
  wire [7:0] reinterpret1_output_port_net;
  wire [14:0] reinterpret2_output_port_net;
  wire [6:0] reinterpret3_output_port_net;
  wire [4:0] reinterpret4_output_port_net;
  wire [15:0] reinterpret5_output_port_net;
  wire [12:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [16:0] rom3_data_net;
  wire [43:0] rom_data_net;
  wire [14:0] shift1_op_net;
  wire [15:0] shift2_op_net;
  wire [12:0] shift3_op_net;
  wire [17:0] shift4_op_net_x0;
  wire [17:0] shift5_op_net_x0;
  wire [17:0] shift8_op_net_x0;
  wire [5:0] slice1_y_net;
  wire [15:0] slice2_y_net;
  wire [12:0] slice3_y_net;
  wire [6:0] slice4_y_net;
  wire [3:0] slice5_y_net;
  wire [14:0] slice_y_net;

  assign c6_x = shift8_op_net_x0;
  assign c7_x = shift4_op_net_x0;
  assign c8_x = shift5_op_net_x0;
  assign ce_1_sg_x215 = ce_1;
  assign clk_1_sg_x215 = clk_1;
  assign delay26_q_net_x0 = din;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(reinterpret5_output_port_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(12),
    .a_width(13),
    .b_arith(`xlSigned),
    .b_bin_pt(12),
    .b_width(13),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(14),
    .core_name0("addsb_11_0_7c7b2b2855006e6e"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(14),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(12),
    .s_width(13))
  addsub2 (
    .a(reinterpret6_output_port_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(14),
    .a_width(15),
    .b_arith(`xlSigned),
    .b_bin_pt(14),
    .b_width(15),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(16),
    .core_name0("addsb_11_0_fa4e7b8a00f98f0c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(16),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(14),
    .s_width(15))
  addsub3 (
    .a(reinterpret2_output_port_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(9),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(8),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(6),
    .din_width(7),
    .dout_arith(2),
    .dout_bin_pt(14),
    .dout_width(15),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(4),
    .din_width(5),
    .dout_arith(2),
    .dout_bin_pt(12),
    .dout_width(13),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(14),
    .din_width(15),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(12),
    .din_width(13),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(6),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(7),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(slice1_y_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(7),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(8),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(slice4_y_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(4),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(5),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .din(slice5_y_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(17))
  delay (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .d(rom3_data_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(44))
  delay1 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .d(rom_data_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(6),
    .x_width(16),
    .y_width(7))
  lsb1 (
    .x(reinterpret9_output_port_net),
    .y(lsb1_y_net)
  );

  reinterpret_feb184a5ad  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert8_dout_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_34f6390c19  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert_dout_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_016d92ab20  reinterpret11 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(lsb1_y_net),
    .output_port(reinterpret11_output_port_net)
  );

  reinterpret_6200c8761b  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice_y_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_8eee8341d8  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert7_dout_net),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_9f3848bc50  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert9_dout_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_dee95c6dbb  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice2_y_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_55833616ec  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice3_y_net),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay26_q_net_x0),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom #(

    .c_address_width(9),
    .c_width(44),
    .core_name0("bmg_62_fa58db69dab254f0"),
    .latency(1))
  rom (
    .addr(reinterpret10_output_port_net),
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .en(1'b1),
    .rst(1'b0),
    .data(rom_data_net)
  );

  xlsprom_dist #(

    .addr_width(7),
    .c_address_width(7),
    .c_width(17),
    .core_name0("dmg_62_dd72e39ad62faa37"),
    .latency(1))
  rom3 (
    .addr(reinterpret11_output_port_net),
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .en(1'b1),
    .data(rom3_data_net)
  );

  shift_447ff429c9  shift1 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift1_op_net)
  );

  shift_05a6d83f8c  shift2 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .ip(convert1_dout_net),
    .op(shift2_op_net)
  );

  shift_ed17a56c3a  shift3 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_e2f66c8512  shift4 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift4_op_net_x0)
  );

  shift_e2efd1e2c2  shift5 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift5_op_net_x0)
  );

  shift_42c206eba8  shift8 (
    .ce(ce_1_sg_x215),
    .clk(clk_1_sg_x215),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift8_op_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(14),
    .x_width(44),
    .y_width(15))
  slice (
    .x(delay1_q_net),
    .y(slice_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(5),
    .x_width(17),
    .y_width(6))
  slice1 (
    .x(delay_q_net),
    .y(slice1_y_net)
  );

  xlslice #(

    .new_lsb(15),
    .new_msb(30),
    .x_width(44),
    .y_width(16))
  slice2 (
    .x(delay1_q_net),
    .y(slice2_y_net)
  );

  xlslice #(

    .new_lsb(31),
    .new_msb(43),
    .x_width(44),
    .y_width(13))
  slice3 (
    .x(delay1_q_net),
    .y(slice3_y_net)
  );

  xlslice #(

    .new_lsb(6),
    .new_msb(12),
    .x_width(17),
    .y_width(7))
  slice4 (
    .x(delay_q_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(13),
    .new_msb(16),
    .x_width(17),
    .y_width(4))
  slice5 (
    .x(delay_q_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/X3FIR_general11"

module x3fir_general11_module_2b06dc6a59 (
  c3_x,
  c4_x,
  c5_x,
  ce_1,
  clk_1,
  din
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [17:0] c3_x;
  output [17:0] c4_x;
  output [17:0] c5_x;

  wire [12:0] addsub1_s_net;
  wire [12:0] addsub2_s_net;
  wire [12:0] addsub3_s_net;
  wire [0:0] ce_1_sg_x217;
  wire [0:0] clk_1_sg_x217;
  wire [12:0] convert1_dout_net;
  wire [12:0] convert2_dout_net;
  wire [12:0] convert3_dout_net;
  wire [17:0] convert4_dout_net;
  wire [17:0] convert5_dout_net;
  wire [17:0] convert6_dout_net;
  wire [4:0] convert7_dout_net;
  wire [4:0] convert8_dout_net;
  wire [4:0] convert9_dout_net;
  wire [8:0] convert_dout_net;
  wire [38:0] delay1_q_net;
  wire [15:0] delay1_q_net_x2;
  wire [11:0] delay_q_net;
  wire [6:0] lsb1_y_net;
  wire [8:0] reinterpret10_output_port_net;
  wire [6:0] reinterpret11_output_port_net;
  wire [4:0] reinterpret1_output_port_net;
  wire [12:0] reinterpret2_output_port_net;
  wire [4:0] reinterpret3_output_port_net;
  wire [4:0] reinterpret4_output_port_net;
  wire [12:0] reinterpret5_output_port_net;
  wire [12:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [11:0] rom3_data_net;
  wire [38:0] rom_data_net;
  wire [12:0] shift1_op_net;
  wire [12:0] shift2_op_net;
  wire [12:0] shift3_op_net;
  wire [17:0] shift4_op_net_x0;
  wire [17:0] shift5_op_net_x0;
  wire [17:0] shift8_op_net_x0;
  wire [3:0] slice1_y_net;
  wire [12:0] slice2_y_net;
  wire [12:0] slice3_y_net;
  wire [3:0] slice4_y_net;
  wire [3:0] slice5_y_net;
  wire [12:0] slice_y_net;

  assign c3_x = shift8_op_net_x0;
  assign c4_x = shift4_op_net_x0;
  assign c5_x = shift5_op_net_x0;
  assign ce_1_sg_x217 = ce_1;
  assign clk_1_sg_x217 = clk_1;
  assign delay1_q_net_x2 = din;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(12),
    .a_width(13),
    .b_arith(`xlSigned),
    .b_bin_pt(12),
    .b_width(13),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(14),
    .core_name0("addsb_11_0_7c7b2b2855006e6e"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(14),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(12),
    .s_width(13))
  addsub1 (
    .a(reinterpret5_output_port_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(12),
    .a_width(13),
    .b_arith(`xlSigned),
    .b_bin_pt(12),
    .b_width(13),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(14),
    .core_name0("addsb_11_0_7c7b2b2855006e6e"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(14),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(12),
    .s_width(13))
  addsub2 (
    .a(reinterpret6_output_port_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(12),
    .a_width(13),
    .b_arith(`xlSigned),
    .b_bin_pt(12),
    .b_width(13),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(14),
    .core_name0("addsb_11_0_7c7b2b2855006e6e"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(14),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(12),
    .s_width(13))
  addsub3 (
    .a(reinterpret2_output_port_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(9),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(4),
    .din_width(5),
    .dout_arith(2),
    .dout_bin_pt(12),
    .dout_width(13),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(4),
    .din_width(5),
    .dout_arith(2),
    .dout_bin_pt(12),
    .dout_width(13),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(4),
    .din_width(5),
    .dout_arith(2),
    .dout_bin_pt(12),
    .dout_width(13),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(12),
    .din_width(13),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(12),
    .din_width(13),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(12),
    .din_width(13),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(4),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(5),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(slice1_y_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(4),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(5),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(slice4_y_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(4),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(5),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .din(slice5_y_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(12))
  delay (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .d(rom3_data_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(39))
  delay1 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .d(rom_data_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(6),
    .x_width(16),
    .y_width(7))
  lsb1 (
    .x(reinterpret9_output_port_net),
    .y(lsb1_y_net)
  );

  reinterpret_9f3848bc50  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert8_dout_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_34f6390c19  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert_dout_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_016d92ab20  reinterpret11 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(lsb1_y_net),
    .output_port(reinterpret11_output_port_net)
  );

  reinterpret_55833616ec  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice_y_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_9f3848bc50  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert7_dout_net),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_9f3848bc50  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert9_dout_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_55833616ec  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice2_y_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_55833616ec  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice3_y_net),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay1_q_net_x2),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom #(

    .c_address_width(9),
    .c_width(39),
    .core_name0("bmg_62_d343f1ce4db1823a"),
    .latency(1))
  rom (
    .addr(reinterpret10_output_port_net),
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .en(1'b1),
    .rst(1'b0),
    .data(rom_data_net)
  );

  xlsprom_dist #(

    .addr_width(7),
    .c_address_width(7),
    .c_width(12),
    .core_name0("dmg_62_2378f8cddaf130ec"),
    .latency(1))
  rom3 (
    .addr(reinterpret11_output_port_net),
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .en(1'b1),
    .data(rom3_data_net)
  );

  shift_ed17a56c3a  shift1 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift1_op_net)
  );

  shift_ed17a56c3a  shift2 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .ip(convert1_dout_net),
    .op(shift2_op_net)
  );

  shift_ed17a56c3a  shift3 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_e2efd1e2c2  shift4 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift4_op_net_x0)
  );

  shift_e2efd1e2c2  shift5 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift5_op_net_x0)
  );

  shift_e2efd1e2c2  shift8 (
    .ce(ce_1_sg_x217),
    .clk(clk_1_sg_x217),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift8_op_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(12),
    .x_width(39),
    .y_width(13))
  slice (
    .x(delay1_q_net),
    .y(slice_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(3),
    .x_width(12),
    .y_width(4))
  slice1 (
    .x(delay_q_net),
    .y(slice1_y_net)
  );

  xlslice #(

    .new_lsb(13),
    .new_msb(25),
    .x_width(39),
    .y_width(13))
  slice2 (
    .x(delay1_q_net),
    .y(slice2_y_net)
  );

  xlslice #(

    .new_lsb(26),
    .new_msb(38),
    .x_width(39),
    .y_width(13))
  slice3 (
    .x(delay1_q_net),
    .y(slice3_y_net)
  );

  xlslice #(

    .new_lsb(4),
    .new_msb(7),
    .x_width(12),
    .y_width(4))
  slice4 (
    .x(delay_q_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(8),
    .new_msb(11),
    .x_width(12),
    .y_width(4))
  slice5 (
    .x(delay_q_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/X3FIR_general12"

module x3fir_general12_module_448024b5fe (
  c10_x,
  c11_x,
  c9_x,
  ce_1,
  clk_1,
  din
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [17:0] c10_x;
  output [17:0] c11_x;
  output [17:0] c9_x;

  wire [17:0] addsub1_s_net;
  wire [17:0] addsub2_s_net;
  wire [15:0] addsub3_s_net;
  wire [0:0] ce_1_sg_x218;
  wire [0:0] clk_1_sg_x218;
  wire [17:0] convert1_dout_net;
  wire [15:0] convert2_dout_net;
  wire [17:0] convert3_dout_net;
  wire [17:0] convert4_dout_net;
  wire [17:0] convert5_dout_net;
  wire [17:0] convert6_dout_net;
  wire [7:0] convert7_dout_net;
  wire [9:0] convert8_dout_net;
  wire [9:0] convert9_dout_net;
  wire [8:0] convert_dout_net;
  wire [51:0] delay1_q_net;
  wire [15:0] delay1_q_net_x3;
  wire [24:0] delay_q_net;
  wire [6:0] lsb1_y_net;
  wire [8:0] reinterpret10_output_port_net;
  wire [6:0] reinterpret11_output_port_net;
  wire [9:0] reinterpret1_output_port_net;
  wire [15:0] reinterpret2_output_port_net;
  wire [7:0] reinterpret3_output_port_net;
  wire [9:0] reinterpret4_output_port_net;
  wire [17:0] reinterpret5_output_port_net;
  wire [17:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [24:0] rom3_data_net;
  wire [51:0] rom_data_net;
  wire [15:0] shift1_op_net;
  wire [17:0] shift2_op_net;
  wire [17:0] shift3_op_net;
  wire [17:0] shift4_op_net_x0;
  wire [17:0] shift5_op_net_x0;
  wire [17:0] shift8_op_net_x0;
  wire [6:0] slice1_y_net;
  wire [17:0] slice2_y_net;
  wire [17:0] slice3_y_net;
  wire [8:0] slice4_y_net;
  wire [8:0] slice5_y_net;
  wire [15:0] slice_y_net;

  assign c10_x = shift4_op_net_x0;
  assign c11_x = shift5_op_net_x0;
  assign c9_x = shift8_op_net_x0;
  assign ce_1_sg_x218 = ce_1;
  assign clk_1_sg_x218 = clk_1;
  assign delay1_q_net_x3 = din;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub1 (
    .a(reinterpret5_output_port_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub2 (
    .a(reinterpret6_output_port_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(reinterpret2_output_port_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(9),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(9),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(8),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(9),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(17),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(17),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(7),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(8),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(slice1_y_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(9),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(slice4_y_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(9),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .din(slice5_y_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(25))
  delay (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .d(rom3_data_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(52))
  delay1 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .d(rom_data_net),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(6),
    .x_width(16),
    .y_width(7))
  lsb1 (
    .x(reinterpret9_output_port_net),
    .y(lsb1_y_net)
  );

  reinterpret_fd8afbe046  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert8_dout_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_34f6390c19  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert_dout_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_016d92ab20  reinterpret11 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(lsb1_y_net),
    .output_port(reinterpret11_output_port_net)
  );

  reinterpret_dee95c6dbb  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice_y_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_feb184a5ad  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert7_dout_net),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_fd8afbe046  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert9_dout_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_87da68fdf8  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice2_y_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_87da68fdf8  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice3_y_net),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay1_q_net_x3),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom #(

    .c_address_width(9),
    .c_width(52),
    .core_name0("bmg_62_d6e6f44a8de25b69"),
    .latency(1))
  rom (
    .addr(reinterpret10_output_port_net),
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .en(1'b1),
    .rst(1'b0),
    .data(rom_data_net)
  );

  xlsprom_dist #(

    .addr_width(7),
    .c_address_width(7),
    .c_width(25),
    .core_name0("dmg_62_d87244d006cee310"),
    .latency(1))
  rom3 (
    .addr(reinterpret11_output_port_net),
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .en(1'b1),
    .data(rom3_data_net)
  );

  shift_05a6d83f8c  shift1 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift1_op_net)
  );

  shift_13f7182392  shift2 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .ip(convert1_dout_net),
    .op(shift2_op_net)
  );

  shift_13f7182392  shift3 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_572bccbff0  shift4 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift4_op_net_x0)
  );

  shift_572bccbff0  shift5 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift5_op_net_x0)
  );

  shift_e2f66c8512  shift8 (
    .ce(ce_1_sg_x218),
    .clk(clk_1_sg_x218),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift8_op_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(15),
    .x_width(52),
    .y_width(16))
  slice (
    .x(delay1_q_net),
    .y(slice_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(6),
    .x_width(25),
    .y_width(7))
  slice1 (
    .x(delay_q_net),
    .y(slice1_y_net)
  );

  xlslice #(

    .new_lsb(16),
    .new_msb(33),
    .x_width(52),
    .y_width(18))
  slice2 (
    .x(delay1_q_net),
    .y(slice2_y_net)
  );

  xlslice #(

    .new_lsb(34),
    .new_msb(51),
    .x_width(52),
    .y_width(18))
  slice3 (
    .x(delay1_q_net),
    .y(slice3_y_net)
  );

  xlslice #(

    .new_lsb(7),
    .new_msb(15),
    .x_width(25),
    .y_width(9))
  slice4 (
    .x(delay_q_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(16),
    .new_msb(24),
    .x_width(25),
    .y_width(9))
  slice5 (
    .x(delay_q_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/y1_calc"

module y1_calc_module_2a468397d1 (
  ce_1,
  clk_1,
  in1,
  in2,
  in3,
  in4,
  in5,
  in6,
  in7,
  in8,
  out1
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [17:0] in1;
  input [17:0] in2;
  input [17:0] in3;
  input [17:0] in4;
  input [17:0] in5;
  input [17:0] in6;
  input [17:0] in7;
  input [17:0] in8;
  output [17:0] out1;

  wire [17:0] addsub1_s_net;
  wire [17:0] addsub2_s_net;
  wire [17:0] addsub3_s_net;
  wire [17:0] addsub4_s_net;
  wire [17:0] addsub5_s_net_x26;
  wire [17:0] addsub6_s_net;
  wire [17:0] addsub_s_net;
  wire [0:0] ce_1_sg_x227;
  wire [0:0] clk_1_sg_x227;
  wire [17:0] delay10_q_net_x0;
  wire [17:0] delay7_q_net_x0;
  wire [17:0] delay8_q_net_x0;
  wire [17:0] delay9_q_net_x0;
  wire [17:0] shift8_op_net_x4;
  wire [17:0] shift8_op_net_x5;
  wire [17:0] shift8_op_net_x6;
  wire [17:0] shift8_op_net_x7;

  assign ce_1_sg_x227 = ce_1;
  assign clk_1_sg_x227 = clk_1;
  assign shift8_op_net_x4 = in1;
  assign shift8_op_net_x5 = in2;
  assign shift8_op_net_x7 = in3;
  assign shift8_op_net_x6 = in4;
  assign delay8_q_net_x0 = in5;
  assign delay7_q_net_x0 = in6;
  assign delay9_q_net_x0 = in7;
  assign delay10_q_net_x0 = in8;
  assign out1 = addsub5_s_net_x26;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub (
    .a(shift8_op_net_x4),
    .b(shift8_op_net_x5),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub1 (
    .a(shift8_op_net_x6),
    .b(shift8_op_net_x7),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub2 (
    .a(delay8_q_net_x0),
    .b(delay7_q_net_x0),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub3 (
    .a(delay10_q_net_x0),
    .b(delay9_q_net_x0),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub4 (
    .a(addsub_s_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub5 (
    .a(addsub4_s_net),
    .b(addsub6_s_net),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net_x26)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub6 (
    .a(addsub2_s_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x227),
    .clk(clk_1_sg_x227),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/y2_calc"

module y2_calc_module_206f212102 (
  ce_1,
  clk_1,
  in1,
  in2,
  in3,
  in4,
  in5,
  in6,
  in7,
  in8,
  out1
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [17:0] in1;
  input [17:0] in2;
  input [17:0] in3;
  input [17:0] in4;
  input [17:0] in5;
  input [17:0] in6;
  input [17:0] in7;
  input [17:0] in8;
  output [17:0] out1;

  wire [17:0] addsub1_s_net;
  wire [17:0] addsub2_s_net;
  wire [17:0] addsub3_s_net;
  wire [17:0] addsub4_s_net;
  wire [17:0] addsub5_s_net_x30;
  wire [17:0] addsub6_s_net;
  wire [17:0] addsub_s_net;
  wire [0:0] ce_1_sg_x231;
  wire [0:0] clk_1_sg_x231;
  wire [17:0] delay11_q_net_x0;
  wire [17:0] delay12_q_net_x0;
  wire [17:0] delay13_q_net_x0;
  wire [17:0] delay14_q_net_x0;
  wire [17:0] shift4_op_net_x3;
  wire [17:0] shift4_op_net_x4;
  wire [17:0] shift4_op_net_x5;
  wire [17:0] shift6_op_net_x1;

  assign ce_1_sg_x231 = ce_1;
  assign clk_1_sg_x231 = clk_1;
  assign shift6_op_net_x1 = in1;
  assign shift4_op_net_x3 = in2;
  assign shift4_op_net_x5 = in3;
  assign shift4_op_net_x4 = in4;
  assign delay13_q_net_x0 = in5;
  assign delay12_q_net_x0 = in6;
  assign delay14_q_net_x0 = in7;
  assign delay11_q_net_x0 = in8;
  assign out1 = addsub5_s_net_x30;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub (
    .a(shift6_op_net_x1),
    .b(shift4_op_net_x3),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub1 (
    .a(shift4_op_net_x4),
    .b(shift4_op_net_x5),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub2 (
    .a(delay13_q_net_x0),
    .b(delay12_q_net_x0),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub3 (
    .a(delay14_q_net_x0),
    .b(delay11_q_net_x0),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub4 (
    .a(addsub_s_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub5 (
    .a(addsub4_s_net),
    .b(addsub6_s_net),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net_x30)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub6 (
    .a(addsub2_s_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x231),
    .clk(clk_1_sg_x231),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter/y2_calc1"

module y2_calc1_module_1f72f53bb5 (
  ce_1,
  clk_1,
  in1,
  in2,
  in3,
  in4,
  in5,
  in6,
  in7,
  in8,
  out1
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [17:0] in1;
  input [17:0] in2;
  input [17:0] in3;
  input [17:0] in4;
  input [17:0] in5;
  input [17:0] in6;
  input [17:0] in7;
  input [17:0] in8;
  output [17:0] out1;

  wire [17:0] addsub1_s_net;
  wire [17:0] addsub2_s_net;
  wire [17:0] addsub3_s_net;
  wire [17:0] addsub4_s_net;
  wire [17:0] addsub5_s_net_x31;
  wire [17:0] addsub6_s_net;
  wire [17:0] addsub_s_net;
  wire [0:0] ce_1_sg_x232;
  wire [0:0] clk_1_sg_x232;
  wire [17:0] delay15_q_net_x0;
  wire [17:0] delay16_q_net_x0;
  wire [17:0] delay17_q_net_x0;
  wire [17:0] delay18_q_net_x0;
  wire [17:0] shift5_op_net_x4;
  wire [17:0] shift5_op_net_x5;
  wire [17:0] shift5_op_net_x6;
  wire [17:0] shift5_op_net_x7;

  assign ce_1_sg_x232 = ce_1;
  assign clk_1_sg_x232 = clk_1;
  assign shift5_op_net_x4 = in1;
  assign shift5_op_net_x5 = in2;
  assign shift5_op_net_x7 = in3;
  assign shift5_op_net_x6 = in4;
  assign delay17_q_net_x0 = in5;
  assign delay16_q_net_x0 = in6;
  assign delay18_q_net_x0 = in7;
  assign delay15_q_net_x0 = in8;
  assign out1 = addsub5_s_net_x31;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub (
    .a(shift5_op_net_x4),
    .b(shift5_op_net_x5),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub1 (
    .a(shift5_op_net_x6),
    .b(shift5_op_net_x7),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_e214da8cd737bc9c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub2 (
    .a(delay17_q_net_x0),
    .b(delay16_q_net_x0),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub3 (
    .a(delay18_q_net_x0),
    .b(delay15_q_net_x0),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub4 (
    .a(addsub_s_net),
    .b(addsub1_s_net),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub5 (
    .a(addsub4_s_net),
    .b(addsub6_s_net),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net_x31)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub6 (
    .a(addsub2_s_net),
    .b(addsub3_s_net),
    .ce(ce_1_sg_x232),
    .clk(clk_1_sg_x232),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X3FIR Filter"

module x3fir_filter_module_745784bd72 (
  ce_1,
  clk_1,
  x1,
  x2,
  x3,
  x4,
  y1,
  y10,
  y11,
  y12,
  y2,
  y3,
  y4,
  y5,
  y6,
  y7,
  y8,
  y9
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] x1;
  input [15:0] x2;
  input [15:0] x3;
  input [15:0] x4;
  output [17:0] y1;
  output [17:0] y10;
  output [17:0] y11;
  output [17:0] y12;
  output [17:0] y2;
  output [17:0] y3;
  output [17:0] y4;
  output [17:0] y5;
  output [17:0] y6;
  output [17:0] y7;
  output [17:0] y8;
  output [17:0] y9;

  wire [15:0] addsub1_s_net_x0;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub5_s_net_x0;
  wire [17:0] addsub5_s_net_x38;
  wire [17:0] addsub5_s_net_x39;
  wire [17:0] addsub5_s_net_x40;
  wire [17:0] addsub5_s_net_x41;
  wire [17:0] addsub5_s_net_x42;
  wire [17:0] addsub5_s_net_x43;
  wire [17:0] addsub5_s_net_x44;
  wire [17:0] addsub5_s_net_x45;
  wire [17:0] addsub5_s_net_x46;
  wire [17:0] addsub5_s_net_x47;
  wire [17:0] addsub5_s_net_x48;
  wire [17:0] addsub5_s_net_x49;
  wire [15:0] addsub7_s_net_x0;
  wire [0:0] ce_1_sg_x239;
  wire [0:0] clk_1_sg_x239;
  wire [17:0] delay10_q_net_x0;
  wire [17:0] delay11_q_net_x0;
  wire [17:0] delay12_q_net_x0;
  wire [17:0] delay13_q_net_x0;
  wire [17:0] delay14_q_net_x0;
  wire [17:0] delay15_q_net_x0;
  wire [17:0] delay16_q_net_x0;
  wire [17:0] delay17_q_net_x0;
  wire [17:0] delay18_q_net_x0;
  wire [17:0] delay19_q_net_x0;
  wire [15:0] delay1_q_net_x3;
  wire [17:0] delay20_q_net_x0;
  wire [17:0] delay21_q_net_x0;
  wire [15:0] delay22_q_net_x0;
  wire [17:0] delay23_q_net_x0;
  wire [17:0] delay24_q_net_x0;
  wire [17:0] delay25_q_net_x0;
  wire [15:0] delay26_q_net_x1;
  wire [17:0] delay27_q_net_x0;
  wire [17:0] delay28_q_net_x0;
  wire [15:0] delay29_q_net_x0;
  wire [15:0] delay2_q_net_x1;
  wire [17:0] delay30_q_net_x0;
  wire [17:0] delay31_q_net_x0;
  wire [17:0] delay32_q_net_x0;
  wire [17:0] delay33_q_net_x0;
  wire [17:0] delay35_q_net_x0;
  wire [17:0] delay36_q_net_x0;
  wire [17:0] delay37_q_net_x0;
  wire [17:0] delay39_q_net_x0;
  wire [15:0] delay3_q_net_x0;
  wire [17:0] delay40_q_net_x0;
  wire [17:0] delay42_q_net_x0;
  wire [17:0] delay43_q_net_x0;
  wire [17:0] delay44_q_net_x0;
  wire [17:0] delay47_q_net_x0;
  wire [17:0] delay48_q_net_x0;
  wire [15:0] delay4_q_net_x1;
  wire [17:0] delay51_q_net_x0;
  wire [17:0] delay54_q_net_x0;
  wire [15:0] delay5_q_net_x1;
  wire [15:0] delay6_q_net_x1;
  wire [17:0] delay7_q_net_x0;
  wire [17:0] delay8_q_net_x0;
  wire [17:0] delay9_q_net_x0;
  wire [17:0] shift4_op_net_x10;
  wire [17:0] shift4_op_net_x11;
  wire [17:0] shift4_op_net_x12;
  wire [17:0] shift4_op_net_x13;
  wire [17:0] shift4_op_net_x14;
  wire [17:0] shift4_op_net_x15;
  wire [17:0] shift4_op_net_x16;
  wire [17:0] shift4_op_net_x3;
  wire [17:0] shift4_op_net_x4;
  wire [17:0] shift4_op_net_x5;
  wire [17:0] shift4_op_net_x6;
  wire [17:0] shift4_op_net_x8;
  wire [17:0] shift5_op_net_x10;
  wire [17:0] shift5_op_net_x11;
  wire [17:0] shift5_op_net_x12;
  wire [17:0] shift5_op_net_x13;
  wire [17:0] shift5_op_net_x14;
  wire [17:0] shift5_op_net_x15;
  wire [17:0] shift5_op_net_x16;
  wire [17:0] shift5_op_net_x17;
  wire [17:0] shift5_op_net_x18;
  wire [17:0] shift5_op_net_x19;
  wire [17:0] shift5_op_net_x4;
  wire [17:0] shift5_op_net_x5;
  wire [17:0] shift5_op_net_x6;
  wire [17:0] shift5_op_net_x7;
  wire [17:0] shift5_op_net_x8;
  wire [17:0] shift5_op_net_x9;
  wire [17:0] shift6_op_net_x1;
  wire [17:0] shift6_op_net_x2;
  wire [17:0] shift6_op_net_x3;
  wire [17:0] shift6_op_net_x4;
  wire [17:0] shift8_op_net_x10;
  wire [17:0] shift8_op_net_x11;
  wire [17:0] shift8_op_net_x12;
  wire [17:0] shift8_op_net_x13;
  wire [17:0] shift8_op_net_x14;
  wire [17:0] shift8_op_net_x15;
  wire [17:0] shift8_op_net_x16;
  wire [17:0] shift8_op_net_x17;
  wire [17:0] shift8_op_net_x18;
  wire [17:0] shift8_op_net_x19;
  wire [17:0] shift8_op_net_x4;
  wire [17:0] shift8_op_net_x5;
  wire [17:0] shift8_op_net_x6;
  wire [17:0] shift8_op_net_x7;
  wire [17:0] shift8_op_net_x8;
  wire [17:0] shift8_op_net_x9;

  assign ce_1_sg_x239 = ce_1;
  assign clk_1_sg_x239 = clk_1;
  assign addsub1_s_net_x0 = x1;
  assign addsub3_s_net_x0 = x2;
  assign addsub5_s_net_x0 = x3;
  assign addsub7_s_net_x0 = x4;
  assign y1 = addsub5_s_net_x38;
  assign y10 = addsub5_s_net_x41;
  assign y11 = addsub5_s_net_x48;
  assign y12 = addsub5_s_net_x49;
  assign y2 = addsub5_s_net_x42;
  assign y3 = addsub5_s_net_x43;
  assign y4 = addsub5_s_net_x39;
  assign y5 = addsub5_s_net_x44;
  assign y6 = addsub5_s_net_x45;
  assign y7 = addsub5_s_net_x40;
  assign y8 = addsub5_s_net_x46;
  assign y9 = addsub5_s_net_x47;


  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(delay22_q_net_x0),
    .en(1'b1),
    .q(delay1_q_net_x3)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay10 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x5),
    .en(1'b1),
    .q(delay10_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay11 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift6_op_net_x2),
    .en(1'b1),
    .q(delay11_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay12 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x3),
    .en(1'b1),
    .q(delay12_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay13 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x11),
    .en(1'b1),
    .q(delay13_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay14 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x15),
    .en(1'b1),
    .q(delay14_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay15 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x5),
    .en(1'b1),
    .q(delay15_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay16 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x9),
    .en(1'b1),
    .q(delay16_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay17 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x13),
    .en(1'b1),
    .q(delay17_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay18 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x18),
    .en(1'b1),
    .q(delay18_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay19 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x6),
    .en(1'b1),
    .q(delay19_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay2 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(delay6_q_net_x1),
    .en(1'b1),
    .q(delay2_q_net_x1)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay20 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift6_op_net_x3),
    .en(1'b1),
    .q(delay20_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay21 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x8),
    .en(1'b1),
    .q(delay21_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay22 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(addsub7_s_net_x0),
    .en(1'b1),
    .q(delay22_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay23 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x4),
    .en(1'b1),
    .q(delay23_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay24 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x6),
    .en(1'b1),
    .q(delay24_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay25 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x8),
    .en(1'b1),
    .q(delay25_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay26 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(addsub1_s_net_x0),
    .en(1'b1),
    .q(delay26_q_net_x1)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay27 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x10),
    .en(1'b1),
    .q(delay27_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay28 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x8),
    .en(1'b1),
    .q(delay28_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay29 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(addsub3_s_net_x0),
    .en(1'b1),
    .q(delay29_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay3 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(delay29_q_net_x0),
    .en(1'b1),
    .q(delay3_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay30 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x10),
    .en(1'b1),
    .q(delay30_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay31 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x7),
    .en(1'b1),
    .q(delay31_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay32 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift6_op_net_x4),
    .en(1'b1),
    .q(delay32_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay33 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x12),
    .en(1'b1),
    .q(delay33_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay35 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x5),
    .en(1'b1),
    .q(delay35_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay36 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x7),
    .en(1'b1),
    .q(delay36_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay37 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x14),
    .en(1'b1),
    .q(delay37_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay39 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x12),
    .en(1'b1),
    .q(delay39_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay4 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(addsub1_s_net_x0),
    .en(1'b1),
    .q(delay4_q_net_x1)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay40 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x14),
    .en(1'b1),
    .q(delay40_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay42 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x12),
    .en(1'b1),
    .q(delay42_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay43 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x4),
    .en(1'b1),
    .q(delay43_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay44 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift6_op_net_x1),
    .en(1'b1),
    .q(delay44_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay47 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift4_op_net_x13),
    .en(1'b1),
    .q(delay47_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay48 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x4),
    .en(1'b1),
    .q(delay48_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay5 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(addsub3_s_net_x0),
    .en(1'b1),
    .q(delay5_q_net_x1)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay51 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift8_op_net_x15),
    .en(1'b1),
    .q(delay51_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay54 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x15),
    .en(1'b1),
    .q(delay54_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay6 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(addsub5_s_net_x0),
    .en(1'b1),
    .q(delay6_q_net_x1)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay7 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x9),
    .en(1'b1),
    .q(delay7_q_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(18))
  delay8 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x13),
    .en(1'b1),
    .q(delay8_q_net_x0)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(18))
  delay9 (
    .ce(ce_1_sg_x239),
    .clk(clk_1_sg_x239),
    .d(shift5_op_net_x18),
    .en(1'b1),
    .q(delay9_q_net_x0)
  );

  x3fir_dedicate_module_0be82d3c76  x3fir_dedicate1_551818c9e1 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay5_q_net_x1),
    .c0_x(shift8_op_net_x5),
    .c1_x(shift6_op_net_x2),
    .c2_x(shift5_op_net_x5)
  );

  x3fir_dedicate_module_0be82d3c76  x3fir_dedicate2_3a7be10f1d (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay6_q_net_x1),
    .c0_x(shift8_op_net_x6),
    .c1_x(shift6_op_net_x3),
    .c2_x(shift5_op_net_x6)
  );

  x3fir_dedicate_module_0be82d3c76  x3fir_dedicate3_8d03fdef1c (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay22_q_net_x0),
    .c0_x(shift8_op_net_x7),
    .c1_x(shift6_op_net_x4),
    .c2_x(shift5_op_net_x7)
  );

  x3fir_dedicate_module_0be82d3c76  x3fir_dedicate_0be82d3c76 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay4_q_net_x1),
    .c0_x(shift8_op_net_x4),
    .c1_x(shift6_op_net_x1),
    .c2_x(shift5_op_net_x4)
  );

  x3fir_general1_module_0ff5bcf041  x3fir_general10_8afbb32fbd (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay1_q_net_x3),
    .c6_x(shift8_op_net_x9),
    .c7_x(shift4_op_net_x3),
    .c8_x(shift5_op_net_x9)
  );

  x3fir_general11_module_2b06dc6a59  x3fir_general11_2b06dc6a59 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay1_q_net_x3),
    .c3_x(shift8_op_net_x10),
    .c4_x(shift4_op_net_x4),
    .c5_x(shift5_op_net_x10)
  );

  x3fir_general12_module_448024b5fe  x3fir_general12_448024b5fe (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay1_q_net_x3),
    .c10_x(shift4_op_net_x10),
    .c11_x(shift5_op_net_x11),
    .c9_x(shift8_op_net_x11)
  );

  x3fir_general1_module_0ff5bcf041  x3fir_general1_0ff5bcf041 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay26_q_net_x1),
    .c6_x(shift8_op_net_x8),
    .c7_x(shift4_op_net_x8),
    .c8_x(shift5_op_net_x8)
  );

  x3fir_general11_module_2b06dc6a59  x3fir_general2_1ed755cbb4 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay4_q_net_x1),
    .c3_x(shift8_op_net_x12),
    .c4_x(shift4_op_net_x5),
    .c5_x(shift5_op_net_x12)
  );

  x3fir_general12_module_448024b5fe  x3fir_general3_4a2d78125d (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay26_q_net_x1),
    .c10_x(shift4_op_net_x11),
    .c11_x(shift5_op_net_x13),
    .c9_x(shift8_op_net_x13)
  );

  x3fir_general1_module_0ff5bcf041  x3fir_general4_2945396043 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay29_q_net_x0),
    .c6_x(shift8_op_net_x14),
    .c7_x(shift4_op_net_x12),
    .c8_x(shift5_op_net_x14)
  );

  x3fir_general11_module_2b06dc6a59  x3fir_general5_e0e74515ab (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay5_q_net_x1),
    .c3_x(shift8_op_net_x15),
    .c4_x(shift4_op_net_x13),
    .c5_x(shift5_op_net_x15)
  );

  x3fir_general12_module_448024b5fe  x3fir_general6_70586296b0 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay3_q_net_x0),
    .c10_x(shift4_op_net_x6),
    .c11_x(shift5_op_net_x16),
    .c9_x(shift8_op_net_x16)
  );

  x3fir_general1_module_0ff5bcf041  x3fir_general7_dc99773961 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay2_q_net_x1),
    .c6_x(shift8_op_net_x17),
    .c7_x(shift4_op_net_x14),
    .c8_x(shift5_op_net_x17)
  );

  x3fir_general11_module_2b06dc6a59  x3fir_general8_d78781a960 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay6_q_net_x1),
    .c3_x(shift8_op_net_x18),
    .c4_x(shift4_op_net_x15),
    .c5_x(shift5_op_net_x18)
  );

  x3fir_general12_module_448024b5fe  x3fir_general9_9ec53e3e95 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .din(delay2_q_net_x1),
    .c10_x(shift4_op_net_x16),
    .c11_x(shift5_op_net_x19),
    .c9_x(shift8_op_net_x19)
  );

  y1_calc_module_2a468397d1  y1_calc1_914cfba4ac (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift8_op_net_x5),
    .in2(shift8_op_net_x12),
    .in3(shift8_op_net_x9),
    .in4(shift8_op_net_x19),
    .in5(shift5_op_net_x16),
    .in6(delay28_q_net_x0),
    .in7(delay30_q_net_x0),
    .in8(delay19_q_net_x0),
    .out1(addsub5_s_net_x39)
  );

  y1_calc_module_2a468397d1  y1_calc2_49020cce76 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift8_op_net_x6),
    .in2(shift8_op_net_x15),
    .in3(shift8_op_net_x8),
    .in4(shift8_op_net_x11),
    .in5(shift5_op_net_x19),
    .in6(delay40_q_net_x0),
    .in7(delay42_q_net_x0),
    .in8(delay31_q_net_x0),
    .out1(addsub5_s_net_x40)
  );

  y1_calc_module_2a468397d1  y1_calc3_3714d41d64 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift8_op_net_x7),
    .in2(shift8_op_net_x18),
    .in3(shift8_op_net_x14),
    .in4(shift8_op_net_x13),
    .in5(shift5_op_net_x11),
    .in6(shift5_op_net_x17),
    .in7(delay54_q_net_x0),
    .in8(delay43_q_net_x0),
    .out1(addsub5_s_net_x41)
  );

  y1_calc_module_2a468397d1  y1_calc_2a468397d1 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift8_op_net_x4),
    .in2(shift8_op_net_x10),
    .in3(shift8_op_net_x17),
    .in4(shift8_op_net_x16),
    .in5(delay8_q_net_x0),
    .in6(delay7_q_net_x0),
    .in7(delay9_q_net_x0),
    .in8(delay10_q_net_x0),
    .out1(addsub5_s_net_x38)
  );

  y2_calc1_module_1f72f53bb5  y2_calc1_1f72f53bb5 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift5_op_net_x4),
    .in2(shift5_op_net_x10),
    .in3(shift5_op_net_x17),
    .in4(shift5_op_net_x16),
    .in5(delay17_q_net_x0),
    .in6(delay16_q_net_x0),
    .in7(delay18_q_net_x0),
    .in8(delay15_q_net_x0),
    .out1(addsub5_s_net_x43)
  );

  y2_calc_module_206f212102  y2_calc2_92281056a2 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift6_op_net_x2),
    .in2(shift4_op_net_x5),
    .in3(shift4_op_net_x3),
    .in4(shift4_op_net_x16),
    .in5(shift4_op_net_x6),
    .in6(delay21_q_net_x0),
    .in7(delay23_q_net_x0),
    .in8(delay20_q_net_x0),
    .out1(addsub5_s_net_x44)
  );

  y2_calc1_module_1f72f53bb5  y2_calc3_4051d509bf (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift5_op_net_x5),
    .in2(shift5_op_net_x12),
    .in3(shift5_op_net_x9),
    .in4(shift5_op_net_x19),
    .in5(shift8_op_net_x16),
    .in6(delay25_q_net_x0),
    .in7(delay27_q_net_x0),
    .in8(delay24_q_net_x0),
    .out1(addsub5_s_net_x45)
  );

  y2_calc_module_206f212102  y2_calc4_2f15b79d78 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift6_op_net_x3),
    .in2(shift4_op_net_x13),
    .in3(shift4_op_net_x8),
    .in4(shift4_op_net_x10),
    .in5(shift4_op_net_x16),
    .in6(delay33_q_net_x0),
    .in7(delay35_q_net_x0),
    .in8(delay32_q_net_x0),
    .out1(addsub5_s_net_x46)
  );

  y2_calc1_module_1f72f53bb5  y2_calc5_e615ba68f7 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift5_op_net_x6),
    .in2(shift5_op_net_x15),
    .in3(shift5_op_net_x8),
    .in4(shift5_op_net_x11),
    .in5(shift8_op_net_x19),
    .in6(delay37_q_net_x0),
    .in7(delay39_q_net_x0),
    .in8(delay36_q_net_x0),
    .out1(addsub5_s_net_x47)
  );

  y2_calc_module_206f212102  y2_calc6_c7984622c5 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift6_op_net_x4),
    .in2(shift4_op_net_x15),
    .in3(shift4_op_net_x12),
    .in4(shift4_op_net_x11),
    .in5(shift4_op_net_x10),
    .in6(shift4_op_net_x14),
    .in7(delay47_q_net_x0),
    .in8(delay44_q_net_x0),
    .out1(addsub5_s_net_x48)
  );

  y2_calc1_module_1f72f53bb5  y2_calc7_458b358938 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift5_op_net_x7),
    .in2(shift5_op_net_x18),
    .in3(shift5_op_net_x14),
    .in4(shift5_op_net_x13),
    .in5(shift8_op_net_x11),
    .in6(shift8_op_net_x17),
    .in7(delay51_q_net_x0),
    .in8(delay48_q_net_x0),
    .out1(addsub5_s_net_x49)
  );

  y2_calc_module_206f212102  y2_calc_206f212102 (
    .ce_1(ce_1_sg_x239),
    .clk_1(clk_1_sg_x239),
    .in1(shift6_op_net_x1),
    .in2(shift4_op_net_x4),
    .in3(shift4_op_net_x14),
    .in4(shift4_op_net_x6),
    .in5(delay13_q_net_x0),
    .in6(delay12_q_net_x0),
    .in7(delay14_q_net_x0),
    .in8(delay11_q_net_x0),
    .out1(addsub5_s_net_x42)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X4FIR Filter1/c0"

module c0_module_a26fed9ac4 (
  ce_1,
  clk_1,
  din,
  dout
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [18:0] dout;

  wire [20:0] addsub_s_net;
  wire [0:0] ce_1_sg_x269;
  wire [0:0] clk_1_sg_x269;
  wire [18:0] convert1_dout_net_x0;
  wire [20:0] convert_dout_net;
  wire [15:0] delay9_q_net_x0;
  wire [15:0] delay_q_net;
  wire [20:0] shift1_op_net;
  wire [20:0] shift2_op_net;

  assign ce_1_sg_x269 = ce_1;
  assign clk_1_sg_x269 = clk_1;
  assign delay9_q_net_x0 = din;
  assign dout = convert1_dout_net_x0;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(20),
    .a_width(21),
    .b_arith(`xlSigned),
    .b_bin_pt(20),
    .b_width(21),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(22),
    .core_name0("addsb_11_0_8825bda37560e614"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(22),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(20),
    .s_width(21))
  addsub (
    .a(convert_dout_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x269),
    .clk(clk_1_sg_x269),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(15),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(20),
    .dout_width(21),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x269),
    .clk(clk_1_sg_x269),
    .clr(1'b0),
    .din(delay_q_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(20),
    .din_width(21),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(1),
    .overflow(`xlWrap),
    .quantization(`xlRound))
  convert1 (
    .ce(ce_1_sg_x269),
    .clk(clk_1_sg_x269),
    .clr(1'b0),
    .din(shift2_op_net),
    .en(1'b1),
    .dout(convert1_dout_net_x0)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x269),
    .clk(clk_1_sg_x269),
    .d(delay9_q_net_x0),
    .en(1'b1),
    .q(delay_q_net)
  );

  shift_5d11edb312  shift1 (
    .ce(ce_1_sg_x269),
    .clk(clk_1_sg_x269),
    .clr(1'b0),
    .ip(convert_dout_net),
    .op(shift1_op_net)
  );

  shift_e97ef80d67  shift2 (
    .ce(ce_1_sg_x269),
    .clk(clk_1_sg_x269),
    .clr(1'b0),
    .ip(addsub_s_net),
    .op(shift2_op_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X4FIR Filter1/mult_general"

module mult_general_module_3c8b851f63 (
  c1_x,
  c2_x,
  c3_x,
  ce_1,
  clk_1,
  din
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [18:0] c1_x;
  output [18:0] c2_x;
  output [18:0] c3_x;

  wire [16:0] addsub1_s_net;
  wire [17:0] addsub2_s_net;
  wire [14:0] addsub3_s_net;
  wire [0:0] ce_1_sg_x270;
  wire [0:0] clk_1_sg_x270;
  wire [16:0] convert1_dout_net;
  wire [14:0] convert2_dout_net;
  wire [17:0] convert3_dout_net;
  wire [18:0] convert4_dout_net;
  wire [18:0] convert5_dout_net;
  wire [18:0] convert6_dout_net;
  wire [6:0] convert7_dout_net;
  wire [8:0] convert8_dout_net;
  wire [9:0] convert9_dout_net;
  wire [8:0] convert_dout_net;
  wire [15:0] delay9_q_net_x1;
  wire [22:0] delay_q_net;
  wire [6:0] lsb1_y_net;
  wire [8:0] reinterpret10_output_port_net;
  wire [6:0] reinterpret11_output_port_net;
  wire [8:0] reinterpret1_output_port_net;
  wire [14:0] reinterpret2_output_port_net;
  wire [6:0] reinterpret3_output_port_net;
  wire [9:0] reinterpret4_output_port_net;
  wire [16:0] reinterpret5_output_port_net;
  wire [17:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [22:0] rom3_data_net;
  wire [49:0] rom_data_net;
  wire [14:0] shift1_op_net;
  wire [16:0] shift2_op_net;
  wire [17:0] shift3_op_net;
  wire [18:0] shift4_op_net_x0;
  wire [18:0] shift5_op_net_x0;
  wire [18:0] shift8_op_net_x0;
  wire [5:0] slice1_y_net;
  wire [16:0] slice2_y_net;
  wire [17:0] slice3_y_net;
  wire [7:0] slice4_y_net;
  wire [8:0] slice5_y_net;
  wire [14:0] slice_y_net;

  assign c1_x = shift8_op_net_x0;
  assign c2_x = shift4_op_net_x0;
  assign c3_x = shift5_op_net_x0;
  assign ce_1_sg_x270 = ce_1;
  assign clk_1_sg_x270 = clk_1;
  assign delay9_q_net_x1 = din;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(16),
    .a_width(17),
    .b_arith(`xlSigned),
    .b_bin_pt(16),
    .b_width(17),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(18),
    .core_name0("addsb_11_0_5d46a0b9957ad856"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(18),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(16),
    .s_width(17))
  addsub1 (
    .a(reinterpret5_output_port_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub2 (
    .a(reinterpret6_output_port_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(14),
    .a_width(15),
    .b_arith(`xlSigned),
    .b_bin_pt(14),
    .b_width(15),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(16),
    .core_name0("addsb_11_0_fa4e7b8a00f98f0c"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(16),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(14),
    .s_width(15))
  addsub3 (
    .a(reinterpret2_output_port_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(9),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(8),
    .din_width(9),
    .dout_arith(2),
    .dout_bin_pt(16),
    .dout_width(17),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(6),
    .din_width(7),
    .dout_arith(2),
    .dout_bin_pt(14),
    .dout_width(15),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(9),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(14),
    .din_width(15),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(16),
    .din_width(17),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(17),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(6),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(7),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(slice1_y_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(8),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(9),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(slice4_y_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(9),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .din(slice5_y_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(23))
  delay (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .d(rom3_data_net),
    .en(1'b1),
    .q(delay_q_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(6),
    .x_width(16),
    .y_width(7))
  lsb1 (
    .x(reinterpret9_output_port_net),
    .y(lsb1_y_net)
  );

  reinterpret_81e883cd82  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert8_dout_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_34f6390c19  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert_dout_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_016d92ab20  reinterpret11 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(lsb1_y_net),
    .output_port(reinterpret11_output_port_net)
  );

  reinterpret_6200c8761b  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice_y_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_8eee8341d8  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert7_dout_net),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_fd8afbe046  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert9_dout_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_79f2a2c095  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice2_y_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_87da68fdf8  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice3_y_net),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay9_q_net_x1),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom #(

    .c_address_width(9),
    .c_width(50),
    .core_name0("bmg_62_b6c0b5dfd1d89cee"),
    .latency(1))
  rom (
    .addr(reinterpret10_output_port_net),
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .en(1'b1),
    .rst(1'b0),
    .data(rom_data_net)
  );

  xlsprom_dist #(

    .addr_width(7),
    .c_address_width(7),
    .c_width(23),
    .core_name0("dmg_62_ee59d5b88a2a13fb"),
    .latency(1))
  rom3 (
    .addr(reinterpret11_output_port_net),
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .en(1'b1),
    .data(rom3_data_net)
  );

  shift_447ff429c9  shift1 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift1_op_net)
  );

  shift_0be5f5842d  shift2 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .ip(convert1_dout_net),
    .op(shift2_op_net)
  );

  shift_13f7182392  shift3 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_0b3d34a3d5  shift4 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift4_op_net_x0)
  );

  shift_091db5281e  shift5 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift5_op_net_x0)
  );

  shift_bc177199ac  shift8 (
    .ce(ce_1_sg_x270),
    .clk(clk_1_sg_x270),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift8_op_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(14),
    .x_width(50),
    .y_width(15))
  slice (
    .x(rom_data_net),
    .y(slice_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(5),
    .x_width(23),
    .y_width(6))
  slice1 (
    .x(delay_q_net),
    .y(slice1_y_net)
  );

  xlslice #(

    .new_lsb(15),
    .new_msb(31),
    .x_width(50),
    .y_width(17))
  slice2 (
    .x(rom_data_net),
    .y(slice2_y_net)
  );

  xlslice #(

    .new_lsb(32),
    .new_msb(49),
    .x_width(50),
    .y_width(18))
  slice3 (
    .x(rom_data_net),
    .y(slice3_y_net)
  );

  xlslice #(

    .new_lsb(6),
    .new_msb(13),
    .x_width(23),
    .y_width(8))
  slice4 (
    .x(delay_q_net),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(14),
    .new_msb(22),
    .x_width(23),
    .y_width(9))
  slice5 (
    .x(delay_q_net),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X4FIR Filter1/mult_general1"

module mult_general1_module_bf2d6afcbe (
  c4_x,
  c5_x,
  c6_x,
  ce_1,
  clk_1,
  din
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din;
  output [18:0] c4_x;
  output [18:0] c5_x;
  output [18:0] c6_x;

  wire [18:0] addsub1_s_net;
  wire [18:0] addsub2_s_net;
  wire [17:0] addsub3_s_net;
  wire [0:0] ce_1_sg_x271;
  wire [0:0] clk_1_sg_x271;
  wire [18:0] convert1_dout_net;
  wire [17:0] convert2_dout_net;
  wire [18:0] convert3_dout_net;
  wire [18:0] convert4_dout_net;
  wire [18:0] convert5_dout_net;
  wire [18:0] convert6_dout_net;
  wire [9:0] convert7_dout_net;
  wire [10:0] convert8_dout_net;
  wire [10:0] convert9_dout_net;
  wire [8:0] convert_dout_net;
  wire [28:0] delay_q_net_x0;
  wire [15:0] delay_q_net_x1;
  wire [6:0] lsb1_y_net;
  wire [8:0] reinterpret10_output_port_net;
  wire [6:0] reinterpret11_output_port_net;
  wire [10:0] reinterpret1_output_port_net;
  wire [17:0] reinterpret2_output_port_net;
  wire [9:0] reinterpret3_output_port_net;
  wire [10:0] reinterpret4_output_port_net;
  wire [18:0] reinterpret5_output_port_net;
  wire [18:0] reinterpret6_output_port_net;
  wire [15:0] reinterpret9_output_port_net;
  wire [28:0] rom3_data_net;
  wire [55:0] rom_data_net;
  wire [17:0] shift1_op_net;
  wire [18:0] shift2_op_net;
  wire [18:0] shift3_op_net;
  wire [18:0] shift4_op_net_x0;
  wire [18:0] shift5_op_net_x0;
  wire [18:0] shift8_op_net_x0;
  wire [8:0] slice1_y_net;
  wire [18:0] slice2_y_net;
  wire [18:0] slice3_y_net;
  wire [9:0] slice4_y_net;
  wire [9:0] slice5_y_net;
  wire [17:0] slice_y_net;

  assign c4_x = shift8_op_net_x0;
  assign c5_x = shift4_op_net_x0;
  assign c6_x = shift5_op_net_x0;
  assign ce_1_sg_x271 = ce_1;
  assign clk_1_sg_x271 = clk_1;
  assign delay_q_net_x1 = din;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub1 (
    .a(reinterpret5_output_port_net),
    .b(shift2_op_net),
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub2 (
    .a(reinterpret6_output_port_net),
    .b(shift3_op_net),
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(17),
    .a_width(18),
    .b_arith(`xlSigned),
    .b_bin_pt(17),
    .b_width(18),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(19),
    .core_name0("addsb_11_0_ffdcda883ad34064"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(19),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(17),
    .s_width(18))
  addsub3 (
    .a(reinterpret2_output_port_net),
    .b(shift1_op_net),
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(7),
    .din_width(16),
    .dout_arith(2),
    .dout_bin_pt(0),
    .dout_width(9),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(reinterpret9_output_port_net),
    .en(1'b1),
    .dout(convert_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(10),
    .din_width(11),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(reinterpret1_output_port_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(9),
    .din_width(10),
    .dout_arith(2),
    .dout_bin_pt(17),
    .dout_width(18),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(reinterpret3_output_port_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(10),
    .din_width(11),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(reinterpret4_output_port_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(17),
    .din_width(18),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(addsub3_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert5 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(addsub1_s_net),
    .en(1'b1),
    .dout(convert5_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(18),
    .dout_width(19),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert6 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(addsub2_s_net),
    .en(1'b1),
    .dout(convert6_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(9),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(10),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert7 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(slice1_y_net),
    .en(1'b1),
    .dout(convert7_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(10),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(11),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert8 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(slice4_y_net),
    .en(1'b1),
    .dout(convert8_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(1),
    .din_bin_pt(0),
    .din_width(10),
    .dout_arith(1),
    .dout_bin_pt(0),
    .dout_width(11),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert9 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .din(slice5_y_net),
    .en(1'b1),
    .dout(convert9_dout_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(29))
  delay (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .d(rom3_data_net),
    .en(1'b1),
    .q(delay_q_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(6),
    .x_width(16),
    .y_width(7))
  lsb1 (
    .x(reinterpret9_output_port_net),
    .y(lsb1_y_net)
  );

  reinterpret_7fc77e4dea  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert8_dout_net),
    .output_port(reinterpret1_output_port_net)
  );

  reinterpret_34f6390c19  reinterpret10 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert_dout_net),
    .output_port(reinterpret10_output_port_net)
  );

  reinterpret_016d92ab20  reinterpret11 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(lsb1_y_net),
    .output_port(reinterpret11_output_port_net)
  );

  reinterpret_87da68fdf8  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice_y_net),
    .output_port(reinterpret2_output_port_net)
  );

  reinterpret_fd8afbe046  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert7_dout_net),
    .output_port(reinterpret3_output_port_net)
  );

  reinterpret_7fc77e4dea  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(convert9_dout_net),
    .output_port(reinterpret4_output_port_net)
  );

  reinterpret_888f8372ca  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice2_y_net),
    .output_port(reinterpret5_output_port_net)
  );

  reinterpret_888f8372ca  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(slice3_y_net),
    .output_port(reinterpret6_output_port_net)
  );

  reinterpret_81b71e1f8b  reinterpret9 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay_q_net_x1),
    .output_port(reinterpret9_output_port_net)
  );

  xlsprom #(

    .c_address_width(9),
    .c_width(56),
    .core_name0("bmg_62_d909ce02585bca26"),
    .latency(1))
  rom (
    .addr(reinterpret10_output_port_net),
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .en(1'b1),
    .rst(1'b0),
    .data(rom_data_net)
  );

  xlsprom_dist #(

    .addr_width(7),
    .c_address_width(7),
    .c_width(29),
    .core_name0("dmg_62_80d2b3237a1e3d03"),
    .latency(1))
  rom3 (
    .addr(reinterpret11_output_port_net),
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .en(1'b1),
    .data(rom3_data_net)
  );

  shift_13f7182392  shift1 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .ip(convert2_dout_net),
    .op(shift1_op_net)
  );

  shift_ca62c0bb60  shift2 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .ip(convert1_dout_net),
    .op(shift2_op_net)
  );

  shift_ca62c0bb60  shift3 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .ip(convert3_dout_net),
    .op(shift3_op_net)
  );

  shift_c01ac94bc0  shift4 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .ip(convert5_dout_net),
    .op(shift4_op_net_x0)
  );

  shift_c01ac94bc0  shift5 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .ip(convert6_dout_net),
    .op(shift5_op_net_x0)
  );

  shift_091db5281e  shift8 (
    .ce(ce_1_sg_x271),
    .clk(clk_1_sg_x271),
    .clr(1'b0),
    .ip(convert4_dout_net),
    .op(shift8_op_net_x0)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(17),
    .x_width(56),
    .y_width(18))
  slice (
    .x(rom_data_net),
    .y(slice_y_net)
  );

  xlslice #(

    .new_lsb(0),
    .new_msb(8),
    .x_width(29),
    .y_width(9))
  slice1 (
    .x(delay_q_net_x0),
    .y(slice1_y_net)
  );

  xlslice #(

    .new_lsb(18),
    .new_msb(36),
    .x_width(56),
    .y_width(19))
  slice2 (
    .x(rom_data_net),
    .y(slice2_y_net)
  );

  xlslice #(

    .new_lsb(37),
    .new_msb(55),
    .x_width(56),
    .y_width(19))
  slice3 (
    .x(rom_data_net),
    .y(slice3_y_net)
  );

  xlslice #(

    .new_lsb(9),
    .new_msb(18),
    .x_width(29),
    .y_width(10))
  slice4 (
    .x(delay_q_net_x0),
    .y(slice4_y_net)
  );

  xlslice #(

    .new_lsb(19),
    .new_msb(28),
    .x_width(29),
    .y_width(10))
  slice5 (
    .x(delay_q_net_x0),
    .y(slice5_y_net)
  );
endmodule
// Generated from Simulink block "duc_341MHz/X4FIR Filter1"

module x4fir_filter1_module_be749245b8 (
  ce_1,
  clk_1,
  in1,
  out1,
  out2,
  out3,
  out4,
  valid_in
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] in1;
  input [0:0] valid_in;
  output [15:0] out1;
  output [15:0] out2;
  output [15:0] out3;
  output [15:0] out4;

  wire [18:0] addsub10_s_net;
  wire [18:0] addsub11_s_net;
  wire [18:0] addsub12_s_net;
  wire [18:0] addsub13_s_net;
  wire [18:0] addsub1_s_net;
  wire [18:0] addsub2_s_net;
  wire [18:0] addsub3_s_net;
  wire [18:0] addsub4_s_net;
  wire [18:0] addsub5_s_net;
  wire [18:0] addsub6_s_net;
  wire [18:0] addsub7_s_net;
  wire [18:0] addsub8_s_net;
  wire [18:0] addsub9_s_net;
  wire [0:0] ce_1_sg_x272;
  wire [0:0] clk_1_sg_x272;
  wire [18:0] constant_op_net;
  wire [15:0] convert1_dout_net;
  wire [18:0] convert1_dout_net_x0;
  wire [15:0] convert2_dout_net;
  wire [15:0] convert3_dout_net;
  wire [15:0] convert4_dout_net;
  wire [1:0] counter_op_net;
  wire [1:0] delay10_q_net;
  wire [1:0] delay11_q_net;
  wire [1:0] delay12_q_net;
  wire [15:0] delay13_q_net_x2;
  wire [15:0] delay14_q_net_x2;
  wire [15:0] delay15_q_net_x2;
  wire [18:0] delay16_q_net;
  wire [0:0] delay17_q_net_x1;
  wire [0:0] delay1_q_net;
  wire [15:0] delay1_q_net_x7;
  wire [18:0] delay2_q_net;
  wire [15:0] delay3_q_net;
  wire [15:0] delay4_q_net;
  wire [15:0] delay5_q_net;
  wire [18:0] delay6_q_net;
  wire [18:0] delay7_q_net;
  wire [18:0] delay8_q_net;
  wire [15:0] delay9_q_net_x1;
  wire [15:0] delay_q_net_x1;
  wire [15:0] mux1_y_net;
  wire [15:0] mux2_y_net;
  wire [15:0] mux3_y_net_x2;
  wire [15:0] mux_y_net;
  wire [18:0] shift4_op_net_x0;
  wire [18:0] shift4_op_net_x1;
  wire [18:0] shift5_op_net_x0;
  wire [18:0] shift5_op_net_x1;
  wire [18:0] shift8_op_net_x0;
  wire [18:0] shift8_op_net_x1;

  assign ce_1_sg_x272 = ce_1;
  assign clk_1_sg_x272 = clk_1;
  assign delay1_q_net_x7 = in1;
  assign out1 = delay15_q_net_x2;
  assign out2 = delay14_q_net_x2;
  assign out3 = delay13_q_net_x2;
  assign out4 = mux3_y_net_x2;
  assign delay17_q_net_x1 = valid_in;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub1 (
    .a(delay16_q_net),
    .b(shift4_op_net_x1),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub10 (
    .a(addsub9_s_net),
    .b(constant_op_net),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub10_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub11 (
    .a(addsub13_s_net),
    .b(constant_op_net),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub11_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub12 (
    .a(addsub2_s_net),
    .b(convert1_dout_net_x0),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub12_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub13 (
    .a(addsub1_s_net),
    .b(shift5_op_net_x0),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub13_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub2 (
    .a(addsub5_s_net),
    .b(shift8_op_net_x1),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub3 (
    .a(delay7_q_net),
    .b(shift4_op_net_x1),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub4 (
    .a(addsub3_s_net),
    .b(shift8_op_net_x0),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub5 (
    .a(delay6_q_net),
    .b(delay2_q_net),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub6 (
    .a(delay8_q_net),
    .b(shift5_op_net_x1),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub7 (
    .a(addsub12_s_net),
    .b(constant_op_net),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub7_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub8 (
    .a(addsub4_s_net),
    .b(constant_op_net),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub8_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(18),
    .a_width(19),
    .b_arith(`xlSigned),
    .b_bin_pt(18),
    .b_width(19),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(20),
    .core_name0("addsb_11_0_8b3d9400293568fa"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(20),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(18),
    .s_width(19))
  addsub9 (
    .a(addsub6_s_net),
    .b(shift4_op_net_x0),
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub9_s_net)
  );

  c0_module_a26fed9ac4  c0_a26fed9ac4 (
    .ce_1(ce_1_sg_x272),
    .clk_1(clk_1_sg_x272),
    .din(delay9_q_net_x1),
    .dout(convert1_dout_net_x0)
  );

  constant_b93fdaba45  constant_x0 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .op(constant_op_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert1 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .din(addsub7_s_net),
    .en(1'b1),
    .dout(convert1_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert2 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .din(addsub10_s_net),
    .en(1'b1),
    .dout(convert2_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert3 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .din(addsub11_s_net),
    .en(1'b1),
    .dout(convert3_dout_net)
  );

  xlconvert #(

    .bool_conversion(0),
    .din_arith(2),
    .din_bin_pt(18),
    .din_width(19),
    .dout_arith(2),
    .dout_bin_pt(15),
    .dout_width(16),
    .latency(0),
    .overflow(`xlWrap),
    .quantization(`xlTruncate))
  convert4 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .din(addsub8_s_net),
    .en(1'b1),
    .dout(convert4_dout_net)
  );

  xlcounter_free #(

    .core_name0("cntr_11_0_096c03c2da659b51"),
    .op_arith(`xlUnsigned),
    .op_width(2))
  counter (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .en(1'b1),
    .rst(delay1_q_net),
    .op(counter_op_net)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(delay9_q_net_x1),
    .en(1'b1),
    .q(delay_q_net_x1)
  );

  xldelay #(

    .latency(20),
    .reg_retiming(0),
    .width(1))
  delay1 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(delay17_q_net_x1),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(2))
  delay10 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(counter_op_net),
    .en(1'b1),
    .q(delay10_q_net)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(2))
  delay11 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(counter_op_net),
    .en(1'b1),
    .q(delay11_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(2))
  delay12 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(counter_op_net),
    .en(1'b1),
    .q(delay12_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay13 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(mux2_y_net),
    .en(1'b1),
    .q(delay13_q_net_x2)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay14 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(mux1_y_net),
    .en(1'b1),
    .q(delay14_q_net_x2)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(16))
  delay15 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(mux_y_net),
    .en(1'b1),
    .q(delay15_q_net_x2)
  );

  xldelay #(

    .latency(7),
    .reg_retiming(0),
    .width(19))
  delay16 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(shift8_op_net_x0),
    .en(1'b1),
    .q(delay16_q_net)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(19))
  delay2 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(shift8_op_net_x1),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay3 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(convert4_dout_net),
    .en(1'b1),
    .q(delay3_q_net)
  );

  xldelay #(

    .latency(2),
    .reg_retiming(0),
    .width(16))
  delay4 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(convert2_dout_net),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(16))
  delay5 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(convert3_dout_net),
    .en(1'b1),
    .q(delay5_q_net)
  );

  xldelay #(

    .latency(10),
    .reg_retiming(0),
    .width(19))
  delay6 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(convert1_dout_net_x0),
    .en(1'b1),
    .q(delay6_q_net)
  );

  xldelay #(

    .latency(7),
    .reg_retiming(0),
    .width(19))
  delay7 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(shift5_op_net_x0),
    .en(1'b1),
    .q(delay7_q_net)
  );

  xldelay #(

    .latency(7),
    .reg_retiming(0),
    .width(19))
  delay8 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(shift4_op_net_x0),
    .en(1'b1),
    .q(delay8_q_net)
  );

  xldelay #(

    .latency(3),
    .reg_retiming(0),
    .width(16))
  delay9 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .d(delay1_q_net_x7),
    .en(1'b1),
    .q(delay9_q_net_x1)
  );

  mult_general1_module_bf2d6afcbe  mult_general1_bf2d6afcbe (
    .ce_1(ce_1_sg_x272),
    .clk_1(clk_1_sg_x272),
    .din(delay_q_net_x1),
    .c4_x(shift8_op_net_x1),
    .c5_x(shift4_op_net_x1),
    .c6_x(shift5_op_net_x1)
  );

  mult_general_module_3c8b851f63  mult_general_3c8b851f63 (
    .ce_1(ce_1_sg_x272),
    .clk_1(clk_1_sg_x272),
    .din(delay9_q_net_x1),
    .c1_x(shift8_op_net_x0),
    .c2_x(shift4_op_net_x0),
    .c3_x(shift5_op_net_x0)
  );

  mux_a6eee4b271  mux (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .d0(convert1_dout_net),
    .d1(delay3_q_net),
    .d2(delay4_q_net),
    .d3(delay5_q_net),
    .sel(counter_op_net),
    .y(mux_y_net)
  );

  mux_a6eee4b271  mux1 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .d0(convert1_dout_net),
    .d1(delay3_q_net),
    .d2(delay4_q_net),
    .d3(delay5_q_net),
    .sel(delay12_q_net),
    .y(mux1_y_net)
  );

  mux_a6eee4b271  mux2 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .d0(convert1_dout_net),
    .d1(delay3_q_net),
    .d2(delay4_q_net),
    .d3(delay5_q_net),
    .sel(delay10_q_net),
    .y(mux2_y_net)
  );

  mux_a6eee4b271  mux3 (
    .ce(ce_1_sg_x272),
    .clk(clk_1_sg_x272),
    .clr(1'b0),
    .d0(convert1_dout_net),
    .d1(delay3_q_net),
    .d2(delay4_q_net),
    .d3(delay5_q_net),
    .sel(delay11_q_net),
    .y(mux3_y_net_x2)
  );
endmodule
// Generated from Simulink block "duc_341MHz"

(* core_generation_info = "duc_341MHz,sysgen_core,{clock_period=2.92900000,clocking=Clock_Enables,compilation=HDL_Netlist,sample_periods=1.00000000000,testbench=0,total_blocks=9706,xilinx_accumulator_block=24,xilinx_adder_subtracter_block=912,xilinx_binary_shift_operator_block=626,xilinx_bit_slice_extractor_block=432,xilinx_bus_concatenator_block=9,xilinx_bus_multiplexer_block=86,xilinx_constant_block_block=338,xilinx_counter_block=36,xilinx_delay_block=827,xilinx_dsp48e1_block=226,xilinx_dual_port_random_access_memory_block=33,xilinx_fdatool_interface_block=6,xilinx_gateway_in_block=112,xilinx_gateway_out_block=12,xilinx_instruction_block_block=154,xilinx_inverter_block=9,xilinx_logical_block_block=8,xilinx_register_block=144,xilinx_single_port_read_only_memory_block=145,xilinx_system_generator_block=1,xilinx_type_converter_block=1427,xilinx_type_reinterpreter_block=1127,}" *)
module duc_341mhz (
  ce_1,
  clk_1,
  din1,
  din2,
  din5,
  ena_b0c0,
  ena_b0c1,
  ena_b0c10,
  ena_b0c11,
  ena_b0c12,
  ena_b0c13,
  ena_b0c14,
  ena_b0c15,
  ena_b0c16,
  ena_b0c17,
  ena_b0c18,
  ena_b0c19,
  ena_b0c2,
  ena_b0c20,
  ena_b0c21,
  ena_b0c22,
  ena_b0c23,
  ena_b0c3,
  ena_b0c4,
  ena_b0c5,
  ena_b0c6,
  ena_b0c7,
  ena_b0c8,
  ena_b0c9,
  ena_b1c0,
  ena_b1c1,
  ena_b1c10,
  ena_b1c11,
  ena_b1c12,
  ena_b1c13,
  ena_b1c14,
  ena_b1c15,
  ena_b1c16,
  ena_b1c17,
  ena_b1c18,
  ena_b1c19,
  ena_b1c2,
  ena_b1c20,
  ena_b1c21,
  ena_b1c22,
  ena_b1c23,
  ena_b1c3,
  ena_b1c4,
  ena_b1c5,
  ena_b1c6,
  ena_b1c7,
  ena_b1c8,
  ena_b1c9,
  ena_b2c0,
  ena_b2c1,
  ena_b2c10,
  ena_b2c11,
  ena_b2c12,
  ena_b2c13,
  ena_b2c14,
  ena_b2c15,
  ena_b2c16,
  ena_b2c17,
  ena_b2c18,
  ena_b2c19,
  ena_b2c2,
  ena_b2c20,
  ena_b2c21,
  ena_b2c22,
  ena_b2c23,
  ena_b2c3,
  ena_b2c4,
  ena_b2c5,
  ena_b2c6,
  ena_b2c7,
  ena_b2c8,
  ena_b2c9,
  freq_word0,
  freq_word1,
  freq_word10,
  freq_word11,
  freq_word12,
  freq_word13,
  freq_word14,
  freq_word15,
  freq_word16,
  freq_word17,
  freq_word18,
  freq_word19,
  freq_word2,
  freq_word20,
  freq_word21,
  freq_word22,
  freq_word23,
  freq_word24,
  freq_word25,
  freq_word26,
  freq_word27,
  freq_word28,
  freq_word29,
  freq_word3,
  freq_word30,
  freq_word31,
  freq_word32,
  freq_word33,
  freq_word34,
  freq_word35,
  freq_word4,
  freq_word5,
  freq_word6,
  freq_word7,
  freq_word8,
  freq_word9,
  iout0,
  iout1,
  iout10,
  iout11,
  iout2,
  iout3,
  iout4,
  iout5,
  iout6,
  iout7,
  iout8,
  iout9,
  rst
);

  input [0:0] ce_1;
  input [0:0] clk_1;
  input [15:0] din1;
  input [15:0] din2;
  input [15:0] din5;
  input [0:0] ena_b0c0;
  input [0:0] ena_b0c1;
  input [0:0] ena_b0c10;
  input [0:0] ena_b0c11;
  input [0:0] ena_b0c12;
  input [0:0] ena_b0c13;
  input [0:0] ena_b0c14;
  input [0:0] ena_b0c15;
  input [0:0] ena_b0c16;
  input [0:0] ena_b0c17;
  input [0:0] ena_b0c18;
  input [0:0] ena_b0c19;
  input [0:0] ena_b0c2;
  input [0:0] ena_b0c20;
  input [0:0] ena_b0c21;
  input [0:0] ena_b0c22;
  input [0:0] ena_b0c23;
  input [0:0] ena_b0c3;
  input [0:0] ena_b0c4;
  input [0:0] ena_b0c5;
  input [0:0] ena_b0c6;
  input [0:0] ena_b0c7;
  input [0:0] ena_b0c8;
  input [0:0] ena_b0c9;
  input [0:0] ena_b1c0;
  input [0:0] ena_b1c1;
  input [0:0] ena_b1c10;
  input [0:0] ena_b1c11;
  input [0:0] ena_b1c12;
  input [0:0] ena_b1c13;
  input [0:0] ena_b1c14;
  input [0:0] ena_b1c15;
  input [0:0] ena_b1c16;
  input [0:0] ena_b1c17;
  input [0:0] ena_b1c18;
  input [0:0] ena_b1c19;
  input [0:0] ena_b1c2;
  input [0:0] ena_b1c20;
  input [0:0] ena_b1c21;
  input [0:0] ena_b1c22;
  input [0:0] ena_b1c23;
  input [0:0] ena_b1c3;
  input [0:0] ena_b1c4;
  input [0:0] ena_b1c5;
  input [0:0] ena_b1c6;
  input [0:0] ena_b1c7;
  input [0:0] ena_b1c8;
  input [0:0] ena_b1c9;
  input [0:0] ena_b2c0;
  input [0:0] ena_b2c1;
  input [0:0] ena_b2c10;
  input [0:0] ena_b2c11;
  input [0:0] ena_b2c12;
  input [0:0] ena_b2c13;
  input [0:0] ena_b2c14;
  input [0:0] ena_b2c15;
  input [0:0] ena_b2c16;
  input [0:0] ena_b2c17;
  input [0:0] ena_b2c18;
  input [0:0] ena_b2c19;
  input [0:0] ena_b2c2;
  input [0:0] ena_b2c20;
  input [0:0] ena_b2c21;
  input [0:0] ena_b2c22;
  input [0:0] ena_b2c23;
  input [0:0] ena_b2c3;
  input [0:0] ena_b2c4;
  input [0:0] ena_b2c5;
  input [0:0] ena_b2c6;
  input [0:0] ena_b2c7;
  input [0:0] ena_b2c8;
  input [0:0] ena_b2c9;
  input [9:0] freq_word0;
  input [9:0] freq_word1;
  input [9:0] freq_word10;
  input [9:0] freq_word11;
  input [9:0] freq_word12;
  input [9:0] freq_word13;
  input [9:0] freq_word14;
  input [9:0] freq_word15;
  input [9:0] freq_word16;
  input [9:0] freq_word17;
  input [9:0] freq_word18;
  input [9:0] freq_word19;
  input [9:0] freq_word2;
  input [9:0] freq_word20;
  input [9:0] freq_word21;
  input [9:0] freq_word22;
  input [9:0] freq_word23;
  input [9:0] freq_word24;
  input [9:0] freq_word25;
  input [9:0] freq_word26;
  input [9:0] freq_word27;
  input [9:0] freq_word28;
  input [9:0] freq_word29;
  input [9:0] freq_word3;
  input [9:0] freq_word30;
  input [9:0] freq_word31;
  input [9:0] freq_word32;
  input [9:0] freq_word33;
  input [9:0] freq_word34;
  input [9:0] freq_word35;
  input [9:0] freq_word4;
  input [9:0] freq_word5;
  input [9:0] freq_word6;
  input [9:0] freq_word7;
  input [9:0] freq_word8;
  input [9:0] freq_word9;
  input [0:0] rst;
  output [13:0] iout0;
  output [13:0] iout1;
  output [13:0] iout10;
  output [13:0] iout11;
  output [13:0] iout2;
  output [13:0] iout3;
  output [13:0] iout4;
  output [13:0] iout5;
  output [13:0] iout6;
  output [13:0] iout7;
  output [13:0] iout8;
  output [13:0] iout9;

  wire [15:0] addsub10_s_net;
  wire [15:0] addsub11_s_net_x0;
  wire [15:0] addsub12_s_net;
  wire [15:0] addsub13_s_net_x0;
  wire [15:0] addsub14_s_net;
  wire [15:0] addsub15_s_net_x0;
  wire [15:0] addsub1_s_net_x0;
  wire [15:0] addsub1_s_net_x2;
  wire [15:0] addsub1_s_net_x3;
  wire [15:0] addsub1_s_net_x4;
  wire [15:0] addsub1_s_net_x5;
  wire [15:0] addsub2_s_net;
  wire [15:0] addsub3_s_net_x0;
  wire [15:0] addsub3_s_net_x10;
  wire [15:0] addsub3_s_net_x11;
  wire [15:0] addsub3_s_net_x12;
  wire [15:0] addsub3_s_net_x13;
  wire [15:0] addsub3_s_net_x14;
  wire [15:0] addsub3_s_net_x15;
  wire [15:0] addsub3_s_net_x16;
  wire [15:0] addsub3_s_net_x17;
  wire [15:0] addsub3_s_net_x6;
  wire [15:0] addsub3_s_net_x7;
  wire [15:0] addsub3_s_net_x8;
  wire [15:0] addsub3_s_net_x9;
  wire [18:0] addsub44_s_net_x0;
  wire [18:0] addsub44_s_net_x1;
  wire [18:0] addsub44_s_net_x2;
  wire [18:0] addsub45_s_net_x0;
  wire [18:0] addsub45_s_net_x1;
  wire [18:0] addsub45_s_net_x2;
  wire [15:0] addsub4_s_net;
  wire [15:0] addsub5_s_net_x0;
  wire [17:0] addsub5_s_net_x38;
  wire [17:0] addsub5_s_net_x39;
  wire [17:0] addsub5_s_net_x40;
  wire [17:0] addsub5_s_net_x41;
  wire [17:0] addsub5_s_net_x42;
  wire [17:0] addsub5_s_net_x43;
  wire [17:0] addsub5_s_net_x44;
  wire [17:0] addsub5_s_net_x45;
  wire [17:0] addsub5_s_net_x46;
  wire [17:0] addsub5_s_net_x47;
  wire [17:0] addsub5_s_net_x48;
  wire [17:0] addsub5_s_net_x49;
  wire [17:0] addsub5_s_net_x50;
  wire [17:0] addsub5_s_net_x51;
  wire [17:0] addsub5_s_net_x52;
  wire [17:0] addsub5_s_net_x53;
  wire [17:0] addsub5_s_net_x54;
  wire [17:0] addsub5_s_net_x55;
  wire [17:0] addsub5_s_net_x56;
  wire [17:0] addsub5_s_net_x57;
  wire [17:0] addsub5_s_net_x58;
  wire [17:0] addsub5_s_net_x59;
  wire [17:0] addsub5_s_net_x60;
  wire [17:0] addsub5_s_net_x61;
  wire [15:0] addsub6_s_net;
  wire [15:0] addsub7_s_net_x0;
  wire [15:0] addsub8_s_net;
  wire [15:0] addsub9_s_net_x0;
  wire [15:0] addsub_s_net;
  wire [0:0] ce_1_sg_x317;
  wire [0:0] clk_1_sg_x317;
  wire [15:0] convert3_dout_net_x3;
  wire [15:0] convert3_dout_net_x4;
  wire [15:0] convert3_dout_net_x5;
  wire [15:0] convert3_dout_net_x6;
  wire [15:0] convert3_dout_net_x7;
  wire [15:0] convert3_dout_net_x8;
  wire [15:0] convert4_dout_net_x72;
  wire [15:0] convert4_dout_net_x73;
  wire [15:0] convert4_dout_net_x74;
  wire [15:0] convert4_dout_net_x75;
  wire [15:0] convert4_dout_net_x76;
  wire [15:0] convert4_dout_net_x77;
  wire [15:0] convert4_dout_net_x78;
  wire [15:0] convert4_dout_net_x79;
  wire [15:0] convert4_dout_net_x80;
  wire [15:0] convert4_dout_net_x81;
  wire [15:0] convert4_dout_net_x82;
  wire [15:0] convert4_dout_net_x83;
  wire [15:0] convert4_dout_net_x84;
  wire [15:0] convert4_dout_net_x85;
  wire [15:0] convert4_dout_net_x86;
  wire [15:0] convert4_dout_net_x87;
  wire [15:0] convert4_dout_net_x88;
  wire [15:0] convert4_dout_net_x89;
  wire [15:0] convert4_dout_net_x90;
  wire [15:0] convert4_dout_net_x91;
  wire [15:0] convert4_dout_net_x92;
  wire [15:0] convert4_dout_net_x93;
  wire [15:0] convert4_dout_net_x94;
  wire [15:0] convert4_dout_net_x95;
  wire [15:0] convert5_dout_net_x72;
  wire [15:0] convert5_dout_net_x73;
  wire [15:0] convert5_dout_net_x74;
  wire [15:0] convert5_dout_net_x75;
  wire [15:0] convert5_dout_net_x76;
  wire [15:0] convert5_dout_net_x77;
  wire [15:0] convert5_dout_net_x78;
  wire [15:0] convert5_dout_net_x79;
  wire [15:0] convert5_dout_net_x80;
  wire [15:0] convert5_dout_net_x81;
  wire [15:0] convert5_dout_net_x82;
  wire [15:0] convert5_dout_net_x83;
  wire [15:0] convert5_dout_net_x84;
  wire [15:0] convert5_dout_net_x85;
  wire [15:0] convert5_dout_net_x86;
  wire [15:0] convert5_dout_net_x87;
  wire [15:0] convert5_dout_net_x88;
  wire [15:0] convert5_dout_net_x89;
  wire [15:0] convert5_dout_net_x90;
  wire [15:0] convert5_dout_net_x91;
  wire [15:0] convert5_dout_net_x92;
  wire [15:0] convert5_dout_net_x93;
  wire [15:0] convert5_dout_net_x94;
  wire [15:0] convert5_dout_net_x95;
  wire [15:0] delay10_q_net_x2;
  wire [15:0] delay11_q_net_x2;
  wire [15:0] delay12_q_net_x2;
  wire [15:0] delay13_q_net_x10;
  wire [15:0] delay13_q_net_x11;
  wire [15:0] delay13_q_net_x12;
  wire [15:0] delay13_q_net_x13;
  wire [15:0] delay13_q_net_x14;
  wire [15:0] delay13_q_net_x2;
  wire [15:0] delay13_q_net_x3;
  wire [15:0] delay13_q_net_x4;
  wire [15:0] delay13_q_net_x5;
  wire [15:0] delay13_q_net_x6;
  wire [15:0] delay13_q_net_x7;
  wire [15:0] delay13_q_net_x8;
  wire [15:0] delay13_q_net_x9;
  wire [15:0] delay14_q_net_x10;
  wire [15:0] delay14_q_net_x11;
  wire [15:0] delay14_q_net_x12;
  wire [15:0] delay14_q_net_x13;
  wire [15:0] delay14_q_net_x14;
  wire [15:0] delay14_q_net_x2;
  wire [15:0] delay14_q_net_x3;
  wire [15:0] delay14_q_net_x4;
  wire [15:0] delay14_q_net_x5;
  wire [15:0] delay14_q_net_x6;
  wire [15:0] delay14_q_net_x7;
  wire [15:0] delay14_q_net_x8;
  wire [15:0] delay14_q_net_x9;
  wire [15:0] delay15_q_net_x0;
  wire [15:0] delay15_q_net_x1;
  wire [15:0] delay15_q_net_x10;
  wire [15:0] delay15_q_net_x11;
  wire [15:0] delay15_q_net_x12;
  wire [15:0] delay15_q_net_x13;
  wire [15:0] delay15_q_net_x14;
  wire [15:0] delay15_q_net_x15;
  wire [15:0] delay15_q_net_x16;
  wire [15:0] delay15_q_net_x17;
  wire [15:0] delay15_q_net_x18;
  wire [15:0] delay15_q_net_x2;
  wire [15:0] delay15_q_net_x3;
  wire [15:0] delay15_q_net_x4;
  wire [15:0] delay15_q_net_x5;
  wire [15:0] delay15_q_net_x6;
  wire [15:0] delay15_q_net_x7;
  wire [15:0] delay15_q_net_x8;
  wire [15:0] delay15_q_net_x9;
  wire [15:0] delay16_q_net_x0;
  wire [15:0] delay16_q_net_x1;
  wire [15:0] delay16_q_net_x2;
  wire [15:0] delay16_q_net_x3;
  wire [15:0] delay16_q_net_x4;
  wire [15:0] delay16_q_net_x5;
  wire [0:0] delay17_q_net_x4;
  wire [0:0] delay17_q_net_x5;
  wire [0:0] delay17_q_net_x6;
  wire [15:0] delay1_q_net;
  wire [15:0] delay1_q_net_x10;
  wire [15:0] delay1_q_net_x11;
  wire [15:0] delay1_q_net_x12;
  wire [15:0] delay1_q_net_x13;
  wire [15:0] delay1_q_net_x14;
  wire [15:0] delay1_q_net_x15;
  wire [15:0] delay1_q_net_x16;
  wire [15:0] delay1_q_net_x2;
  wire [15:0] delay1_q_net_x3;
  wire [15:0] delay1_q_net_x4;
  wire [15:0] delay1_q_net_x5;
  wire [15:0] delay1_q_net_x6;
  wire [15:0] delay1_q_net_x7;
  wire [15:0] delay1_q_net_x8;
  wire [15:0] delay1_q_net_x9;
  wire [15:0] delay24_q_net_x2;
  wire [15:0] delay25_q_net_x2;
  wire [15:0] delay26_q_net_x2;
  wire [15:0] delay27_q_net_x2;
  wire [15:0] delay28_q_net_x2;
  wire [15:0] delay29_q_net_x2;
  wire [15:0] delay2_q_net;
  wire [15:0] delay30_q_net_x2;
  wire [15:0] delay31_q_net_x2;
  wire [0:0] delay34_q_net_x3;
  wire [15:0] delay3_q_net;
  wire [15:0] delay3_q_net_x0;
  wire [15:0] delay3_q_net_x1;
  wire [15:0] delay3_q_net_x2;
  wire [15:0] delay3_q_net_x3;
  wire [15:0] delay3_q_net_x4;
  wire [15:0] delay3_q_net_x5;
  wire [18:0] delay45_q_net;
  wire [18:0] delay46_q_net;
  wire [18:0] delay47_q_net;
  wire [18:0] delay48_q_net;
  wire [18:0] delay49_q_net;
  wire [15:0] delay4_q_net;
  wire [18:0] delay50_q_net;
  wire [15:0] delay5_q_net;
  wire [15:0] delay6_q_net;
  wire [15:0] delay7_q_net;
  wire [15:0] delay7_q_net_x0;
  wire [15:0] delay7_q_net_x1;
  wire [15:0] delay7_q_net_x2;
  wire [15:0] delay7_q_net_x3;
  wire [15:0] delay7_q_net_x4;
  wire [15:0] delay7_q_net_x5;
  wire [15:0] delay8_q_net_x2;
  wire [15:0] delay9_q_net_x2;
  wire [15:0] delay_q_net;
  wire [15:0] delay_q_net_x10;
  wire [15:0] delay_q_net_x11;
  wire [15:0] delay_q_net_x3;
  wire [15:0] delay_q_net_x4;
  wire [15:0] delay_q_net_x5;
  wire [15:0] delay_q_net_x6;
  wire [15:0] delay_q_net_x7;
  wire [15:0] delay_q_net_x8;
  wire [15:0] delay_q_net_x9;
  wire [15:0] din1_net;
  wire [15:0] din2_net;
  wire [15:0] din5_net;
  wire [0:0] ena_b0c0_net;
  wire [0:0] ena_b0c10_net;
  wire [0:0] ena_b0c11_net;
  wire [0:0] ena_b0c12_net;
  wire [0:0] ena_b0c13_net;
  wire [0:0] ena_b0c14_net;
  wire [0:0] ena_b0c15_net;
  wire [0:0] ena_b0c16_net;
  wire [0:0] ena_b0c17_net;
  wire [0:0] ena_b0c18_net;
  wire [0:0] ena_b0c19_net;
  wire [0:0] ena_b0c1_net;
  wire [0:0] ena_b0c20_net;
  wire [0:0] ena_b0c21_net;
  wire [0:0] ena_b0c22_net;
  wire [0:0] ena_b0c23_net;
  wire [0:0] ena_b0c2_net;
  wire [0:0] ena_b0c3_net;
  wire [0:0] ena_b0c4_net;
  wire [0:0] ena_b0c5_net;
  wire [0:0] ena_b0c6_net;
  wire [0:0] ena_b0c7_net;
  wire [0:0] ena_b0c8_net;
  wire [0:0] ena_b0c9_net;
  wire [0:0] ena_b1c0_net;
  wire [0:0] ena_b1c10_net;
  wire [0:0] ena_b1c11_net;
  wire [0:0] ena_b1c12_net;
  wire [0:0] ena_b1c13_net;
  wire [0:0] ena_b1c14_net;
  wire [0:0] ena_b1c15_net;
  wire [0:0] ena_b1c16_net;
  wire [0:0] ena_b1c17_net;
  wire [0:0] ena_b1c18_net;
  wire [0:0] ena_b1c19_net;
  wire [0:0] ena_b1c1_net;
  wire [0:0] ena_b1c20_net;
  wire [0:0] ena_b1c21_net;
  wire [0:0] ena_b1c22_net;
  wire [0:0] ena_b1c23_net;
  wire [0:0] ena_b1c2_net;
  wire [0:0] ena_b1c3_net;
  wire [0:0] ena_b1c4_net;
  wire [0:0] ena_b1c5_net;
  wire [0:0] ena_b1c6_net;
  wire [0:0] ena_b1c7_net;
  wire [0:0] ena_b1c8_net;
  wire [0:0] ena_b1c9_net;
  wire [0:0] ena_b2c0_net;
  wire [0:0] ena_b2c10_net;
  wire [0:0] ena_b2c11_net;
  wire [0:0] ena_b2c12_net;
  wire [0:0] ena_b2c13_net;
  wire [0:0] ena_b2c14_net;
  wire [0:0] ena_b2c15_net;
  wire [0:0] ena_b2c16_net;
  wire [0:0] ena_b2c17_net;
  wire [0:0] ena_b2c18_net;
  wire [0:0] ena_b2c19_net;
  wire [0:0] ena_b2c1_net;
  wire [0:0] ena_b2c20_net;
  wire [0:0] ena_b2c21_net;
  wire [0:0] ena_b2c22_net;
  wire [0:0] ena_b2c23_net;
  wire [0:0] ena_b2c2_net;
  wire [0:0] ena_b2c3_net;
  wire [0:0] ena_b2c4_net;
  wire [0:0] ena_b2c5_net;
  wire [0:0] ena_b2c6_net;
  wire [0:0] ena_b2c7_net;
  wire [0:0] ena_b2c8_net;
  wire [0:0] ena_b2c9_net;
  wire [9:0] freq_word0_net;
  wire [9:0] freq_word10_net;
  wire [9:0] freq_word11_net;
  wire [9:0] freq_word12_net;
  wire [9:0] freq_word13_net;
  wire [9:0] freq_word14_net;
  wire [9:0] freq_word15_net;
  wire [9:0] freq_word16_net;
  wire [9:0] freq_word17_net;
  wire [9:0] freq_word18_net;
  wire [9:0] freq_word19_net;
  wire [9:0] freq_word1_net;
  wire [9:0] freq_word20_net;
  wire [9:0] freq_word21_net;
  wire [9:0] freq_word22_net;
  wire [9:0] freq_word23_net;
  wire [9:0] freq_word24_net;
  wire [9:0] freq_word25_net;
  wire [9:0] freq_word26_net;
  wire [9:0] freq_word27_net;
  wire [9:0] freq_word28_net;
  wire [9:0] freq_word29_net;
  wire [9:0] freq_word2_net;
  wire [9:0] freq_word30_net;
  wire [9:0] freq_word31_net;
  wire [9:0] freq_word32_net;
  wire [9:0] freq_word33_net;
  wire [9:0] freq_word34_net;
  wire [9:0] freq_word35_net;
  wire [9:0] freq_word3_net;
  wire [9:0] freq_word4_net;
  wire [9:0] freq_word5_net;
  wire [9:0] freq_word6_net;
  wire [9:0] freq_word7_net;
  wire [9:0] freq_word8_net;
  wire [9:0] freq_word9_net;
  wire [13:0] iout0_net;
  wire [13:0] iout10_net;
  wire [13:0] iout11_net;
  wire [13:0] iout1_net;
  wire [13:0] iout2_net;
  wire [13:0] iout3_net;
  wire [13:0] iout4_net;
  wire [13:0] iout5_net;
  wire [13:0] iout6_net;
  wire [13:0] iout7_net;
  wire [13:0] iout8_net;
  wire [13:0] iout9_net;
  wire [15:0] mux3_y_net_x10;
  wire [15:0] mux3_y_net_x11;
  wire [15:0] mux3_y_net_x12;
  wire [15:0] mux3_y_net_x13;
  wire [15:0] mux3_y_net_x2;
  wire [15:0] mux3_y_net_x3;
  wire [15:0] mux3_y_net_x4;
  wire [15:0] mux3_y_net_x5;
  wire [15:0] mux3_y_net_x6;
  wire [15:0] mux3_y_net_x7;
  wire [15:0] mux3_y_net_x8;
  wire [15:0] mux3_y_net_x9;
  wire [18:0] reinterpret1_output_port_net_x1;
  wire [18:0] reinterpret2_output_port_net_x1;
  wire [18:0] reinterpret3_output_port_net_x1;
  wire [18:0] reinterpret4_output_port_net_x1;
  wire [18:0] reinterpret5_output_port_net_x1;
  wire [18:0] reinterpret6_output_port_net_x1;
  wire [0:0] rst_net;

  assign ce_1_sg_x317 = ce_1;
  assign clk_1_sg_x317 = clk_1;
  assign din1_net = din1;
  assign din2_net = din2;
  assign din5_net = din5;
  assign ena_b0c0_net = ena_b0c0;
  assign ena_b0c1_net = ena_b0c1;
  assign ena_b0c10_net = ena_b0c10;
  assign ena_b0c11_net = ena_b0c11;
  assign ena_b0c12_net = ena_b0c12;
  assign ena_b0c13_net = ena_b0c13;
  assign ena_b0c14_net = ena_b0c14;
  assign ena_b0c15_net = ena_b0c15;
  assign ena_b0c16_net = ena_b0c16;
  assign ena_b0c17_net = ena_b0c17;
  assign ena_b0c18_net = ena_b0c18;
  assign ena_b0c19_net = ena_b0c19;
  assign ena_b0c2_net = ena_b0c2;
  assign ena_b0c20_net = ena_b0c20;
  assign ena_b0c21_net = ena_b0c21;
  assign ena_b0c22_net = ena_b0c22;
  assign ena_b0c23_net = ena_b0c23;
  assign ena_b0c3_net = ena_b0c3;
  assign ena_b0c4_net = ena_b0c4;
  assign ena_b0c5_net = ena_b0c5;
  assign ena_b0c6_net = ena_b0c6;
  assign ena_b0c7_net = ena_b0c7;
  assign ena_b0c8_net = ena_b0c8;
  assign ena_b0c9_net = ena_b0c9;
  assign ena_b1c0_net = ena_b1c0;
  assign ena_b1c1_net = ena_b1c1;
  assign ena_b1c10_net = ena_b1c10;
  assign ena_b1c11_net = ena_b1c11;
  assign ena_b1c12_net = ena_b1c12;
  assign ena_b1c13_net = ena_b1c13;
  assign ena_b1c14_net = ena_b1c14;
  assign ena_b1c15_net = ena_b1c15;
  assign ena_b1c16_net = ena_b1c16;
  assign ena_b1c17_net = ena_b1c17;
  assign ena_b1c18_net = ena_b1c18;
  assign ena_b1c19_net = ena_b1c19;
  assign ena_b1c2_net = ena_b1c2;
  assign ena_b1c20_net = ena_b1c20;
  assign ena_b1c21_net = ena_b1c21;
  assign ena_b1c22_net = ena_b1c22;
  assign ena_b1c23_net = ena_b1c23;
  assign ena_b1c3_net = ena_b1c3;
  assign ena_b1c4_net = ena_b1c4;
  assign ena_b1c5_net = ena_b1c5;
  assign ena_b1c6_net = ena_b1c6;
  assign ena_b1c7_net = ena_b1c7;
  assign ena_b1c8_net = ena_b1c8;
  assign ena_b1c9_net = ena_b1c9;
  assign ena_b2c0_net = ena_b2c0;
  assign ena_b2c1_net = ena_b2c1;
  assign ena_b2c10_net = ena_b2c10;
  assign ena_b2c11_net = ena_b2c11;
  assign ena_b2c12_net = ena_b2c12;
  assign ena_b2c13_net = ena_b2c13;
  assign ena_b2c14_net = ena_b2c14;
  assign ena_b2c15_net = ena_b2c15;
  assign ena_b2c16_net = ena_b2c16;
  assign ena_b2c17_net = ena_b2c17;
  assign ena_b2c18_net = ena_b2c18;
  assign ena_b2c19_net = ena_b2c19;
  assign ena_b2c2_net = ena_b2c2;
  assign ena_b2c20_net = ena_b2c20;
  assign ena_b2c21_net = ena_b2c21;
  assign ena_b2c22_net = ena_b2c22;
  assign ena_b2c23_net = ena_b2c23;
  assign ena_b2c3_net = ena_b2c3;
  assign ena_b2c4_net = ena_b2c4;
  assign ena_b2c5_net = ena_b2c5;
  assign ena_b2c6_net = ena_b2c6;
  assign ena_b2c7_net = ena_b2c7;
  assign ena_b2c8_net = ena_b2c8;
  assign ena_b2c9_net = ena_b2c9;
  assign freq_word0_net = freq_word0;
  assign freq_word1_net = freq_word1;
  assign freq_word10_net = freq_word10;
  assign freq_word11_net = freq_word11;
  assign freq_word12_net = freq_word12;
  assign freq_word13_net = freq_word13;
  assign freq_word14_net = freq_word14;
  assign freq_word15_net = freq_word15;
  assign freq_word16_net = freq_word16;
  assign freq_word17_net = freq_word17;
  assign freq_word18_net = freq_word18;
  assign freq_word19_net = freq_word19;
  assign freq_word2_net = freq_word2;
  assign freq_word20_net = freq_word20;
  assign freq_word21_net = freq_word21;
  assign freq_word22_net = freq_word22;
  assign freq_word23_net = freq_word23;
  assign freq_word24_net = freq_word24;
  assign freq_word25_net = freq_word25;
  assign freq_word26_net = freq_word26;
  assign freq_word27_net = freq_word27;
  assign freq_word28_net = freq_word28;
  assign freq_word29_net = freq_word29;
  assign freq_word3_net = freq_word3;
  assign freq_word30_net = freq_word30;
  assign freq_word31_net = freq_word31;
  assign freq_word32_net = freq_word32;
  assign freq_word33_net = freq_word33;
  assign freq_word34_net = freq_word34;
  assign freq_word35_net = freq_word35;
  assign freq_word4_net = freq_word4;
  assign freq_word5_net = freq_word5;
  assign freq_word6_net = freq_word6;
  assign freq_word7_net = freq_word7;
  assign freq_word8_net = freq_word8;
  assign freq_word9_net = freq_word9;
  assign iout0 = iout0_net;
  assign iout1 = iout1_net;
  assign iout10 = iout10_net;
  assign iout11 = iout11_net;
  assign iout2 = iout2_net;
  assign iout3 = iout3_net;
  assign iout4 = iout4_net;
  assign iout5 = iout5_net;
  assign iout6 = iout6_net;
  assign iout7 = iout7_net;
  assign iout8 = iout8_net;
  assign iout9 = iout9_net;
  assign rst_net = rst;


  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub (
    .a(addsub1_s_net_x4),
    .b(addsub1_s_net_x2),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub1 (
    .a(addsub_s_net),
    .b(delay_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub1_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub10 (
    .a(addsub3_s_net_x15),
    .b(addsub3_s_net_x9),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub10_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub11 (
    .a(addsub10_s_net),
    .b(delay5_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub11_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub12 (
    .a(addsub3_s_net_x16),
    .b(addsub3_s_net_x10),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub12_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub13 (
    .a(addsub12_s_net),
    .b(delay6_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub13_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub14 (
    .a(addsub3_s_net_x17),
    .b(addsub3_s_net_x11),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub14_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub15 (
    .a(addsub14_s_net),
    .b(delay7_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub15_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub2 (
    .a(addsub3_s_net_x12),
    .b(addsub3_s_net_x6),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub2_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub3 (
    .a(addsub2_s_net),
    .b(delay1_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub3_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub4 (
    .a(addsub3_s_net_x13),
    .b(addsub3_s_net_x7),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub4_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub5 (
    .a(addsub4_s_net),
    .b(delay2_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub5_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub6 (
    .a(addsub3_s_net_x14),
    .b(addsub3_s_net_x8),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub6_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub7 (
    .a(addsub6_s_net),
    .b(delay3_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub7_s_net_x0)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub8 (
    .a(addsub1_s_net_x5),
    .b(addsub1_s_net_x3),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub8_s_net)
  );

  xladdsub #(

    .a_arith(`xlSigned),
    .a_bin_pt(15),
    .a_width(16),
    .b_arith(`xlSigned),
    .b_bin_pt(15),
    .b_width(16),
    .c_has_c_out(0),
    .c_latency(1),
    .c_output_width(17),
    .core_name0("addsb_11_0_4450b28271eb3e37"),
    .extra_registers(0),
    .full_s_arith(2),
    .full_s_width(17),
    .latency(1),
    .overflow(1),
    .quantization(1),
    .s_arith(`xlSigned),
    .s_bin_pt(15),
    .s_width(16))
  addsub9 (
    .a(addsub8_s_net),
    .b(delay4_q_net),
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .clr(1'b0),
    .en(1'b1),
    .s(addsub9_s_net_x0)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay7_q_net_x3),
    .en(1'b1),
    .q(delay_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay1 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay3_q_net_x3),
    .en(1'b1),
    .q(delay1_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay10 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay16_q_net_x0),
    .en(1'b1),
    .q(delay10_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay11 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay15_q_net_x0),
    .en(1'b1),
    .q(delay11_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay12 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay7_q_net_x4),
    .en(1'b1),
    .q(delay12_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay13 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay3_q_net_x4),
    .en(1'b1),
    .q(delay13_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay14 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay16_q_net_x4),
    .en(1'b1),
    .q(delay14_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay15 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay15_q_net_x5),
    .en(1'b1),
    .q(delay15_q_net_x2)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay2 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay16_q_net_x3),
    .en(1'b1),
    .q(delay2_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay24 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay7_q_net_x1),
    .en(1'b1),
    .q(delay24_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay25 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay3_q_net_x1),
    .en(1'b1),
    .q(delay25_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay26 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay16_q_net_x1),
    .en(1'b1),
    .q(delay26_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay27 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay15_q_net_x1),
    .en(1'b1),
    .q(delay27_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay28 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay7_q_net_x5),
    .en(1'b1),
    .q(delay28_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay29 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay3_q_net_x5),
    .en(1'b1),
    .q(delay29_q_net_x2)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay3 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay15_q_net_x4),
    .en(1'b1),
    .q(delay3_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay30 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay16_q_net_x5),
    .en(1'b1),
    .q(delay30_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay31 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay15_q_net_x6),
    .en(1'b1),
    .q(delay31_q_net_x2)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay4 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay7_q_net_x2),
    .en(1'b1),
    .q(delay4_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(19))
  delay45 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(addsub44_s_net_x1),
    .en(1'b1),
    .q(delay45_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(19))
  delay46 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(addsub45_s_net_x1),
    .en(1'b1),
    .q(delay46_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(19))
  delay47 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(addsub44_s_net_x2),
    .en(1'b1),
    .q(delay47_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(19))
  delay48 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(addsub45_s_net_x2),
    .en(1'b1),
    .q(delay48_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(19))
  delay49 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(addsub44_s_net_x0),
    .en(1'b1),
    .q(delay49_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay5 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay3_q_net_x2),
    .en(1'b1),
    .q(delay5_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(19))
  delay50 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(addsub45_s_net_x0),
    .en(1'b1),
    .q(delay50_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay6 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay16_q_net_x2),
    .en(1'b1),
    .q(delay6_q_net)
  );

  xldelay #(

    .latency(8),
    .reg_retiming(0),
    .width(16))
  delay7 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay15_q_net_x3),
    .en(1'b1),
    .q(delay7_q_net)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay8 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay7_q_net_x0),
    .en(1'b1),
    .q(delay8_q_net_x2)
  );

  xldelay #(

    .latency(1),
    .reg_retiming(0),
    .width(16))
  delay9 (
    .ce(ce_1_sg_x317),
    .clk(clk_1_sg_x317),
    .d(delay3_q_net_x0),
    .en(1'b1),
    .q(delay9_q_net_x2)
  );

  hbf1_filter_module_d6c24d2777  hbf1_filter_d6c24d2777 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(din5_net),
    .in2(din1_net),
    .in3(din2_net),
    .rst(rst_net),
    .out1(delay_q_net_x5),
    .out2(delay1_q_net_x5),
    .out3(delay_q_net_x6),
    .out4(delay1_q_net_x6),
    .out5(delay_q_net_x7),
    .out6(delay1_q_net_x7),
    .valid_out(delay34_q_net_x3)
  );

  hbf2_filter_module_0c29128e9b  hbf2_filter1_d42e54eb43 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x7),
    .in2(delay1_q_net_x7),
    .valid_in(delay34_q_net_x3),
    .out1(delay_q_net_x9),
    .out2(delay1_q_net_x3),
    .out3(delay_q_net_x10),
    .out4(delay1_q_net_x4),
    .valid_out(delay17_q_net_x5)
  );

  hbf2_filter_module_0c29128e9b  hbf2_filter2_c7c21675b8 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x6),
    .in2(delay1_q_net_x6),
    .valid_in(delay34_q_net_x3),
    .out1(delay_q_net_x11),
    .out2(delay1_q_net_x10),
    .out3(delay_q_net_x4),
    .out4(delay1_q_net_x11),
    .valid_out(delay17_q_net_x6)
  );

  hbf2_filter_module_0c29128e9b  hbf2_filter_0c29128e9b (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x5),
    .in2(delay1_q_net_x5),
    .valid_in(delay34_q_net_x3),
    .out1(delay_q_net_x3),
    .out2(delay1_q_net_x8),
    .out3(delay_q_net_x8),
    .out4(delay1_q_net_x9),
    .valid_out(delay17_q_net_x4)
  );

  hbf3_filter_module_e5616ca24f  hbf3_filter1_2ba05af649 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .xn(reinterpret4_output_port_net_x1),
    .y1(delay1_q_net_x12),
    .y2(convert3_dout_net_x4)
  );

  hbf3_filter_module_e5616ca24f  hbf3_filter2_3f53bbd164 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .xn(reinterpret6_output_port_net_x1),
    .y1(delay1_q_net_x13),
    .y2(convert3_dout_net_x5)
  );

  hbf3_filter_module_e5616ca24f  hbf3_filter3_0cfb095931 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .xn(reinterpret1_output_port_net_x1),
    .y1(delay1_q_net_x14),
    .y2(convert3_dout_net_x6)
  );

  hbf3_filter_module_e5616ca24f  hbf3_filter4_1c270935a7 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .xn(reinterpret2_output_port_net_x1),
    .y1(delay1_q_net_x15),
    .y2(convert3_dout_net_x7)
  );

  hbf3_filter_module_e5616ca24f  hbf3_filter5_13d2ce741a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .xn(reinterpret3_output_port_net_x1),
    .y1(delay1_q_net_x16),
    .y2(convert3_dout_net_x8)
  );

  hbf3_filter_module_e5616ca24f  hbf3_filter_e5616ca24f (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .xn(reinterpret5_output_port_net_x1),
    .y1(delay1_q_net_x2),
    .y2(convert3_dout_net_x3)
  );

  hbf4_filter_module_42671de005  hbf4_filter1_5acaa13d69 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(delay1_q_net_x15),
    .x2(convert3_dout_net_x7),
    .y1(delay7_q_net_x1),
    .y2(delay3_q_net_x1),
    .y3(delay16_q_net_x1),
    .y4(delay15_q_net_x1)
  );

  hbf4_filter_module_42671de005  hbf4_filter2_063b002390 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(delay1_q_net_x14),
    .x2(convert3_dout_net_x6),
    .y1(delay7_q_net_x2),
    .y2(delay3_q_net_x2),
    .y3(delay16_q_net_x2),
    .y4(delay15_q_net_x3)
  );

  hbf4_filter_module_42671de005  hbf4_filter3_41c59ac1bd (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(delay1_q_net_x13),
    .x2(convert3_dout_net_x5),
    .y1(delay7_q_net_x3),
    .y2(delay3_q_net_x3),
    .y3(delay16_q_net_x3),
    .y4(delay15_q_net_x4)
  );

  hbf4_filter_module_42671de005  hbf4_filter4_6e5abb8d50 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(delay1_q_net_x12),
    .x2(convert3_dout_net_x4),
    .y1(delay7_q_net_x4),
    .y2(delay3_q_net_x4),
    .y3(delay16_q_net_x4),
    .y4(delay15_q_net_x5)
  );

  hbf4_filter_module_42671de005  hbf4_filter5_fb74fd9bc8 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(delay1_q_net_x16),
    .x2(convert3_dout_net_x8),
    .y1(delay7_q_net_x5),
    .y2(delay3_q_net_x5),
    .y3(delay16_q_net_x5),
    .y4(delay15_q_net_x6)
  );

  hbf4_filter_module_42671de005  hbf4_filter_42671de005 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(delay1_q_net_x2),
    .x2(convert3_dout_net_x3),
    .y1(delay7_q_net_x0),
    .y2(delay3_q_net_x0),
    .y3(delay16_q_net_x0),
    .y4(delay15_q_net_x0)
  );

  mixer1_module_53ccf2fc2a  mixer10_17718635e9 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word10_net),
    .i(delay13_q_net_x3),
    .q(delay13_q_net_x10),
    .iout(convert4_dout_net_x73),
    .qout(convert5_dout_net_x73)
  );

  mixer1_module_53ccf2fc2a  mixer11_47988a4d23 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word11_net),
    .i(delay13_q_net_x8),
    .q(delay13_q_net_x12),
    .iout(convert4_dout_net_x74),
    .qout(convert5_dout_net_x74)
  );

  mixer1_module_53ccf2fc2a  mixer12_3eb5cef15a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word12_net),
    .i(mux3_y_net_x5),
    .q(mux3_y_net_x8),
    .iout(convert4_dout_net_x75),
    .qout(convert5_dout_net_x75)
  );

  mixer1_module_53ccf2fc2a  mixer13_28a40cf9ff (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word13_net),
    .i(mux3_y_net_x6),
    .q(mux3_y_net_x10),
    .iout(convert4_dout_net_x76),
    .qout(convert5_dout_net_x76)
  );

  mixer1_module_53ccf2fc2a  mixer14_280aecf562 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word14_net),
    .i(mux3_y_net_x2),
    .q(mux3_y_net_x9),
    .iout(convert4_dout_net_x77),
    .qout(convert5_dout_net_x77)
  );

  mixer1536_band3_module_800ec86a93  mixer1536_band3_800ec86a93 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .i0(delay24_q_net_x2),
    .i1(delay25_q_net_x2),
    .i2(delay26_q_net_x2),
    .i3(delay27_q_net_x2),
    .q0(delay28_q_net_x2),
    .q1(delay29_q_net_x2),
    .q2(delay30_q_net_x2),
    .q3(delay31_q_net_x2),
    .i0_out(addsub1_s_net_x2),
    .i1_out(addsub3_s_net_x6),
    .i2_out(addsub3_s_net_x7),
    .i3_out(addsub3_s_net_x8),
    .q0_out(addsub1_s_net_x3),
    .q1_out(addsub3_s_net_x9),
    .q2_out(addsub3_s_net_x10),
    .q3_out(addsub3_s_net_x11)
  );

  mixer1536_minus_band3_module_212d868d6c  mixer1536_minus_band3_212d868d6c (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .i0(delay8_q_net_x2),
    .i1(delay9_q_net_x2),
    .i2(delay10_q_net_x2),
    .i3(delay11_q_net_x2),
    .q0(delay12_q_net_x2),
    .q1(delay13_q_net_x2),
    .q2(delay14_q_net_x2),
    .q3(delay15_q_net_x2),
    .i0_out(addsub1_s_net_x4),
    .i1_out(addsub3_s_net_x12),
    .i2_out(addsub3_s_net_x13),
    .i3_out(addsub3_s_net_x14),
    .q0_out(addsub1_s_net_x5),
    .q1_out(addsub3_s_net_x15),
    .q2_out(addsub3_s_net_x16),
    .q3_out(addsub3_s_net_x17)
  );

  mixer1_module_53ccf2fc2a  mixer15_b35ea1d570 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word15_net),
    .i(mux3_y_net_x7),
    .q(mux3_y_net_x11),
    .iout(convert4_dout_net_x78),
    .qout(convert5_dout_net_x78)
  );

  mixer1_module_53ccf2fc2a  mixer16_7802dc57a0 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word16_net),
    .i(delay15_q_net_x17),
    .q(delay15_q_net_x8),
    .iout(convert4_dout_net_x79),
    .qout(convert5_dout_net_x79)
  );

  mixer1_module_53ccf2fc2a  mixer17_2466cf092a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word17_net),
    .i(delay15_q_net_x18),
    .q(delay15_q_net_x9),
    .iout(convert4_dout_net_x80),
    .qout(convert5_dout_net_x80)
  );

  mixer1_module_53ccf2fc2a  mixer18_f1088ba76b (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word18_net),
    .i(delay14_q_net_x13),
    .q(delay14_q_net_x4),
    .iout(convert4_dout_net_x81),
    .qout(convert5_dout_net_x81)
  );

  mixer1_module_53ccf2fc2a  mixer19_e6e6780500 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word19_net),
    .i(delay14_q_net_x14),
    .q(delay14_q_net_x5),
    .iout(convert4_dout_net_x82),
    .qout(convert5_dout_net_x82)
  );

  mixer1_module_53ccf2fc2a  mixer1_53ccf2fc2a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word1_net),
    .i(delay15_q_net_x11),
    .q(delay15_q_net_x15),
    .iout(convert4_dout_net_x72),
    .qout(convert5_dout_net_x72)
  );

  mixer1_module_53ccf2fc2a  mixer20_b7d4213426 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word20_net),
    .i(delay13_q_net_x13),
    .q(delay13_q_net_x4),
    .iout(convert4_dout_net_x84),
    .qout(convert5_dout_net_x84)
  );

  mixer1_module_53ccf2fc2a  mixer21_6747754beb (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word21_net),
    .i(delay13_q_net_x14),
    .q(delay13_q_net_x5),
    .iout(convert4_dout_net_x85),
    .qout(convert5_dout_net_x85)
  );

  mixer1_module_53ccf2fc2a  mixer22_aec938a401 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word22_net),
    .i(mux3_y_net_x12),
    .q(mux3_y_net_x3),
    .iout(convert4_dout_net_x86),
    .qout(convert5_dout_net_x86)
  );

  mixer1_module_53ccf2fc2a  mixer23_ef7074c9b5 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word23_net),
    .i(mux3_y_net_x13),
    .q(mux3_y_net_x4),
    .iout(convert4_dout_net_x87),
    .qout(convert5_dout_net_x87)
  );

  mixer1_module_53ccf2fc2a  mixer2_2a22ebd65b (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word2_net),
    .i(delay15_q_net_x7),
    .q(delay15_q_net_x14),
    .iout(convert4_dout_net_x83),
    .qout(convert5_dout_net_x83)
  );

  mixer1_module_53ccf2fc2a  mixer384_e81ac9b8c2 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word0_net),
    .i(delay15_q_net_x10),
    .q(delay15_q_net_x13),
    .iout(convert4_dout_net_x89),
    .qout(convert5_dout_net_x89)
  );

  mixer1_module_53ccf2fc2a  mixer3_e6dece10f1 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word3_net),
    .i(delay15_q_net_x12),
    .q(delay15_q_net_x16),
    .iout(convert4_dout_net_x88),
    .qout(convert5_dout_net_x88)
  );

  mixer1_module_53ccf2fc2a  mixer4_5e9aaec51a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word4_net),
    .i(delay14_q_net_x6),
    .q(delay14_q_net_x9),
    .iout(convert4_dout_net_x90),
    .qout(convert5_dout_net_x90)
  );

  mixer1_module_53ccf2fc2a  mixer5_834c88466a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word5_net),
    .i(delay14_q_net_x7),
    .q(delay14_q_net_x11),
    .iout(convert4_dout_net_x91),
    .qout(convert5_dout_net_x91)
  );

  mixer1_module_53ccf2fc2a  mixer6_40976a0e2e (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word6_net),
    .i(delay14_q_net_x3),
    .q(delay14_q_net_x10),
    .iout(convert4_dout_net_x92),
    .qout(convert5_dout_net_x92)
  );

  mixer1_module_53ccf2fc2a  mixer7_ced2eb88e0 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word7_net),
    .i(delay14_q_net_x8),
    .q(delay14_q_net_x12),
    .iout(convert4_dout_net_x93),
    .qout(convert5_dout_net_x93)
  );

  mixer1_module_53ccf2fc2a  mixer8_d5335b3ec8 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word8_net),
    .i(delay13_q_net_x6),
    .q(delay13_q_net_x9),
    .iout(convert4_dout_net_x94),
    .qout(convert5_dout_net_x94)
  );

  mixer1_module_53ccf2fc2a  mixer9_6ac49966b7 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word(freq_word9_net),
    .i(delay13_q_net_x7),
    .q(delay13_q_net_x11),
    .iout(convert4_dout_net_x95),
    .qout(convert5_dout_net_x95)
  );

  reinterpret_f67f49dab9  reinterpret1 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay46_q_net),
    .output_port(reinterpret1_output_port_net_x1)
  );

  reinterpret_f67f49dab9  reinterpret2 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay47_q_net),
    .output_port(reinterpret2_output_port_net_x1)
  );

  reinterpret_f67f49dab9  reinterpret3 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay48_q_net),
    .output_port(reinterpret3_output_port_net_x1)
  );

  reinterpret_f67f49dab9  reinterpret4 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay50_q_net),
    .output_port(reinterpret4_output_port_net_x1)
  );

  reinterpret_f67f49dab9  reinterpret5 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay49_q_net),
    .output_port(reinterpret5_output_port_net_x1)
  );

  reinterpret_f67f49dab9  reinterpret6 (
    .ce(1'b0),
    .clk(1'b0),
    .clr(1'b0),
    .input_port(delay45_q_net),
    .output_port(reinterpret6_output_port_net_x1)
  );

  rf_mixer_module_089a594eba  rf_mixer_089a594eba (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .freq_word1(freq_word24_net),
    .freq_word10(freq_word25_net),
    .freq_word11(freq_word26_net),
    .freq_word12(freq_word27_net),
    .freq_word2(freq_word28_net),
    .freq_word3(freq_word29_net),
    .freq_word4(freq_word30_net),
    .freq_word5(freq_word31_net),
    .freq_word6(freq_word32_net),
    .freq_word7(freq_word33_net),
    .freq_word8(freq_word34_net),
    .freq_word9(freq_word35_net),
    .i1(addsub5_s_net_x38),
    .i10(addsub5_s_net_x41),
    .i11(addsub5_s_net_x48),
    .i12(addsub5_s_net_x49),
    .i2(addsub5_s_net_x42),
    .i3(addsub5_s_net_x43),
    .i4(addsub5_s_net_x39),
    .i5(addsub5_s_net_x44),
    .i6(addsub5_s_net_x45),
    .i7(addsub5_s_net_x40),
    .i8(addsub5_s_net_x46),
    .i9(addsub5_s_net_x47),
    .q1(addsub5_s_net_x50),
    .q10(addsub5_s_net_x53),
    .q11(addsub5_s_net_x60),
    .q12(addsub5_s_net_x61),
    .q2(addsub5_s_net_x54),
    .q3(addsub5_s_net_x55),
    .q4(addsub5_s_net_x51),
    .q5(addsub5_s_net_x56),
    .q6(addsub5_s_net_x57),
    .q7(addsub5_s_net_x52),
    .q8(addsub5_s_net_x58),
    .q9(addsub5_s_net_x59),
    .out1(iout0_net),
    .out10(iout9_net),
    .out11(iout10_net),
    .out12(iout11_net),
    .out2(iout1_net),
    .out3(iout2_net),
    .out4(iout3_net),
    .out5(iout4_net),
    .out6(iout5_net),
    .out7(iout6_net),
    .out8(iout7_net),
    .out9(iout8_net)
  );

  subsystem_module_3a8d411b03  subsystem1_9e76029bb7 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .ena_c0(ena_b1c0_net),
    .ena_c1(ena_b1c1_net),
    .ena_c10(ena_b1c10_net),
    .ena_c11(ena_b1c11_net),
    .ena_c12(ena_b1c12_net),
    .ena_c13(ena_b1c13_net),
    .ena_c14(ena_b1c14_net),
    .ena_c15(ena_b1c15_net),
    .ena_c16(ena_b1c16_net),
    .ena_c17(ena_b1c17_net),
    .ena_c18(ena_b1c18_net),
    .ena_c19(ena_b1c19_net),
    .ena_c2(ena_b1c2_net),
    .ena_c20(ena_b1c20_net),
    .ena_c21(ena_b1c21_net),
    .ena_c22(ena_b1c22_net),
    .ena_c23(ena_b1c23_net),
    .ena_c3(ena_b1c3_net),
    .ena_c4(ena_b1c4_net),
    .ena_c5(ena_b1c5_net),
    .ena_c6(ena_b1c6_net),
    .ena_c7(ena_b1c7_net),
    .ena_c8(ena_b1c8_net),
    .ena_c9(ena_b1c9_net),
    .i0(convert4_dout_net_x89),
    .i1(convert4_dout_net_x72),
    .i10(convert4_dout_net_x73),
    .i11(convert4_dout_net_x74),
    .i12(convert4_dout_net_x75),
    .i13(convert4_dout_net_x76),
    .i14(convert4_dout_net_x77),
    .i15(convert4_dout_net_x78),
    .i16(convert4_dout_net_x79),
    .i17(convert4_dout_net_x80),
    .i18(convert4_dout_net_x81),
    .i19(convert4_dout_net_x82),
    .i2(convert4_dout_net_x83),
    .i20(convert4_dout_net_x84),
    .i21(convert4_dout_net_x85),
    .i22(convert4_dout_net_x86),
    .i23(convert4_dout_net_x87),
    .i3(convert4_dout_net_x88),
    .i4(convert4_dout_net_x90),
    .i5(convert4_dout_net_x91),
    .i6(convert4_dout_net_x92),
    .i7(convert4_dout_net_x93),
    .i8(convert4_dout_net_x94),
    .i9(convert4_dout_net_x95),
    .q0(convert5_dout_net_x89),
    .q1(convert5_dout_net_x72),
    .q10(convert5_dout_net_x73),
    .q11(convert5_dout_net_x74),
    .q12(convert5_dout_net_x75),
    .q13(convert5_dout_net_x76),
    .q14(convert5_dout_net_x77),
    .q15(convert5_dout_net_x78),
    .q16(convert5_dout_net_x79),
    .q17(convert5_dout_net_x80),
    .q18(convert5_dout_net_x81),
    .q19(convert5_dout_net_x82),
    .q2(convert5_dout_net_x83),
    .q20(convert5_dout_net_x84),
    .q21(convert5_dout_net_x85),
    .q22(convert5_dout_net_x86),
    .q23(convert5_dout_net_x87),
    .q3(convert5_dout_net_x88),
    .q4(convert5_dout_net_x90),
    .q5(convert5_dout_net_x91),
    .q6(convert5_dout_net_x92),
    .q7(convert5_dout_net_x93),
    .q8(convert5_dout_net_x94),
    .q9(convert5_dout_net_x95),
    .out1(addsub44_s_net_x1),
    .out2(addsub45_s_net_x1)
  );

  subsystem_module_3a8d411b03  subsystem2_5c08131094 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .ena_c0(ena_b2c0_net),
    .ena_c1(ena_b2c1_net),
    .ena_c10(ena_b2c10_net),
    .ena_c11(ena_b2c11_net),
    .ena_c12(ena_b2c12_net),
    .ena_c13(ena_b2c13_net),
    .ena_c14(ena_b2c14_net),
    .ena_c15(ena_b2c15_net),
    .ena_c16(ena_b2c16_net),
    .ena_c17(ena_b2c17_net),
    .ena_c18(ena_b2c18_net),
    .ena_c19(ena_b2c19_net),
    .ena_c2(ena_b2c2_net),
    .ena_c20(ena_b2c20_net),
    .ena_c21(ena_b2c21_net),
    .ena_c22(ena_b2c22_net),
    .ena_c23(ena_b2c23_net),
    .ena_c3(ena_b2c3_net),
    .ena_c4(ena_b2c4_net),
    .ena_c5(ena_b2c5_net),
    .ena_c6(ena_b2c6_net),
    .ena_c7(ena_b2c7_net),
    .ena_c8(ena_b2c8_net),
    .ena_c9(ena_b2c9_net),
    .i0(convert4_dout_net_x89),
    .i1(convert4_dout_net_x72),
    .i10(convert4_dout_net_x73),
    .i11(convert4_dout_net_x74),
    .i12(convert4_dout_net_x75),
    .i13(convert4_dout_net_x76),
    .i14(convert4_dout_net_x77),
    .i15(convert4_dout_net_x78),
    .i16(convert4_dout_net_x79),
    .i17(convert4_dout_net_x80),
    .i18(convert4_dout_net_x81),
    .i19(convert4_dout_net_x82),
    .i2(convert4_dout_net_x83),
    .i20(convert4_dout_net_x84),
    .i21(convert4_dout_net_x85),
    .i22(convert4_dout_net_x86),
    .i23(convert4_dout_net_x87),
    .i3(convert4_dout_net_x88),
    .i4(convert4_dout_net_x90),
    .i5(convert4_dout_net_x91),
    .i6(convert4_dout_net_x92),
    .i7(convert4_dout_net_x93),
    .i8(convert4_dout_net_x94),
    .i9(convert4_dout_net_x95),
    .q0(convert5_dout_net_x89),
    .q1(convert5_dout_net_x72),
    .q10(convert5_dout_net_x73),
    .q11(convert5_dout_net_x74),
    .q12(convert5_dout_net_x75),
    .q13(convert5_dout_net_x76),
    .q14(convert5_dout_net_x77),
    .q15(convert5_dout_net_x78),
    .q16(convert5_dout_net_x79),
    .q17(convert5_dout_net_x80),
    .q18(convert5_dout_net_x81),
    .q19(convert5_dout_net_x82),
    .q2(convert5_dout_net_x83),
    .q20(convert5_dout_net_x84),
    .q21(convert5_dout_net_x85),
    .q22(convert5_dout_net_x86),
    .q23(convert5_dout_net_x87),
    .q3(convert5_dout_net_x88),
    .q4(convert5_dout_net_x90),
    .q5(convert5_dout_net_x91),
    .q6(convert5_dout_net_x92),
    .q7(convert5_dout_net_x93),
    .q8(convert5_dout_net_x94),
    .q9(convert5_dout_net_x95),
    .out1(addsub44_s_net_x2),
    .out2(addsub45_s_net_x2)
  );

  subsystem_module_3a8d411b03  subsystem_3a8d411b03 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .ena_c0(ena_b0c0_net),
    .ena_c1(ena_b0c1_net),
    .ena_c10(ena_b0c10_net),
    .ena_c11(ena_b0c11_net),
    .ena_c12(ena_b0c12_net),
    .ena_c13(ena_b0c13_net),
    .ena_c14(ena_b0c14_net),
    .ena_c15(ena_b0c15_net),
    .ena_c16(ena_b0c22_net),
    .ena_c17(ena_b0c23_net),
    .ena_c18(ena_b0c16_net),
    .ena_c19(ena_b0c17_net),
    .ena_c2(ena_b0c2_net),
    .ena_c20(ena_b0c18_net),
    .ena_c21(ena_b0c19_net),
    .ena_c22(ena_b0c20_net),
    .ena_c23(ena_b0c21_net),
    .ena_c3(ena_b0c3_net),
    .ena_c4(ena_b0c4_net),
    .ena_c5(ena_b0c5_net),
    .ena_c6(ena_b0c6_net),
    .ena_c7(ena_b0c7_net),
    .ena_c8(ena_b0c8_net),
    .ena_c9(ena_b0c9_net),
    .i0(convert4_dout_net_x89),
    .i1(convert4_dout_net_x72),
    .i10(convert4_dout_net_x73),
    .i11(convert4_dout_net_x74),
    .i12(convert4_dout_net_x75),
    .i13(convert4_dout_net_x76),
    .i14(convert4_dout_net_x77),
    .i15(convert4_dout_net_x78),
    .i16(convert4_dout_net_x79),
    .i17(convert4_dout_net_x80),
    .i18(convert4_dout_net_x81),
    .i19(convert4_dout_net_x82),
    .i2(convert4_dout_net_x83),
    .i20(convert4_dout_net_x84),
    .i21(convert4_dout_net_x85),
    .i22(convert4_dout_net_x86),
    .i23(convert4_dout_net_x87),
    .i3(convert4_dout_net_x88),
    .i4(convert4_dout_net_x90),
    .i5(convert4_dout_net_x91),
    .i6(convert4_dout_net_x92),
    .i7(convert4_dout_net_x93),
    .i8(convert4_dout_net_x94),
    .i9(convert4_dout_net_x95),
    .q0(convert5_dout_net_x89),
    .q1(convert5_dout_net_x72),
    .q10(convert5_dout_net_x73),
    .q11(convert5_dout_net_x74),
    .q12(convert5_dout_net_x75),
    .q13(convert5_dout_net_x76),
    .q14(convert5_dout_net_x77),
    .q15(convert5_dout_net_x78),
    .q16(convert5_dout_net_x79),
    .q17(convert5_dout_net_x80),
    .q18(convert5_dout_net_x81),
    .q19(convert5_dout_net_x82),
    .q2(convert5_dout_net_x83),
    .q20(convert5_dout_net_x84),
    .q21(convert5_dout_net_x85),
    .q22(convert5_dout_net_x86),
    .q23(convert5_dout_net_x87),
    .q3(convert5_dout_net_x88),
    .q4(convert5_dout_net_x90),
    .q5(convert5_dout_net_x91),
    .q6(convert5_dout_net_x92),
    .q7(convert5_dout_net_x93),
    .q8(convert5_dout_net_x94),
    .q9(convert5_dout_net_x95),
    .out1(addsub44_s_net_x0),
    .out2(addsub45_s_net_x0)
  );

  x3fir_filter_module_745784bd72  x3fir_filter1_543da2f84c (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(addsub9_s_net_x0),
    .x2(addsub11_s_net_x0),
    .x3(addsub13_s_net_x0),
    .x4(addsub15_s_net_x0),
    .y1(addsub5_s_net_x50),
    .y10(addsub5_s_net_x53),
    .y11(addsub5_s_net_x60),
    .y12(addsub5_s_net_x61),
    .y2(addsub5_s_net_x54),
    .y3(addsub5_s_net_x55),
    .y4(addsub5_s_net_x51),
    .y5(addsub5_s_net_x56),
    .y6(addsub5_s_net_x57),
    .y7(addsub5_s_net_x52),
    .y8(addsub5_s_net_x58),
    .y9(addsub5_s_net_x59)
  );

  x3fir_filter_module_745784bd72  x3fir_filter_745784bd72 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .x1(addsub1_s_net_x0),
    .x2(addsub3_s_net_x0),
    .x3(addsub5_s_net_x0),
    .x4(addsub7_s_net_x0),
    .y1(addsub5_s_net_x38),
    .y10(addsub5_s_net_x41),
    .y11(addsub5_s_net_x48),
    .y12(addsub5_s_net_x49),
    .y2(addsub5_s_net_x42),
    .y3(addsub5_s_net_x43),
    .y4(addsub5_s_net_x39),
    .y5(addsub5_s_net_x44),
    .y6(addsub5_s_net_x45),
    .y7(addsub5_s_net_x40),
    .y8(addsub5_s_net_x46),
    .y9(addsub5_s_net_x47)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter10_c6d18dc66a (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x10),
    .valid_in(delay17_q_net_x5),
    .out1(delay15_q_net_x8),
    .out2(delay14_q_net_x4),
    .out3(delay13_q_net_x4),
    .out4(mux3_y_net_x3)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter11_d643bd2b5d (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay1_q_net_x4),
    .valid_in(delay17_q_net_x5),
    .out1(delay15_q_net_x9),
    .out2(delay14_q_net_x5),
    .out3(delay13_q_net_x5),
    .out4(mux3_y_net_x4)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter12_a2fb08989d (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x3),
    .valid_in(delay17_q_net_x4),
    .out1(delay15_q_net_x10),
    .out2(delay14_q_net_x6),
    .out3(delay13_q_net_x6),
    .out4(mux3_y_net_x5)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter1_be749245b8 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay1_q_net_x8),
    .valid_in(delay17_q_net_x4),
    .out1(delay15_q_net_x7),
    .out2(delay14_q_net_x3),
    .out3(delay13_q_net_x3),
    .out4(mux3_y_net_x2)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter2_2f8fa4ddfd (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x8),
    .valid_in(delay17_q_net_x4),
    .out1(delay15_q_net_x11),
    .out2(delay14_q_net_x7),
    .out3(delay13_q_net_x7),
    .out4(mux3_y_net_x6)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter3_e53a211d25 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay1_q_net_x9),
    .valid_in(delay17_q_net_x4),
    .out1(delay15_q_net_x12),
    .out2(delay14_q_net_x8),
    .out3(delay13_q_net_x8),
    .out4(mux3_y_net_x7)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter4_c062f4df35 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x11),
    .valid_in(delay17_q_net_x6),
    .out1(delay15_q_net_x13),
    .out2(delay14_q_net_x9),
    .out3(delay13_q_net_x9),
    .out4(mux3_y_net_x8)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter5_b9e6a3566f (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay1_q_net_x10),
    .valid_in(delay17_q_net_x6),
    .out1(delay15_q_net_x14),
    .out2(delay14_q_net_x10),
    .out3(delay13_q_net_x10),
    .out4(mux3_y_net_x9)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter6_2ed7aee58c (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x4),
    .valid_in(delay17_q_net_x6),
    .out1(delay15_q_net_x15),
    .out2(delay14_q_net_x11),
    .out3(delay13_q_net_x11),
    .out4(mux3_y_net_x10)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter7_59cc7566e8 (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay1_q_net_x11),
    .valid_in(delay17_q_net_x6),
    .out1(delay15_q_net_x16),
    .out2(delay14_q_net_x12),
    .out3(delay13_q_net_x12),
    .out4(mux3_y_net_x11)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter8_6294465dfc (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay_q_net_x9),
    .valid_in(delay17_q_net_x5),
    .out1(delay15_q_net_x17),
    .out2(delay14_q_net_x13),
    .out3(delay13_q_net_x13),
    .out4(mux3_y_net_x12)
  );

  x4fir_filter1_module_be749245b8  x4fir_filter9_0a289f3dda (
    .ce_1(ce_1_sg_x317),
    .clk_1(clk_1_sg_x317),
    .in1(delay1_q_net_x3),
    .valid_in(delay17_q_net_x5),
    .out1(delay15_q_net_x18),
    .out2(delay14_q_net_x14),
    .out3(delay13_q_net_x14),
    .out4(mux3_y_net_x13)
  );
endmodule
